syntax = "proto3";

package services.provider.v1;

option csharp_namespace = "Trinsic.Services.Provider.V1";
option go_package = "services/provider/v1/provider";
option java_package = "trinsic.services.provider.v1";
option java_multiple_files = true;

import "services/account/v1/account.proto";
import "services/options/field-options.proto";
import "services/common/v1/common.proto";

// Details of an ecosystem
message Ecosystem {
  // URN of the ecosystem
  string id = 1;

  // Globally unique name for the ecosystem
  string name = 2;

  // Ecosystem description
  string description = 3;

  // Display details
  EcosystemDisplay display = 6;

  // Domain
  string domain = 7;

  reserved 4, 5;
  reserved "uri", "webhooks";
}

// Request to create an ecosystem
message CreateEcosystemRequest {
  // Globally unique name for the Ecosystem. This name will be
  // part of the ecosystem-specific URLs and namespaces.
  // Allowed characters are lowercase letters, numbers, underscore and hyphen.
  // If not passed, ecosystem name will be auto-generated.
  string name = 1 [(options.optional) = true];

  // Ecosystem description
  string description = 2 [(options.optional) = true];

  // The account details of the owner of the ecosystem
  services.account.v1.AccountDetails details = 4;

  // New domain URL
  string domain = 5;

  reserved 3;
  reserved "uri";
}

// Response to `CreateEcosystemRequest`
message CreateEcosystemResponse {
  // Details of the created ecosystem
  Ecosystem ecosystem = 1;
  // Account profile for auth of the owner of the ecosystem
  services.account.v1.AccountProfile profile = 2;
  // Indicates if confirmation of account is required.
  services.account.v1.ConfirmationMethod confirmation_method = 3;
}

// Request to update an ecosystem's metadata
message UpdateEcosystemRequest {
  // New description of the ecosystem
  string description = 1;
  // New domain URL
  string domain = 3;

  // The below display can be removed only once the Dashboard is updating this itself - currently it uses this request
  // DEPRECATED, will be removed June 1st 2023

  // Display details
  EcosystemDisplayRequest display = 5 [deprecated = true];

  reserved 2, 4;
  reserved "uri", "name";
}

message EcosystemDisplayRequest {
  //Removed the Dark after discussion with team, as we don't provide a dark UI anywhere (yet) in our platform.
  // EcosystemDisplayDetailsRequest dark = 1;
  EcosystemDisplayDetailsRequest light = 2;
}

message EcosystemDisplayDetailsRequest {
  string color = 4;
  bytes logo_data = 5;
  // MIME type of the file
  string logo_format = 6;

  reserved 1,2,3;
  reserved "id","name","logo_url";
}

// Response to `UpdateEcosystemRequest`
message UpdateEcosystemResponse {
  // Current ecosystem metadata, post-update
  Ecosystem Ecosystem = 1;
}

message EcosystemDisplay {
  //    Removed the Dark after discussion with team, as we don't provide a dark UI anywhere (yet) in our platform.
  EcosystemDisplayDetails light = 2;
  reserved 1;
  reserved "dark";
}

message EcosystemDisplayDetails {
  string logo_url = 3;
  string color = 4;

  reserved 1,2;
  reserved "id","name";
}

// Request to fetch information about an ecosystem
message EcosystemInfoRequest {
}

// Response to `InfoRequest`
message EcosystemInfoResponse {
  // Ecosystem corresponding to current ecosystem in the account token
  Ecosystem ecosystem = 1;
}

// Request to fetch the Trinsic public key used
// to verify authentication token validity
message GetOberonKeyRequest {
}

// Response to `GetOberonKeyRequest`
message GetOberonKeyResponse {
  // Oberon Public Key as RAW base64-url encoded string
  string key = 1;
}

// The below display can be removed only once the Dashboard is updating this itself - currently it uses this request
// DEPRECATED, will be removed June 1st 2023
message RetrieveDomainVerificationRecordRequest {
  option deprecated = true;
}

// The below display can be removed only once the Dashboard is updating this itself - currently it uses this request
// DEPRECATED, will be removed June 1st 2023
message RetrieveDomainVerificationRecordResponse {
  option deprecated = true;
  // TXT record name to use for domain verification
  string verification_record_name = 1;
  // TXT code for domain verification
  string verification_record_Value = 2;
}
// The below display can be removed only once the Dashboard is updating this itself - currently it uses this request
// DEPRECATED, will be removed June 1st 2023
message RefreshDomainVerificationStatusRequest {
  option deprecated = true;
}

// The below display can be removed only once the Dashboard is updating this itself - currently it uses this request
// DEPRECATED, will be removed June 1st 2023
message RefreshDomainVerificationStatusResponse {
  option deprecated = true;
  // Domain URL verified
  string domain = 1;
  // Specifies if the above `domain` was successfully verified
  bool domain_verified = 2;
}

// Search for issuers/holders/verifiers
message SearchWalletConfigurationsRequest {
  // SQL filter to execute. `SELECT * FROM _ WHERE [**queryFilter**]`
  string query_filter = 1;
  // Token provided by previous `SearchResponse`
  // if more data is available for query
  string continuation_token = 2 [(options.optional) = true];
}

message SearchWalletConfigurationResponse {
  // Results matching the search query
  repeated WalletConfiguration results = 1;
  // Whether more results are available for this query via `continuation_token`
  bool has_more_results = 2;
  // Token to fetch next set of results via `SearchRequest`
  string continuation_token = 4;
}

// Strongly typed information about wallet configurations
message WalletConfiguration {
  // Name/description of the wallet
  string name = 1;
  string email = 2  [(options.optional) = true];
  string sms = 3  [(options.optional) = true];
  string wallet_id = 4;
  // The DID of the wallet
  string public_did = 5;
  string config_type = 6;

  // List of active authentication tokens for this wallet.
  // This list does not contain the issued token, only metadata
  // such as ID, description, and creation date.
  repeated services.account.v1.WalletAuthToken auth_tokens = 7;
  // List of external identities associated with this wallet.
  repeated string external_identities = 8;
  // Ecosystem in which this wallet is contained.
  string ecosystem_id = 9;
  string description = 10;
}

enum IdentityProvider {
  // Identity provider is unknown
  Unknown = 0;
  // Identity provider is email
  Email = 1;
  // Identity provider is phone
  Phone = 2;
}

// Options for creation of DID on the ION network
message IonOptions {
  enum IonNetwork {
    TestNet = 0;
    MainNet = 1;
  }

  // ION network on which DID should be published
  IonNetwork network = 1;
}

// Options for creation of DID on the SOV network
message IndyOptions {
  enum IndyNetwork {
    Danube = 0;
    SovrinBuilder = 1;
    SovrinStaging = 2;
    Sovrin = 3;
    IdUnionTest = 4;
    IdUnion = 5;
    IndicioTest = 6;
    IndicioDemo = 7;
    Indicio = 8;
  }

  // SOV network on which DID should be published
  IndyNetwork network = 1;
}

// Request to upgrade a wallet
message UpgradeDidRequest {
  oneof account {
    // Email address of account to upgrade.
    // Mutually exclusive with `walletId` and `didUri`.
    string email = 1;

    // Wallet ID of account to upgrade.
    // Mutually exclusive with `email` and `didUri`.
    string wallet_id = 2;

    // DID URI of the account to upgrade.
    // Mutually exclusive with `email` and `walletId`.
    string did_uri = 6;
  }

  // DID Method to which wallet should be upgraded
  services.common.v1.SupportedDidMethod method = 3;

  oneof options {
    // Configuration for creation of DID on ION network
    IonOptions ion_options = 4;
    // Configuration for creation of DID on INDY network
    IndyOptions indy_options = 5;
  }
}

// Response to `UpgradeDIDRequest`
message UpgradeDidResponse {
  // New DID of wallet
  string did = 1;
}

service Provider {
  // Create new ecosystem and assign the authenticated user as owner
  rpc CreateEcosystem(CreateEcosystemRequest) returns (CreateEcosystemResponse) {
    option (options.sdk_template_option).ignore = true;
  }

  // The below display can be removed only once the Dashboard is updating this itself - currently it uses this request
  // DEPRECATED, will be removed June 1st 2023
  rpc UpdateEcosystem(UpdateEcosystemRequest) returns (UpdateEcosystemResponse) {
    option deprecated = true;
    option (options.sdk_template_option).deprecated = {active: true, message: "This will be removed June 1, 2023"};
  }

  // Returns the public key being used to create/verify oberon tokens
  rpc GetOberonKey(GetOberonKeyRequest) returns (GetOberonKeyResponse) {
    option (options.sdk_template_option).anonymous = true;
    option (options.sdk_template_option).no_arguments = true;
  }

  // Upgrade a wallet's DID from `did:key` to another method
  rpc UpgradeDID(UpgradeDidRequest) returns (UpgradeDidResponse);

  // Retrieve a random hash TXT that can be used to verify domain ownership
  rpc RetrieveDomainVerificationRecord(RetrieveDomainVerificationRecordRequest) returns (RetrieveDomainVerificationRecordResponse) {
    option (options.sdk_template_option).no_arguments = true;
  }

  // Call to verify domain
  rpc RefreshDomainVerificationStatus(RefreshDomainVerificationStatusRequest) returns (RefreshDomainVerificationStatusResponse) {
    option (options.sdk_template_option).no_arguments = true;
  }

  // Search for issuers/providers/verifiers in the current ecosystem
  rpc SearchWalletConfigurations(SearchWalletConfigurationsRequest) returns (SearchWalletConfigurationResponse);
}
