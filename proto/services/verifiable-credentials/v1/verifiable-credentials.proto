syntax = "proto3";
package services.verifiablecredentials.v1;

option csharp_namespace = "Trinsic.Services.VerifiableCredentials.V1";
option go_package = "services/verifiablecredentials/v1/credential";
option java_package = "trinsic.services.verifiablecredentials.v1";
option java_multiple_files = true;
option objc_class_prefix = "TrinsicServices";

import "services/options/field-options.proto";

// Request to create and sign a JSON-LD Verifiable Credential from a template using public key tied to caller
message IssueFromTemplateRequest {
  reserved 3;
  reserved "framework_id";
  
  // ID of template to use
  string template_id = 1;

  // JSON document string with keys corresponding to the fields of
  // the template referenced by `template_id`
  string values_json = 2;
  

  // Save a copy of the issued credential to this user's wallet. This copy will only contain
  // the credential data, but not the secret proof value. Issuers may use this data to
  // keep track of the details for revocation status.
  bool save_copy = 4;
  
  // The ISO8601 expiration UTC date of the credential. This is a reserved field in the VC specification.
  // If specified, the issued credential will contain an expiration date.
  // https://www.w3.org/TR/vc-data-model/#expiration
  string expiration_date = 5;

  // If true, the issued credential will contain an attestation of the issuer's membership in the ecosystem's
  // governance framework.
  bool include_governance = 6;
}

// Response to `IssueFromTemplateRequest`
message IssueFromTemplateResponse {
  // Verifiable Credential document, in JSON-LD form,
  // constructed from the specified template and values; signed
  // with public key tied to caller of `IssueFromTemplateRequest`
  string document_json = 1;
}

// Request to create a proof for a Verifiable Credential using public key tied to caller.
// Either `item_id`, or `document_json` may be provided, not both.
message CreateProofRequest {
  // Selective disclosure specification. If nothing is provided, the entire proof is returned.
  // Either a custom JSON-LD frame is provided, or a list of attributes is provided for selective disclosure
  oneof disclosure {
    // A valid JSON-LD frame describing which fields should be
    // revealed in the generated proof.
    // If unspecified, all fields in the document will be revealed
    string reveal_document_json = 1;
    // Information about what sections of the document to reveal
    RevealTemplateAttributes reveal_template = 11;
    // Id of verification template with which to construct the JSON-LD proof document
    string verification_template_id = 12;
  }

  // Specify the input to be used to derive this proof.
  // Input can be an existing item in the wallet or an input document
  oneof proof {
    // ID of wallet item stored in a Trinsic cloud wallet
    string item_id = 2;
    // A valid JSON-LD Verifiable Credential document string
    // with an unbound signature. The proof will be derived from this
    // document directly. The document will not be stored in the wallet.
    string document_json = 3;
  }

  // Wrap the output in a verifiable presentation.
  // If the credential used in the proof is bound to the holder DID,
  // the output will always use a verifiable presentation and this field will be ignored.
  bool use_verifiable_presentation = 4;

  // Nonce value used to derive the proof. If not specified, a random nonce will be generated.
  // This value may be represented in base64 format in the proof model.
  bytes nonce = 10 [(options.optional) = true];
}

message RevealTemplateAttributes {
  // A list of document attributes to reveal. If unset, all attributes will be returned.
  repeated string template_attributes = 1;
}

// Response to `CreateProofRequest`
message CreateProofResponse {
  // Valid JSON-LD proof for the specified credential
  string proof_document_json = 1;
}

// Request to verify a proof
message VerifyProofRequest {
  // JSON-LD proof document string to verify
  string proof_document_json = 1;
}

// Response to `VerifyProofRequest`
message VerifyProofResponse {
  // Whether all validations in `validation_results` passed
  bool is_valid = 1;

  // Results of each validation check performed,
  // such as schema conformance, revocation status, signature, etc.
  // Detailed results are provided for failed validations.
  map<string, ValidationMessage> validation_results = 3;

  reserved 2;
  reserved "validation_messages";
}

// Result of a validation check on a proof
message ValidationMessage {
  // Whether this validation check passed
  bool is_valid = 1;

  // If validation failed, contains messages explaining why
  repeated string messages = 2;
}

// Request to send a document to another user's wallet
message SendRequest {
  oneof delivery_method {
    // Email address of user to whom you'll send the item
    string email = 1;

    // Wallet ID of the recipient within the ecosystem
    string wallet_id = 5;

    // DID URI of the recipient
    string did_uri = 6;

    // SMS of user to whom you'll send the item
    string phone_number = 7;
  }
  // Send email notification that credential has been sent to a wallet
  bool send_notification = 4;

  // JSON document to send to recipient
  string document_json = 100;

  reserved 2,3;
  reserved "didcomm_invitation_json";
}

// Response to `SendRequest`
message SendResponse {
}

// Request to update a credential's revocation status
message UpdateStatusRequest {
  // Credential Status ID to update. This is not the same as the credential's ID.
  string credential_status_id = 1;

  // New revocation status of credential
  bool revoked = 2;
}

// Response to `UpdateStatusRequest`
message UpdateStatusResponse {
}

// Request to check a credential's revocation status
message CheckStatusRequest {
  // Credential Status ID to check. This is not the same as the credential's ID.
  string credential_status_id = 1;
}

// Response to `CheckStatusRequest`
message CheckStatusResponse {
  // The credential's revocation status
  bool revoked = 1;
}

service VerifiableCredential {
  // Sign and issue a verifiable credential from a pre-defined template.
  // This process will also add schema validation and
  // revocation registry values to the credential.
  rpc IssueFromTemplate(IssueFromTemplateRequest) returns (IssueFromTemplateResponse);

  // Check credential status in the revocation registry
  rpc CheckStatus(CheckStatusRequest) returns (CheckStatusResponse);

  // Update credential status by setting the revocation value
  rpc UpdateStatus(UpdateStatusRequest) returns (UpdateStatusResponse);

  // Create a proof from a signed document that is a valid
  // verifiable credential and contains a signature from which a proof can be derived.
  rpc CreateProof(CreateProofRequest) returns (CreateProofResponse);

  // Verifies a proof by checking the signature value, and if possible schema validation,
  // revocation status, and issuer status against a trust registry
  rpc VerifyProof(VerifyProofRequest) returns (VerifyProofResponse);

  // Sends a document directly to a user's email within the given ecosystem
  rpc Send(SendRequest) returns (SendResponse);

  // Create credential offer
  rpc CreateCredentialOffer(CreateCredentialOfferRequest) returns (CreateCredentialOfferResponse);
  // Accept an offer to exchange a credential
  rpc AcceptCredential(AcceptCredentialRequest) returns (AcceptCredentialResponse);
  // Reject an offer to exchange a credential
  rpc RejectCredential(RejectCredentialRequest) returns (RejectCredentialResponse);
}

message CreateCredentialOfferRequest{
  // ID of template to use
  string template_id = 1;
  // JSON document string with keys corresponding to the fields of
  // the template referenced by `template_id`
  string values_json = 2;
  // If true, the credential will be issued with holder binding by specifying 
  // the holder DID in the credential subject
  bool holder_binding = 3;
  // If true, the issued credential will contain an attestation of the issuer's membership in the ecosystem's
  // governance framework.
  bool include_governance = 4;
  // If true, a short URL link will be generated that can be used to share the credential offer with the holder.
  // This link will point to the credential offer in the wallet app.
  bool generate_share_url = 5;
}
message CreateCredentialOfferResponse{
  // The JSON document that contains the credential offer
  string document_json = 1;
  // If requested, a URL that can be used to share the credential offer with the holder.
  // This is a short URL that can be used in a QR code and will redirect the 
  // holder to the credential offer using the wallet app.
  string share_url = 2;
}

message AcceptCredentialRequest{
  oneof offer {
    // The JSON document that contains the credential offer
    string document_json = 1;
    // The ID of the item in the wallet that contains the credential offer
    string item_id = 2;
  }
}
message AcceptCredentialResponse{
  // The ID of the item in the wallet that contains the issued credential
  string item_id = 1;
  // The JSON document that contains the issued credential. 
  // This item is already stored in the wallet.
  string document_json = 2;
}

message RejectCredentialRequest{
  oneof offer {
    // The JSON document that contains the credential offer
    string document_json = 1;
    // The ID of the item in the wallet that contains the credential offer
    string item_id = 2;
  }
}
message RejectCredentialResponse{}
