syntax = "proto3";

package services.verifiablecredentials.templates.v1;

import "services/options/field-options.proto";

option csharp_namespace = "Trinsic.Services.VerifiableCredentials.Templates.V1";
option go_package = "services/verifiablecredentials/templates/v1/template";
option java_package = "trinsic.services.verifiablecredentials.templates.v1";
option java_multiple_files = true;

// Request to fetch a template by ID
message GetCredentialTemplateRequest {
  // ID of template to fetch
  string id = 1;
}

// Response to `GetCredentialTemplateRequest`
message GetCredentialTemplateResponse {
  // Template fetched by ID
  TemplateData template = 1;
}

// Request to search templates using a SQL query
message SearchCredentialTemplatesRequest {
  // SQL query to execute. Example: `SELECT * FROM c WHERE c.name = 'Diploma'`
  string query = 1;

  // Token provided by previous `SearchCredentialTemplatesResponse`
  // if more data is available for query
  string continuation_token = 2 [(options.optional) = true];
}

// Response to `SearchCredentialTemplatesRequest`
message SearchCredentialTemplatesResponse {
  // Raw JSON data returned from query
  string items_json = 1;

  // Whether more results are available for this query via `continuation_token`
  bool has_more_results = 2;

  // Token to fetch next set of results via `SearchCredentialTemplatesRequest`
  string continuation_token = 4;
}

// Request to list templates using a SQL query
message ListCredentialTemplatesRequest {
  // SQL query to execute. Example: `SELECT * FROM c WHERE c.name = 'Diploma'`
  string query = 1;

  // Token provided by previous `ListCredentialTemplatesResponse`
  // if more data is available for query
  string continuation_token = 2 [(options.optional) = true];
}

// Response to `ListCredentialTemplatesRequest`
message ListCredentialTemplatesResponse {
  // Templates found by query
  repeated TemplateData templates = 1;

  // Whether more results are available for this query via `continuation_token`
  bool has_more_results = 2;

  // Token to fetch next set of results via `ListCredentialTemplatesRequest`
  string continuation_token = 3;
}

// Request to delete a template by ID
message DeleteCredentialTemplateRequest {
  // ID of template to delete
  string id = 1;
}

// Response to `DeleteCredentialTemplateRequest`
message DeleteCredentialTemplateResponse {}

// Request to create a new template
message CreateCredentialTemplateRequest {
  // Name of new template. Must be a unique identifier within its ecosystem.
  string name = 1;

  // Fields which compose the template
  map<string, TemplateField> fields = 2;

  // Whether credentials may be issued against this template which have fields
  // not specified in `fields`
  bool allow_additional_fields = 3;

  // Human-readable name of template
  string title = 4;

  // Human-readable description of template
  string description = 5;

  // Optional map describing how to order and categorize the fields within the template. The key of this map is the field `name`.
  // If not provided, this will be auto-generated.
  map<string, FieldOrdering> field_ordering = 6;

  // Options for rendering the template in Apple Wallet
  optional AppleWalletOptions apple_wallet_options = 7;
}

// Response to `CreateCredentialTemplateRequest`
message CreateCredentialTemplateResponse {
  // Created template
  TemplateData data = 1;
}

// Request to update display information for a template
message UpdateCredentialTemplateRequest {
  // ID of Template to update
  string id = 1;
  // New human-readable title of Template
  optional string title = 2;
  // New human-readable description of Template
  optional string description = 3;
  // Fields to update within the Template
  map<string, TemplateFieldPatch> fields = 4;
  // New field ordering options. See documentation for template creation for usage information.
  map<string, FieldOrdering> field_ordering = 5;
  // New Apple Wallet configuration
  optional AppleWalletOptions apple_wallet_options = 6;
}

// Response to `UpdateCredentialTemplateRequest`
message UpdateCredentialTemplateResponse {
  // The Template after the update has been applied
  TemplateData updated_template = 1;
}

// Credential Template
message TemplateData {
  // Template ID
  string id = 1           [json_name = "id"];
  // Template name
  string name = 2;
  // Template version number
  int32 version = 3;
  // Fields defined for the template
  map<string, TemplateField> fields = 4;
  // Whether credentials issued against this template may
  // contain fields not defined by template
  bool allow_additional_fields = 5;
  // URI pointing to template JSON schema document
  string schema_uri = 6;
  // ID of ecosystem in which template resides
  string ecosystem_id = 8 [json_name = "ecosystemId"];
  // Template type (`VerifiableCredential`)
  string type = 9         [json_name = "type"];
  // ID of template creator
  string created_by = 10  [json_name = "createdBy"];
  // Date when template was created as ISO 8601 utc string
  string date_created = 11 [json_name = "dateCreated"];
  // Human-readable template title
  string title = 12;
  // Human-readable template description
  string description = 13;
  // Map describing how to order and categorize the fields within the template. The key of this map is the field `name`.
  map<string, FieldOrdering> field_ordering = 14 [json_name="fieldOrdering"];
  // Options for rendering the template in Apple Wallet
  AppleWalletOptions apple_wallet_options = 15 [json_name="appleWalletOptions"];

  reserved 7;
  reserved "context_uri";
}

// Configuration options for Apple Wallet when
message AppleWalletOptions {
  // Background color, in hex format, of credential when stored in an Apple Wallet.
  string background_color = 1;

  // Foreground color, in hex format, of credential when stored in an Apple Wallet.
  string foreground_color = 2;

  // Label color, in hex format, of credential when stored in an Apple Wallet.
  string label_color = 3;

  // The ID of the template field which should be used as the primary field of a credential.
  string primary_field = 4;

  // The secondary fields of the credential. This is a mapping between the order of a secondary field (0 or 1) and the field name.
  repeated string secondary_fields = 5;

  // The auxiliary fields of the credential. This is a mapping between the order of an auxiliary field (0 or 1) and the field name.
  repeated string auxiliary_fields = 6;
}

// Ordering information for a template field
message FieldOrdering {
  // The order of the field; must be unique within the Template. Fields are sorted by order ascending when displaying a credential.
  // Field orders must be contiguous from `0` to the number of fields minus 1.
  int32 order = 1;

  // The human-readable name of the section this field appears in; used to group together fields when displaying a credential.
  // Sections must be contiguous with respect to `order`.
  string section = 2;
}

// A field defined in a template
message TemplateField {
  // Human-readable name of the field
  string title = 1;

  // Human-readable description of the field
  string description = 2;

  // Whether this field may be omitted when a credential is issued against the template
  bool optional = 3;

  // The type of the field
  FieldType type = 4;

  // How to deal with this URI field when rendering credential. Only use if `type` is `URI`.
  optional UriFieldData uri_data = 6;

  reserved 5;
  reserved "annotations";
}

// A patch to apply to an existing template field
message TemplateFieldPatch {
  // Human-readable name of the field
  optional string title = 1;

  // Human-readable description of the field
  optional string description = 2;

  // How to deal with this URI field when rendering credential. Only use if `type` is `URI`.
  optional UriFieldData uri_data = 3;
}

// Valid types for credential fields
enum FieldType {
  STRING = 0;
  NUMBER = 1;
  BOOL = 2;
  DATETIME = 4;
  URI = 5;
}

// Data pertaining to a URI Field
message UriFieldData {
  // Expected MIME Type of content pointed to by URI. Can be generic (eg, "image/") or specific ("image/png").
  // Defaults to "application/octet-stream".
  string mime_type = 1;

  // How to display the URI value when rendering a credential.
  UriRenderMethod render_method = 2;
}

// How to display a URI value when rendering a credential.
enum UriRenderMethod {
  // Display URI as text
  TEXT = 0;

  // Display URI as a clickable link
  LINK = 1;

  // Display URI as an inline image. Only takes effect if the template field's MIME Type is an image type.
  INLINE_IMAGE = 2;
}

service CredentialTemplates {
  // Create a credential template in the current ecosystem
  rpc Create(CreateCredentialTemplateRequest) returns (CreateCredentialTemplateResponse);

  // Fetch a credential template by ID
  rpc Get(GetCredentialTemplateRequest) returns (GetCredentialTemplateResponse);

  // Update metadata of a template
  rpc Update(UpdateCredentialTemplateRequest) returns (UpdateCredentialTemplateResponse);

  // Search credential templates using SQL, returning strongly-typed template data
  rpc List(ListCredentialTemplatesRequest) returns (ListCredentialTemplatesResponse);

  // Search credential templates using SQL, returning raw JSON data
  rpc Search(SearchCredentialTemplatesRequest) returns (SearchCredentialTemplatesResponse);

  // Delete a credential template from the current ecosystem by ID
  rpc Delete(DeleteCredentialTemplateRequest) returns (DeleteCredentialTemplateResponse);

  // Create/update verification templates
  rpc CreateVerificationTemplate(CreateVerificationTemplateRequest) returns (CreateVerificationTemplateResponse) {
    option (options.sdk_template_option).experimental = {active: true};
  }
  rpc ListVerificationTemplates(ListVerificationTemplatesRequest) returns (ListVerificationTemplatesResponse) {
    option (options.sdk_template_option).experimental = {active: true};
  }
  rpc GetVerificationTemplate(GetVerificationTemplateRequest) returns (GetVerificationTemplateResponse) {
    option (options.sdk_template_option).experimental = {active: true};
  }
  rpc UpdateVerificationTemplate(UpdateVerificationTemplateRequest) returns (UpdateVerificationTemplateResponse) {
    option (options.sdk_template_option).experimental = {active: true};
  }
  rpc DeleteVerificationTemplate(DeleteVerificationTemplateRequest) returns (DeleteVerificationTemplateResponse) {
    option (options.sdk_template_option).experimental = {active: true};
  }
}

// Request to fetch a template by ID
message GetVerificationTemplateRequest {
  // ID of template to fetch
  string id = 1;
}

// Response to `GetCredentialTemplateRequest`
message GetVerificationTemplateResponse {
  // Template fetched by ID
  VerificationTemplateData template = 1;
}


message CreateVerificationTemplateRequest {
  // Name of new template. Must be a unique identifier within its ecosystem.
  string name = 1;
  // Fields which will be required in the verification proof template
  map<string,VerificationTemplateField> fields = 2;
  // TODO - Add support for predicate types - currently only equality.

  // Source credential template, used for verifying that the specified `fields` are present in the credential template
  string credential_template_id = 3;

  // Human-readable name of template
  string title = 4;

  // Human-readable description of template
  string description = 5;
}

message CreateVerificationTemplateResponse {
    VerificationTemplateData data = 1;
}

message UpdateVerificationTemplateRequest {
  // ID of Template to update
  string id = 1;
  // New human-readable title of Template
  optional string title = 2;
  // New human-readable description of Template
  optional string description = 3;
  // Fields to update within the Template
  map<string, VerificationTemplateFieldPatch> fields = 4;
}
message UpdateVerificationTemplateResponse {
  VerificationTemplateData template = 1;
}
message DeleteVerificationTemplateRequest {
  string verification_template_id = 1;
}
message DeleteVerificationTemplateResponse {
  // This space intentionally left blank
}

// Verification Template
message VerificationTemplateData {
  // Template ID
  string id = 1 [json_name = "id"];
  // Template name
  string name = 2 [json_name="name"];
  // Template version number
  int32 version = 3 [json_name="version"];
  // Fields defined for the template
  map<string, VerificationTemplateField> fields = 4 [json_name="fields"];
  // Source credential template, used for verifying that the specified `fields` are present in the credential template
  string credential_template_id = 5;
  // URI pointing to template JSON schema document
  string schema_uri = 6 [json_name="schemaUri"];
  // ID of ecosystem in which template resides
  string ecosystem_id = 8 [json_name = "ecosystemId"];
  // Template type (`VerificationTemplate`)
  string type = 9         [json_name = "type"];
  // ID of template creator
  string created_by = 10  [json_name = "createdBy"];
  // Date when template was created as ISO 8601 utc string
  string date_created = 11 [json_name = "dateCreated"];
  // Human-readable template title
  string title = 12;
  // Human-readable template description
  string description = 13;
}

// Request to list templates using a SQL query
message ListVerificationTemplatesRequest {
  // SQL query to execute. Example: `SELECT * FROM c WHERE c.name = 'Diploma'`
  string query = 1;

  // Token provided by previous `ListCredentialTemplatesResponse`
  // if more data is available for query
  string continuation_token = 2 [(options.optional) = true];
}

message ListVerificationTemplatesResponse {
  // Templates found by query
  repeated VerificationTemplateData templates = 1;

  // Whether more results are available for this query via `continuation_token`
  bool has_more_results = 2;

  // Token to fetch next set of results via `ListVerificationTemplatesRequest`
  string continuation_token = 3;
}

// A field defined in a template
message VerificationTemplateField {
  // Whether this field may be omitted on proof creation
  VerificationShareType field_share_type = 1;
  // User-facing explanation of what is done with this data
  string usage_policy = 2;
  // TODO - Future work supporting proof conditionals/ranges/etc
}

enum VerificationShareType {
  OPTIONAL = 0;
  REQUIRED = 1;
}

// A patch to apply to an existing template field
message VerificationTemplateFieldPatch {
  // Human-readable name of the field
  VerificationShareType field_share_type = 1;

}
