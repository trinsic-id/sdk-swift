syntax = "proto3";
package services.universalwallet.v1;

option csharp_namespace = "Trinsic.Services.UniversalWallet.V1";
option go_package = "services/universalwallet/v1/wallet";
option java_package = "trinsic.services.universalwallet.v1";
option java_multiple_files = true;

import "services/options/field-options.proto";
import "services/provider/v1/provider.proto";

// Search

// Request to search items in wallet
message SearchRequest {
  // SQL Query to execute against items in wallet
  string query = 1;
  // Token provided by previous `SearchResponse`
  // if more data is available for query
  string continuation_token = 2 [(options.optional) = true];
}

// Response to `SearchRequest`
message SearchResponse {
  // Array of query results, as JSON strings
  repeated string items = 1;

  // Whether more results are available for this query via `continuation_token`
  bool has_more_results = 2;

  // Token to fetch next set of results via `SearchRequest`
  string continuation_token = 4;
}

// Get Item

// Request to fetch an item from wallet
message GetItemRequest {
  // ID of item in wallet
  string item_id = 1;
}

// Response to `GetItemRequest`
message GetItemResponse {
  // Item data as a JSON string
  string item_json = 1;

  // Type of item specified when item was inserted into wallet
  string item_type = 2;
}

// Update Item

// Request to update item in wallet
message UpdateItemRequest {
  // ID of item in wallet
  string item_id = 1;

  // Item type (ex. "VerifiableCredential")
  string item_type = 2 [(options.optional) = true];
}

// Response to `UpdateItemRequest`
message UpdateItemResponse {
}

// InsertItem

// Request to insert a JSON document into a wallet
message InsertItemRequest {
  // Document to insert; must be stringified JSON
  string item_json = 1;

  // Item type (ex. "VerifiableCredential")
  string item_type = 2 [(options.optional) = true];
}

// Response to `InsertItemRequest`
message InsertItemResponse {
  // ID of item inserted into wallet
  string item_id = 2;
}

// Request to delete an item in a wallet
message DeleteItemRequest {
  // ID of item to delete
  string item_id = 1;
}

// Response to `DeleteItemRequest`
message DeleteItemResponse {
}


// Request to delete a wallet
message DeleteWalletRequest {
  oneof account {
    // Email address of account to delete.
    // Mutually exclusive with `walletId` and `didUri`.
    string email = 1;

    // Wallet ID of account to delete.
    // Mutually exclusive with `email` and `didUri`.
    string wallet_id = 2;

    // DID URI of the account to delete.
    // Mutually exclusive with `email` and `walletId`.
    string did_uri = 4;
  }
}

// Response to `DeleteWalletRequest`. Empty payload.
message DeleteWalletResponse {}

message CreateWalletRequest {
  // Ecosystem ID of the wallet to create
  string ecosystem_id = 1;
  // Wallet name or description.
  // Use this field to add vendor specific information about this wallet,
  // such as email, phone, internal ID, or anything you'd like to associate
  // with this wallet. This field is searchable.
  optional string description = 2 [(options.optional) = true];
}

message CreateWalletResponse{
  // Auth token for the newly created wallet
  string auth_token = 2;
  // Token ID of the newly generated token
  string token_id = 3;
  // Wallet configuration
  services.provider.v1.WalletConfiguration wallet = 4;

  reserved 1;
}

message GenerateAuthTokenRequest{
  string wallet_id = 1;
  string token_description = 2;
}
message GenerateAuthTokenResponse{
  string token_id = 1;
  string auth_token = 2;
}

// Request to retrieve wallet information about a given wallet identified by its wallet ID
message GetWalletInfoRequest{
  // Wallet ID of the wallet to retrieve
  string wallet_id = 1;
}
// Response to `GetWalletInfoRequest`
message GetWalletInfoResponse {
  // Wallet configuration
  services.provider.v1.WalletConfiguration wallet = 1;
}

// Request to retrieve wallet information about the currently authenticated wallet
message GetMyInfoRequest{}
// Response to `GetMyInfoRequest`
message GetMyInfoResponse {
  // Wallet configuration
  services.provider.v1.WalletConfiguration wallet = 1;
}

// Request to revoke a previously issued auth token
message RevokeAuthTokenRequest{
  // Wallet ID of the wallet to from which to revoke the token
  string wallet_id = 1;
  // Token ID of the token to revoke
  string token_id = 2;
}
message RevokeAuthTokenResponse{}

message ListWalletsRequest{
  string filter = 1;
}
message ListWalletsResponse{
  repeated services.provider.v1.WalletConfiguration wallets = 1;
}

// Service for managing wallets
service UniversalWallet {
  // Retrieve an item from the wallet with a given item identifier
  rpc GetItem(GetItemRequest) returns (GetItemResponse);
  // Search the wallet using a SQL syntax
  rpc Search(SearchRequest) returns (SearchResponse);
  // Insert an item into the wallet
  rpc InsertItem(InsertItemRequest) returns (InsertItemResponse);
  // Update an item in the wallet
  rpc UpdateItem(UpdateItemRequest) returns (UpdateItemResponse);
  // Delete an item from the wallet permanently
  rpc DeleteItem(DeleteItemRequest) returns (DeleteItemResponse);
  // Delete a wallet and its credentials
  rpc DeleteWallet(DeleteWalletRequest) returns (DeleteWalletResponse);


  // Create a new wallet and generate an auth token for access
  rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);

  // Retrieve wallet details and configuration
  rpc GetWalletInfo(GetWalletInfoRequest) returns (GetWalletInfoResponse);

  // Retrieve wallet details and configuration about the currently authenticated wallet
  rpc GetMyInfo(GetMyInfoRequest) returns (GetMyInfoResponse) {
    option (options.sdk_template_option).no_arguments = true;
  }

  // Generate new token for a given wallet and add it to the collection of known auth tokens.
  // This endpoint requires authentication and will return a new token ID and auth token.
  // Use this endpoint if you want to authorize another device, without having to share your
  // existing auth token.
  rpc GenerateAuthToken(GenerateAuthTokenRequest) returns (GenerateAuthTokenResponse);

  // Revokes a previously issued auth token and updates the collection of known auth tokens.
  // This endpoint requires authentication.
  rpc RevokeAuthToken(RevokeAuthTokenRequest) returns (RevokeAuthTokenResponse);

  // Add new external identity to the current wallet, such as email, sms, ethereum address, etc.
  // This identity ownership must be confirmed using `AddIdentityConfirm` via OTP, signature, etc.
  rpc AddExternalIdentityInit(AddExternalIdentityInitRequest) returns (AddExternalIdentityInitResponse);

  // Confirm identity added to the current wallet using `AddExternalIdentityInit`
  rpc AddExternalIdentityConfirm(AddExternalIdentityConfirmRequest) returns (AddExternalIdentityConfirmResponse);

  // Remove an external identity from the current wallet
  rpc RemoveExternalIdentity(RemoveExternalIdentityRequest) returns (RemoveExternalIdentityResponse);

  // Sign-in to an already existing wallet, using an identity added that was previously registered
  // This endpoint does not require authentication, and will return a challenge to be signed or verified
  rpc AuthenticateInit(AuthenticateInitRequest) returns (AuthenticateInitResponse);

  // Confirm sign-in to an already existing wallet and return authentication token
  rpc AuthenticateConfirm(AuthenticateConfirmRequest) returns (AuthenticateConfirmResponse);

  // Resend previous authentication code
  rpc AuthenticateResendCode(AuthenticateResendCodeRequest) returns (AuthenticateResendCodeResponse);

  // List all wallets in the ecosystem
  rpc ListWallets(ListWalletsRequest) returns (ListWalletsResponse);
}

message AddExternalIdentityInitRequest {
  // The user identity to add to the wallet
  // This can be an email address or phone number (formatted as +[country code][phone number])
  string identity = 1;
  // The type of identity provider, like EMAIL or PHONE
  services.provider.v1.IdentityProvider provider = 2;
}
message AddExternalIdentityInitResponse {
  // Challenge or reference to the challenge to be used in the `AddExternalIdentityConfirm` endpoint
  string challenge = 1;
}

message AddExternalIdentityConfirmRequest {
  // The challenge received from the `AddExternalIdentityInit` endpoint
  string challenge = 1;
  // The response to the challenge. If using Email or Phone,
  // this is the OTP code sent to the user's email or phone
  string response = 2;
}
message AddExternalIdentityConfirmResponse {}

message RemoveExternalIdentityRequest {
  // The user identity to remove from the wallet
  // This can be an email address or phone number (formatted as +[country code][phone number])
  string identity = 1;
}
message RemoveExternalIdentityResponse {}

message AuthenticateInitRequest {
  // Identity to add to the wallet
  string identity = 1;
  // Identity provider
  services.provider.v1.IdentityProvider provider = 2;
  // Ecosystem ID to which the wallet belongs
  string ecosystem_id = 3;
}

message AuthenticateInitResponse {
  // The challenge received from the `AcquireAuthTokenInit` endpoint
  // Pass this challenge back to the `AcquireAuthTokenConfirm` endpoint
  string challenge = 1;
}

message AuthenticateResendCodeRequest {
  // Challenge for the code you want resent.
  string challenge = 1;
}

message AuthenticateResendCodeResponse {}

message AuthenticateConfirmRequest {
  // The challenge received from the `AcquireAuthTokenInit` endpoint
  string challenge = 1;
  // The response to the challenge. If using Email or Phone,
  // this is the OTP code sent to the user's email or phone
  string response = 2;
}

message AuthenticateConfirmResponse {
  // Auth token for the wallet
  string auth_token = 1;
}
