syntax = "proto3";
package services.account.v1;

option csharp_namespace = "Trinsic.Services.Account.V1";
option go_package = "services/account/v1/account";
option java_package = "trinsic.services.account.v1";
option java_multiple_files = true;

import "services/options/field-options.proto";

// Request for creating or signing into an account
message SignInRequest {
  // Account registration details
  AccountDetails details = 1 [(options.optional) = true];

  // ID of Ecosystem to use
  // Ignored if `invitation_code` is passed
  string ecosystem_id = 3 [(options.optional) = true];

  reserved 2;
  reserved "invitation_code";
}

// Account registration details
message AccountDetails
{
  // Account name
  string name = 1 [(options.optional) = true];
  // Email address of account. 
  string email = 2 [(options.optional) = true, deprecated = true];
  // SMS number including country code
  string sms = 3 [(options.optional) = true, deprecated = true];
}

// Response for creating new account
// This object will indicate if a confirmation code
// was sent to one of the users two-factor methods
// like email, SMS, etc.
message SignInResponse {
  // Indicates if confirmation of account is required.
  ConfirmationMethod confirmation_method = 3;

  // Contains authentication data for use with the current device.
  // This object must be stored in a secure place. It can also be
  // protected with a PIN, but this is optional.
  // See the docs at https://docs.trinsic.id for more information
  // on working with authentication data.
  AccountProfile profile = 4;
}

// Confirmation method type for two-factor workflows
enum ConfirmationMethod {
  // No confirmation required
  None = 0;
  // Email confirmation required
  Email = 1;
  // SMS confirmation required
  Sms = 2;
  // Confirmation from a connected device is required
  ConnectedDevice = 3;
  // Third-party method of confirmation is required
  Other = 10;
}

// Device profile containing sensitive authentication data.
// This information should be stored securely
message AccountProfile {
  // The type of profile, used to differentiate between
  // protocol schemes or versions
  string profile_type = 1;
  // Auth data containg information about the current device access
  bytes auth_data = 2;
  // Secure token issued by server used to generate zero-knowledge proofs
  bytes auth_token = 3;
  // Token security information about the token.
  // If token protection is enabled, implementations must supply
  // protection secret before using the token for authentication.
  TokenProtection protection = 4;
}

// Token protection info
message TokenProtection {
  // Indicates if token is protected using a PIN,
  // security code, HSM secret, etc.
  bool enabled = 1;
  // The method used to protect the token
  ConfirmationMethod method = 2;
}

// Request for information about the account used to make the request
message AccountInfoRequest {}

// Information about the account used to make the request
message AccountInfoResponse {
  // The account details associated with
  // the calling request context
  AccountDetails details = 1;
  // The wallet ID associated with this account
  string wallet_id = 3;
  // The device ID associated with this account session
  string device_id = 4;
  // The ecosystem ID within which this account resides
  string ecosystem_id = 5;
  // The public DID associated with this account.
  // This DID is used as the `issuer` when signing verifiable credentials
  string public_did = 6;

  // List of active authentication tokens for this wallet.
  // This list does not contain the issued token, only metadata
  // such as ID, description, and creation date.
  repeated WalletAuthToken auth_tokens = 8;

  reserved 2, 7;
  reserved "ecosystems", "authorized_webhooks";
}

// Request to begin login flow
message LoginRequest {
  // Email address of account. If unspecified, an anonymous account will be created.
  string email = 1  [(options.optional) = true];

  // ID of Ecosystem to sign into.
  string ecosystem_id = 3 [(options.optional) = true];

  reserved 2;
  reserved "invitation_code";
}

// Response to `LoginRequest`
message LoginResponse{
  oneof response {
    // Random byte sequence unique to this login request.
    // If present, two-factor confirmation of login is required.
    // Must be sent back, unaltered, in `LoginConfirm`.
    bytes challenge = 1;

    // Account profile response. If present, no confirmation of login is required.
    AccountProfile profile = 2;
  }
}

// Request to finalize login flow
message LoginConfirmRequest {
  // Challenge received from `Login`
  bytes challenge = 1;

  // Two-factor confirmation code sent to account email or phone,
  // hashed using Blake3. Our SDKs will handle this hashing process for you.
  bytes confirmation_code_hashed = 2;
}

// Response to `LoginConfirmRequest`
message LoginConfirmResponse {
  // Profile response; must be unprotected using unhashed confirmation code.
  // Our SDKs will handle this process for you, and return to you an authentication token string.
  AccountProfile profile = 1;
}

// Information about authentication tokens for a wallet
message WalletAuthToken {
  // Unique identifier for the token.
  // This field will match the `DeviceId` in the WalletAuthData
  string id = 1;
  // Device name/description
  optional string description = 2;
  // Date when the token was created in ISO 8601 format
  string date_created = 3;
}

service Account {
  // Sign in to an already existing account
  rpc SignIn              (SignInRequest)             returns (SignInResponse) {
    option deprecated = true;
    option (options.sdk_template_option).ignore = true;
    option (options.sdk_template_option).anonymous = true;
  }

  // Begin login flow for specified account, creating one if it does not already exist
  rpc Login               (LoginRequest)              returns (LoginResponse) {
    option deprecated = true;
    option (options.sdk_template_option).ignore = true;
    option (options.sdk_template_option).anonymous = true;
  }

  // Finalize login flow with two-factor confirmation code
  rpc LoginConfirm        (LoginConfirmRequest)       returns (LoginConfirmResponse) {
    option deprecated = true;
    option (options.sdk_template_option).anonymous = true;
    option (options.sdk_template_option).ignore = true;
  }

  // Get account information
  rpc Info                (AccountInfoRequest)        returns (AccountInfoResponse) {
    option deprecated = true;
    option (options.sdk_template_option).no_arguments = true;
  }
}
