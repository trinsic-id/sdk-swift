syntax = "proto3";
package services.trustregistry.v1;

option csharp_namespace = "Trinsic.Services.TrustRegistry.V1";
option go_package = "services/trustregistry/v1/trustregistry";
option java_package = "trinsic.services.trustregistry.v1";
option java_multiple_files = true;

// Request to register a member as a valid issuer of a specific credential schema.
// Only one of `did_uri`, `wallet_id`, or `email` may be specified.
message RegisterMemberRequest {
  reserved 30;
  reserved "framework_id";
  
  oneof member {
    // DID URI of member to register
    string did_uri = 1;

    // Trinsic Wallet ID of member to register
    string wallet_id = 3;

    // Email address of member to register. Must be associated with an existing Trinsic account.
    string email = 4;
  }

  // URI of credential schema to register member as authorized issuer of
  string schema_uri = 10;

  // Unix Timestamp member is valid from. Member will not be considered valid before this timestamp.
  uint64 valid_from_utc = 11;

  // Unix Timestamp member is valid until. Member will not be considered valid after this timestamp.
  uint64 valid_until_utc = 12;
}

// Response to `RegisterMemberRequest`
message RegisterMemberResponse {}

// Request to unregister a member as a valid issuer of a specific credential schema.
// Only one of `did_uri`, `wallet_id`, or `email` may be specified.
message UnregisterMemberRequest {
  reserved 20;
  reserved "framework_id";
  
  oneof member {
    // DID URI of member to unregister
    string did_uri = 1;

    // Trinsic Wallet ID of member to unregister
    string wallet_id = 3;

    // Email address of member to unregister. Must be associated with an existing Trinsic account.
    string email = 4;
  }

  // URI of credential schema to unregister member as authorized issuer of
  string schema_uri = 10;
}

// Response to `UnregisterMemberRequest`
message UnregisterMemberResponse {}

// Request to fetch member status in governance framework for a specific credential schema.
message GetMemberAuthorizationStatusRequest {
  // DID URI of member
  string did_uri = 1;
  // URI of credential schema associated with member
  string schema_uri = 2;
}

// Response to `GetMemberAuthorizationStatusRequest`
message GetMemberAuthorizationStatusResponse {
  // Status of member for given credential schema
  RegistrationStatus status = 1;
}

enum RegistrationStatus {
  CURRENT = 0; // Member is currently authorized, as of the time of the query
  EXPIRED = 1; // Member's authorization has expired
  TERMINATED = 2; // Member has voluntarily ceased Issuer role under the specific EGF
  REVOKED = 3; // Member authority under specific EGF was terminated by the governing authority
  NOT_FOUND = 10; // Member is not associated with given credential schema in the EGF
}

message ListAuthorizedMembersRequest {
  // id of schema that needs to be checked
  optional string schema_uri = 1;

  // Token to fetch next set of results, from previous `ListAuthorizedMembersResponse`
  optional string continuation_token = 2;
}

// Response to `ListAuthorizedMembersRequest`
message ListAuthorizedMembersResponse {
  // JSON string containing array of resultant objects
  repeated AuthorizedMember authorized_members = 1;

  // Whether more data is available to fetch for query
  bool has_more_results = 2;

  // Token to fetch next set of results via `ListAuthorizedMembersRequest`
  string continuation_token = 3;
}

message AuthorizedMember{
  string did = 1;
  repeated AuthorizedMemberSchema authorized_member_schemas = 2;
}

message AuthorizedMemberSchema{
  string schema_uri = 1;
  string status = 2;
  string status_details = 3;
  uint64 valid_from = 4;
  uint64 valid_until = 5;
}

// Request to get a member of the governance framework
message GetMemberRequest {
  oneof member {
    // DID URI of member to get
    string did_uri = 1;

    // Trinsic Wallet ID of member to get
    string wallet_id = 3;

    // Email address of member to get. Must be associated with an existing Trinsic account.
    string email = 4;
  }
}

// Response to `GetMemberAuthorizationStatusRequest`
message GetMemberResponse {
  // Member for given did in given framework
  AuthorizedMember authorized_member = 1;
}

service TrustRegistry {
  // Register an authoritative issuer for a credential schema
  rpc RegisterMember(RegisterMemberRequest) returns (RegisterMemberResponse);

  // Removes an authoritative issuer for a credential schema from the trust registry
  rpc UnregisterMember(UnregisterMemberRequest) returns (UnregisterMemberResponse);

  // Fetch the status of a member for a given credential schema in a trust registry
  rpc GetMemberAuthorizationStatus(GetMemberAuthorizationStatusRequest) returns (GetMemberAuthorizationStatusResponse);

  // Fetch the ecosystem's authorized issuers and the respective templates against which it can issue
  rpc ListAuthorizedMembers(ListAuthorizedMembersRequest) returns (ListAuthorizedMembersResponse);

  // Get member for a given did in a trust registry
  rpc GetMember(GetMemberRequest) returns (GetMemberResponse);
}
