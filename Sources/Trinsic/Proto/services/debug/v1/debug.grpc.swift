//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: services/debug/v1/debug.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `Services_Debug_V1_DebuggingClient`, then call methods of this protocol to make API calls.
public protocol Services_Debug_V1_DebuggingClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Services_Debug_V1_DebuggingClientInterceptorFactoryProtocol? { get }

    func CallEmpty(
        _ request: SwiftProtobuf.Google_Protobuf_Empty,
        callOptions: CallOptions?
    ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

    func CallEmptyAuth(
        _ request: SwiftProtobuf.Google_Protobuf_Empty,
        callOptions: CallOptions?
    ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>
}

public extension Services_Debug_V1_DebuggingClientProtocol {
    var serviceName: String {
        "services.debug.v1.Debugging"
    }

    /// Unary call to CallEmpty
    ///
    /// - Parameters:
    ///   - request: Request to send to CallEmpty.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func CallEmpty(
        _ request: SwiftProtobuf.Google_Protobuf_Empty,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
        makeUnaryCall(
            path: Services_Debug_V1_DebuggingClientMetadata.Methods.CallEmpty.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeCallEmptyInterceptors() ?? []
        )
    }

    /// Unary call to CallEmptyAuth
    ///
    /// - Parameters:
    ///   - request: Request to send to CallEmptyAuth.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func CallEmptyAuth(
        _ request: SwiftProtobuf.Google_Protobuf_Empty,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
        makeUnaryCall(
            path: Services_Debug_V1_DebuggingClientMetadata.Methods.CallEmptyAuth.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeCallEmptyAuthInterceptors() ?? []
        )
    }
}

#if compiler(>=5.6)
    @available(*, deprecated)
    extension Services_Debug_V1_DebuggingClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Services_Debug_V1_DebuggingNIOClient")
public final class Services_Debug_V1_DebuggingClient: Services_Debug_V1_DebuggingClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: Services_Debug_V1_DebuggingClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: Services_Debug_V1_DebuggingClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the services.debug.v1.Debugging service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Debug_V1_DebuggingClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct Services_Debug_V1_DebuggingNIOClient: Services_Debug_V1_DebuggingClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Debug_V1_DebuggingClientInterceptorFactoryProtocol?

    /// Creates a client for the services.debug.v1.Debugging service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Debug_V1_DebuggingClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

#if compiler(>=5.6)
    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public protocol Services_Debug_V1_DebuggingAsyncClientProtocol: GRPCClient {
        static var serviceDescriptor: GRPCServiceDescriptor { get }
        var interceptors: Services_Debug_V1_DebuggingClientInterceptorFactoryProtocol? { get }

        func makeCallEmptyCall(
            _ request: SwiftProtobuf.Google_Protobuf_Empty,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

        func makeCallEmptyAuthCall(
            _ request: SwiftProtobuf.Google_Protobuf_Empty,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public extension Services_Debug_V1_DebuggingAsyncClientProtocol {
        static var serviceDescriptor: GRPCServiceDescriptor {
            Services_Debug_V1_DebuggingClientMetadata.serviceDescriptor
        }

        var interceptors: Services_Debug_V1_DebuggingClientInterceptorFactoryProtocol? {
            nil
        }

        func makeCallEmptyCall(
            _ request: SwiftProtobuf.Google_Protobuf_Empty,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
            makeAsyncUnaryCall(
                path: Services_Debug_V1_DebuggingClientMetadata.Methods.CallEmpty.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeCallEmptyInterceptors() ?? []
            )
        }

        func makeCallEmptyAuthCall(
            _ request: SwiftProtobuf.Google_Protobuf_Empty,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
            makeAsyncUnaryCall(
                path: Services_Debug_V1_DebuggingClientMetadata.Methods.CallEmptyAuth.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeCallEmptyAuthInterceptors() ?? []
            )
        }
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public extension Services_Debug_V1_DebuggingAsyncClientProtocol {
        func CallEmpty(
            _ request: SwiftProtobuf.Google_Protobuf_Empty,
            callOptions: CallOptions? = nil
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
            try await performAsyncUnaryCall(
                path: Services_Debug_V1_DebuggingClientMetadata.Methods.CallEmpty.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeCallEmptyInterceptors() ?? []
            )
        }

        func CallEmptyAuth(
            _ request: SwiftProtobuf.Google_Protobuf_Empty,
            callOptions: CallOptions? = nil
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
            try await performAsyncUnaryCall(
                path: Services_Debug_V1_DebuggingClientMetadata.Methods.CallEmptyAuth.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeCallEmptyAuthInterceptors() ?? []
            )
        }
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public struct Services_Debug_V1_DebuggingAsyncClient: Services_Debug_V1_DebuggingAsyncClientProtocol {
        public var channel: GRPCChannel
        public var defaultCallOptions: CallOptions
        public var interceptors: Services_Debug_V1_DebuggingClientInterceptorFactoryProtocol?

        public init(
            channel: GRPCChannel,
            defaultCallOptions: CallOptions = CallOptions(),
            interceptors: Services_Debug_V1_DebuggingClientInterceptorFactoryProtocol? = nil
        ) {
            self.channel = channel
            self.defaultCallOptions = defaultCallOptions
            self.interceptors = interceptors
        }
    }

#endif // compiler(>=5.6)

public protocol Services_Debug_V1_DebuggingClientInterceptorFactoryProtocol: GRPCSendable {
    /// - Returns: Interceptors to use when invoking 'CallEmpty'.
    func makeCallEmptyInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

    /// - Returns: Interceptors to use when invoking 'CallEmptyAuth'.
    func makeCallEmptyAuthInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum Services_Debug_V1_DebuggingClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Debugging",
        fullName: "services.debug.v1.Debugging",
        methods: [
            Services_Debug_V1_DebuggingClientMetadata.Methods.CallEmpty,
            Services_Debug_V1_DebuggingClientMetadata.Methods.CallEmptyAuth,
        ]
    )

    public enum Methods {
        public static let CallEmpty = GRPCMethodDescriptor(
            name: "CallEmpty",
            path: "/services.debug.v1.Debugging/CallEmpty",
            type: GRPCCallType.unary
        )

        public static let CallEmptyAuth = GRPCMethodDescriptor(
            name: "CallEmptyAuth",
            path: "/services.debug.v1.Debugging/CallEmptyAuth",
            type: GRPCCallType.unary
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Services_Debug_V1_DebuggingProvider: CallHandlerProvider {
    var interceptors: Services_Debug_V1_DebuggingServerInterceptorFactoryProtocol? { get }

    func CallEmpty(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

    func CallEmptyAuth(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

public extension Services_Debug_V1_DebuggingProvider {
    var serviceName: Substring {
        Services_Debug_V1_DebuggingServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "CallEmpty":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
                responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
                interceptors: interceptors?.makeCallEmptyInterceptors() ?? [],
                userFunction: CallEmpty(request:context:)
            )

        case "CallEmptyAuth":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
                responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
                interceptors: interceptors?.makeCallEmptyAuthInterceptors() ?? [],
                userFunction: CallEmptyAuth(request:context:)
            )

        default:
            return nil
        }
    }
}

#if compiler(>=5.6)

    /// To implement a server, implement an object which conforms to this protocol.
    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public protocol Services_Debug_V1_DebuggingAsyncProvider: CallHandlerProvider {
        static var serviceDescriptor: GRPCServiceDescriptor { get }
        var interceptors: Services_Debug_V1_DebuggingServerInterceptorFactoryProtocol? { get }

        @Sendable func CallEmpty(
            request: SwiftProtobuf.Google_Protobuf_Empty,
            context: GRPCAsyncServerCallContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        @Sendable func CallEmptyAuth(
            request: SwiftProtobuf.Google_Protobuf_Empty,
            context: GRPCAsyncServerCallContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public extension Services_Debug_V1_DebuggingAsyncProvider {
        static var serviceDescriptor: GRPCServiceDescriptor {
            Services_Debug_V1_DebuggingServerMetadata.serviceDescriptor
        }

        var serviceName: Substring {
            Services_Debug_V1_DebuggingServerMetadata.serviceDescriptor.fullName[...]
        }

        var interceptors: Services_Debug_V1_DebuggingServerInterceptorFactoryProtocol? {
            nil
        }

        func handle(
            method name: Substring,
            context: CallHandlerContext
        ) -> GRPCServerHandlerProtocol? {
            switch name {
            case "CallEmpty":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
                    responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
                    interceptors: interceptors?.makeCallEmptyInterceptors() ?? [],
                    wrapping: CallEmpty(request:context:)
                )

            case "CallEmptyAuth":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
                    responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
                    interceptors: interceptors?.makeCallEmptyAuthInterceptors() ?? [],
                    wrapping: CallEmptyAuth(request:context:)
                )

            default:
                return nil
            }
        }
    }

#endif // compiler(>=5.6)

public protocol Services_Debug_V1_DebuggingServerInterceptorFactoryProtocol {
    /// - Returns: Interceptors to use when handling 'CallEmpty'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeCallEmptyInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]

    /// - Returns: Interceptors to use when handling 'CallEmptyAuth'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeCallEmptyAuthInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum Services_Debug_V1_DebuggingServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Debugging",
        fullName: "services.debug.v1.Debugging",
        methods: [
            Services_Debug_V1_DebuggingServerMetadata.Methods.CallEmpty,
            Services_Debug_V1_DebuggingServerMetadata.Methods.CallEmptyAuth,
        ]
    )

    public enum Methods {
        public static let CallEmpty = GRPCMethodDescriptor(
            name: "CallEmpty",
            path: "/services.debug.v1.Debugging/CallEmpty",
            type: GRPCCallType.unary
        )

        public static let CallEmptyAuth = GRPCMethodDescriptor(
            name: "CallEmptyAuth",
            path: "/services.debug.v1.Debugging/CallEmptyAuth",
            type: GRPCCallType.unary
        )
    }
}
