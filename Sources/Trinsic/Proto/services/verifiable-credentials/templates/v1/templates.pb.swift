// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/verifiable-credentials/templates/v1/templates.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

/// Valid types for credential fields
public enum Services_Verifiablecredentials_Templates_V1_FieldType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case string // = 0
    case number // = 1
    case bool // = 2
    case datetime // = 4
    case uri // = 5
    case UNRECOGNIZED(Int)

    public init() {
        self = .string
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .string
        case 1: self = .number
        case 2: self = .bool
        case 4: self = .datetime
        case 5: self = .uri
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    public var rawValue: Int {
        switch self {
        case .string: return 0
        case .number: return 1
        case .bool: return 2
        case .datetime: return 4
        case .uri: return 5
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension Services_Verifiablecredentials_Templates_V1_FieldType: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        public static var allCases: [Services_Verifiablecredentials_Templates_V1_FieldType] = [
            .string,
            .number,
            .bool,
            .datetime,
            .uri,
        ]
    }

#endif // swift(>=4.2)

/// Request to fetch a template by ID
public struct Services_Verifiablecredentials_Templates_V1_GetCredentialTemplateRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of template to fetch
    public var id: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `GetCredentialTemplateRequest`
public struct Services_Verifiablecredentials_Templates_V1_GetCredentialTemplateResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Template fetched by ID
    public var template: Services_Verifiablecredentials_Templates_V1_TemplateData {
        get { _template ?? Services_Verifiablecredentials_Templates_V1_TemplateData() }
        set { _template = newValue }
    }

    /// Returns true if `template` has been explicitly set.
    public var hasTemplate: Bool { _template != nil }
    /// Clears the value of `template`. Subsequent reads from it will return its default value.
    public mutating func clearTemplate() { _template = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    private var _template: Services_Verifiablecredentials_Templates_V1_TemplateData?
}

/// Request to search templates using a SQL query
public struct Services_Verifiablecredentials_Templates_V1_SearchCredentialTemplatesRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// SQL query to execute. Example: `SELECT * FROM c WHERE c.name = 'Diploma'`
    public var query: String = .init()

    /// Token provided by previous `SearchCredentialTemplatesResponse`
    /// if more data is available for query
    public var continuationToken: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `SearchCredentialTemplatesRequest`
public struct Services_Verifiablecredentials_Templates_V1_SearchCredentialTemplatesResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Raw JSON data returned from query
    public var itemsJson: String = .init()

    /// Whether more results are available for this query via `continuation_token`
    public var hasMore_p: Bool = false

    /// Token to fetch next set of results via `SearchCredentialTemplatesRequest`
    public var continuationToken: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to list templates using a SQL query
public struct Services_Verifiablecredentials_Templates_V1_ListCredentialTemplatesRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// SQL query to execute. Example: `SELECT * FROM c WHERE c.name = 'Diploma'`
    public var query: String = .init()

    /// Token provided by previous `ListCredentialTemplatesResponse`
    /// if more data is available for query
    public var continuationToken: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `ListCredentialTemplatesRequest`
public struct Services_Verifiablecredentials_Templates_V1_ListCredentialTemplatesResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Templates found by query
    public var templates: [Services_Verifiablecredentials_Templates_V1_TemplateData] = []

    /// Whether more results are available for this query via `continuation_token`
    public var hasMoreResults_p: Bool = false

    /// Token to fetch next set of resuts via `ListCredentialTemplatesRequest`
    public var continuationToken: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to delete a template by ID
public struct Services_Verifiablecredentials_Templates_V1_DeleteCredentialTemplateRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of template to delete
    public var id: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `DeleteCredentialTemplateRequest`
public struct Services_Verifiablecredentials_Templates_V1_DeleteCredentialTemplateResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to create a new template
public struct Services_Verifiablecredentials_Templates_V1_CreateCredentialTemplateRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Name of new template
    public var name: String = .init()

    /// Fields which compose the template
    public var fields: [String: Services_Verifiablecredentials_Templates_V1_TemplateField] = [:]

    /// Whether credentials may be issued against this template which have fields
    /// not specified in `fields`
    public var allowAdditionalFields: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `CreateCredentialTemplateRequest`
public struct Services_Verifiablecredentials_Templates_V1_CreateCredentialTemplateResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Created template
    public var data: Services_Verifiablecredentials_Templates_V1_TemplateData {
        get { _data ?? Services_Verifiablecredentials_Templates_V1_TemplateData() }
        set { _data = newValue }
    }

    /// Returns true if `data` has been explicitly set.
    public var hasData: Bool { _data != nil }
    /// Clears the value of `data`. Subsequent reads from it will return its default value.
    public mutating func clearData() { _data = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _data: Services_Verifiablecredentials_Templates_V1_TemplateData?
}

/// A field defined in a template
public struct Services_Verifiablecredentials_Templates_V1_TemplateField {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Human-readable description of the field
    public var description_p: String = .init()

    /// Whether this field may be omitted when a credential is issued against the template
    public var optional: Bool = false

    /// The type of the field
    public var type: Services_Verifiablecredentials_Templates_V1_FieldType = .string

    /// Annotations for the field that may be used to add additional information
    public var annotations: [String: String] = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Unused
public struct Services_Verifiablecredentials_Templates_V1_GetTemplateRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Unused
public struct Services_Verifiablecredentials_Templates_V1_GetTemplateResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var data: Services_Verifiablecredentials_Templates_V1_TemplateData {
        get { _data ?? Services_Verifiablecredentials_Templates_V1_TemplateData() }
        set { _data = newValue }
    }

    /// Returns true if `data` has been explicitly set.
    public var hasData: Bool { _data != nil }
    /// Clears the value of `data`. Subsequent reads from it will return its default value.
    public mutating func clearData() { _data = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _data: Services_Verifiablecredentials_Templates_V1_TemplateData?
}

/// Unused
public struct Services_Verifiablecredentials_Templates_V1_ListTemplatesRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Unused
public struct Services_Verifiablecredentials_Templates_V1_ListTemplatesResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var templates: [Services_Verifiablecredentials_Templates_V1_TemplateData] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Credential Template
public struct Services_Verifiablecredentials_Templates_V1_TemplateData {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Template ID
    public var id: String = .init()

    /// Template name
    public var name: String = .init()

    /// Template version number
    public var version: Int32 = 0

    /// Fields defined for the template
    public var fields: [String: Services_Verifiablecredentials_Templates_V1_TemplateField] = [:]

    /// Whether credentials issued against this template may
    /// contain fields not defined by template
    public var allowAdditionalFields: Bool = false

    /// URI pointing to template JSON schema document
    public var schemaUri: String = .init()

    /// URI pointing to template JSON-LD context document
    public var contextUri: String = .init()

    /// ID of ecosystem in which template resides
    public var ecosystemID: String = .init()

    /// Template type (`VerifiableCredential`)
    public var type: String = .init()

    /// ID of template creator
    public var createdBy: String = .init()

    /// Date when template was created as ISO 8601 utc string
    public var dateCreated: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension Services_Verifiablecredentials_Templates_V1_FieldType: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_GetCredentialTemplateRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_GetCredentialTemplateResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_SearchCredentialTemplatesRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_SearchCredentialTemplatesResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_ListCredentialTemplatesRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_ListCredentialTemplatesResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_DeleteCredentialTemplateRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_DeleteCredentialTemplateResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_CreateCredentialTemplateRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_CreateCredentialTemplateResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_TemplateField: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_GetTemplateRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_GetTemplateResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_ListTemplatesRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_ListTemplatesResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_Templates_V1_TemplateData: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "services.verifiablecredentials.templates.v1"

extension Services_Verifiablecredentials_Templates_V1_FieldType: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "STRING"),
        1: .same(proto: "NUMBER"),
        2: .same(proto: "BOOL"),
        4: .same(proto: "DATETIME"),
        5: .same(proto: "URI"),
    ]
}

extension Services_Verifiablecredentials_Templates_V1_GetCredentialTemplateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetCredentialTemplateRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &id)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_GetCredentialTemplateRequest, rhs: Services_Verifiablecredentials_Templates_V1_GetCredentialTemplateRequest) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_GetCredentialTemplateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetCredentialTemplateResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "template"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularMessageField(value: &_template)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._template {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_GetCredentialTemplateResponse, rhs: Services_Verifiablecredentials_Templates_V1_GetCredentialTemplateResponse) -> Bool {
        if lhs._template != rhs._template { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_SearchCredentialTemplatesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".SearchCredentialTemplatesRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "query"),
        2: .standard(proto: "continuation_token"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &query)
            case 2: try try decoder.decodeSingularStringField(value: &continuationToken)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !query.isEmpty {
            try visitor.visitSingularStringField(value: query, fieldNumber: 1)
        }
        if !continuationToken.isEmpty {
            try visitor.visitSingularStringField(value: continuationToken, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_SearchCredentialTemplatesRequest, rhs: Services_Verifiablecredentials_Templates_V1_SearchCredentialTemplatesRequest) -> Bool {
        if lhs.query != rhs.query { return false }
        if lhs.continuationToken != rhs.continuationToken { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_SearchCredentialTemplatesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".SearchCredentialTemplatesResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "items_json"),
        2: .standard(proto: "has_more"),
        4: .standard(proto: "continuation_token"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &itemsJson)
            case 2: try try decoder.decodeSingularBoolField(value: &hasMore_p)
            case 4: try try decoder.decodeSingularStringField(value: &continuationToken)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !itemsJson.isEmpty {
            try visitor.visitSingularStringField(value: itemsJson, fieldNumber: 1)
        }
        if hasMore_p != false {
            try visitor.visitSingularBoolField(value: hasMore_p, fieldNumber: 2)
        }
        if !continuationToken.isEmpty {
            try visitor.visitSingularStringField(value: continuationToken, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_SearchCredentialTemplatesResponse, rhs: Services_Verifiablecredentials_Templates_V1_SearchCredentialTemplatesResponse) -> Bool {
        if lhs.itemsJson != rhs.itemsJson { return false }
        if lhs.hasMore_p != rhs.hasMore_p { return false }
        if lhs.continuationToken != rhs.continuationToken { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_ListCredentialTemplatesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ListCredentialTemplatesRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "query"),
        2: .standard(proto: "continuation_token"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &query)
            case 2: try try decoder.decodeSingularStringField(value: &continuationToken)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !query.isEmpty {
            try visitor.visitSingularStringField(value: query, fieldNumber: 1)
        }
        if !continuationToken.isEmpty {
            try visitor.visitSingularStringField(value: continuationToken, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_ListCredentialTemplatesRequest, rhs: Services_Verifiablecredentials_Templates_V1_ListCredentialTemplatesRequest) -> Bool {
        if lhs.query != rhs.query { return false }
        if lhs.continuationToken != rhs.continuationToken { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_ListCredentialTemplatesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ListCredentialTemplatesResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "templates"),
        2: .standard(proto: "has_more_results"),
        3: .standard(proto: "continuation_token"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeRepeatedMessageField(value: &templates)
            case 2: try try decoder.decodeSingularBoolField(value: &hasMoreResults_p)
            case 3: try try decoder.decodeSingularStringField(value: &continuationToken)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !templates.isEmpty {
            try visitor.visitRepeatedMessageField(value: templates, fieldNumber: 1)
        }
        if hasMoreResults_p != false {
            try visitor.visitSingularBoolField(value: hasMoreResults_p, fieldNumber: 2)
        }
        if !continuationToken.isEmpty {
            try visitor.visitSingularStringField(value: continuationToken, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_ListCredentialTemplatesResponse, rhs: Services_Verifiablecredentials_Templates_V1_ListCredentialTemplatesResponse) -> Bool {
        if lhs.templates != rhs.templates { return false }
        if lhs.hasMoreResults_p != rhs.hasMoreResults_p { return false }
        if lhs.continuationToken != rhs.continuationToken { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_DeleteCredentialTemplateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".DeleteCredentialTemplateRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &id)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_DeleteCredentialTemplateRequest, rhs: Services_Verifiablecredentials_Templates_V1_DeleteCredentialTemplateRequest) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_DeleteCredentialTemplateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".DeleteCredentialTemplateResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_DeleteCredentialTemplateResponse, rhs: Services_Verifiablecredentials_Templates_V1_DeleteCredentialTemplateResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_CreateCredentialTemplateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CreateCredentialTemplateRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "name"),
        2: .same(proto: "fields"),
        3: .standard(proto: "allow_additional_fields"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &name)
            case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Services_Verifiablecredentials_Templates_V1_TemplateField>.self, value: &self.fields) }()
            case 3: try try decoder.decodeSingularBoolField(value: &allowAdditionalFields)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 1)
        }
        if !fields.isEmpty {
            try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Services_Verifiablecredentials_Templates_V1_TemplateField>.self, value: fields, fieldNumber: 2)
        }
        if allowAdditionalFields != false {
            try visitor.visitSingularBoolField(value: allowAdditionalFields, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_CreateCredentialTemplateRequest, rhs: Services_Verifiablecredentials_Templates_V1_CreateCredentialTemplateRequest) -> Bool {
        if lhs.name != rhs.name { return false }
        if lhs.fields != rhs.fields { return false }
        if lhs.allowAdditionalFields != rhs.allowAdditionalFields { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_CreateCredentialTemplateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CreateCredentialTemplateResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "data"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularMessageField(value: &_data)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._data {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_CreateCredentialTemplateResponse, rhs: Services_Verifiablecredentials_Templates_V1_CreateCredentialTemplateResponse) -> Bool {
        if lhs._data != rhs._data { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_TemplateField: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".TemplateField"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        2: .same(proto: "description"),
        3: .same(proto: "optional"),
        4: .same(proto: "type"),
        5: .same(proto: "annotations"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 2: try try decoder.decodeSingularStringField(value: &description_p)
            case 3: try try decoder.decodeSingularBoolField(value: &optional)
            case 4: try try decoder.decodeSingularEnumField(value: &type)
            case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString, SwiftProtobuf.ProtobufString>.self, value: &self.annotations) }()
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !description_p.isEmpty {
            try visitor.visitSingularStringField(value: description_p, fieldNumber: 2)
        }
        if optional != false {
            try visitor.visitSingularBoolField(value: optional, fieldNumber: 3)
        }
        if type != .string {
            try visitor.visitSingularEnumField(value: type, fieldNumber: 4)
        }
        if !annotations.isEmpty {
            try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString, SwiftProtobuf.ProtobufString>.self, value: annotations, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_TemplateField, rhs: Services_Verifiablecredentials_Templates_V1_TemplateField) -> Bool {
        if lhs.description_p != rhs.description_p { return false }
        if lhs.optional != rhs.optional { return false }
        if lhs.type != rhs.type { return false }
        if lhs.annotations != rhs.annotations { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_GetTemplateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetTemplateRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &id)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_GetTemplateRequest, rhs: Services_Verifiablecredentials_Templates_V1_GetTemplateRequest) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_GetTemplateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetTemplateResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "data"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularMessageField(value: &_data)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._data {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_GetTemplateResponse, rhs: Services_Verifiablecredentials_Templates_V1_GetTemplateResponse) -> Bool {
        if lhs._data != rhs._data { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_ListTemplatesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ListTemplatesRequest"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_ListTemplatesRequest, rhs: Services_Verifiablecredentials_Templates_V1_ListTemplatesRequest) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_ListTemplatesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ListTemplatesResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "templates"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeRepeatedMessageField(value: &templates)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !templates.isEmpty {
            try visitor.visitRepeatedMessageField(value: templates, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_ListTemplatesResponse, rhs: Services_Verifiablecredentials_Templates_V1_ListTemplatesResponse) -> Bool {
        if lhs.templates != rhs.templates { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_Templates_V1_TemplateData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".TemplateData"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "name"),
        3: .same(proto: "version"),
        4: .same(proto: "fields"),
        5: .standard(proto: "allow_additional_fields"),
        6: .standard(proto: "schema_uri"),
        7: .standard(proto: "context_uri"),
        8: .standard(proto: "ecosystem_id"),
        9: .same(proto: "type"),
        10: .standard(proto: "created_by"),
        11: .standard(proto: "date_created"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &id)
            case 2: try try decoder.decodeSingularStringField(value: &name)
            case 3: try try decoder.decodeSingularInt32Field(value: &version)
            case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Services_Verifiablecredentials_Templates_V1_TemplateField>.self, value: &self.fields) }()
            case 5: try try decoder.decodeSingularBoolField(value: &allowAdditionalFields)
            case 6: try try decoder.decodeSingularStringField(value: &schemaUri)
            case 7: try try decoder.decodeSingularStringField(value: &contextUri)
            case 8: try try decoder.decodeSingularStringField(value: &ecosystemID)
            case 9: try try decoder.decodeSingularStringField(value: &type)
            case 10: try try decoder.decodeSingularStringField(value: &createdBy)
            case 11: try try decoder.decodeSingularStringField(value: &dateCreated)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 2)
        }
        if version != 0 {
            try visitor.visitSingularInt32Field(value: version, fieldNumber: 3)
        }
        if !fields.isEmpty {
            try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Services_Verifiablecredentials_Templates_V1_TemplateField>.self, value: fields, fieldNumber: 4)
        }
        if allowAdditionalFields != false {
            try visitor.visitSingularBoolField(value: allowAdditionalFields, fieldNumber: 5)
        }
        if !schemaUri.isEmpty {
            try visitor.visitSingularStringField(value: schemaUri, fieldNumber: 6)
        }
        if !contextUri.isEmpty {
            try visitor.visitSingularStringField(value: contextUri, fieldNumber: 7)
        }
        if !ecosystemID.isEmpty {
            try visitor.visitSingularStringField(value: ecosystemID, fieldNumber: 8)
        }
        if !type.isEmpty {
            try visitor.visitSingularStringField(value: type, fieldNumber: 9)
        }
        if !createdBy.isEmpty {
            try visitor.visitSingularStringField(value: createdBy, fieldNumber: 10)
        }
        if !dateCreated.isEmpty {
            try visitor.visitSingularStringField(value: dateCreated, fieldNumber: 11)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_Templates_V1_TemplateData, rhs: Services_Verifiablecredentials_Templates_V1_TemplateData) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.name != rhs.name { return false }
        if lhs.version != rhs.version { return false }
        if lhs.fields != rhs.fields { return false }
        if lhs.allowAdditionalFields != rhs.allowAdditionalFields { return false }
        if lhs.schemaUri != rhs.schemaUri { return false }
        if lhs.contextUri != rhs.contextUri { return false }
        if lhs.ecosystemID != rhs.ecosystemID { return false }
        if lhs.type != rhs.type { return false }
        if lhs.createdBy != rhs.createdBy { return false }
        if lhs.dateCreated != rhs.dateCreated { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
