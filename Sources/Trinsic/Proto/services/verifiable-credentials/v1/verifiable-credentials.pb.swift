// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/verifiable-credentials/v1/verifiable-credentials.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

/// Request to sign a JSON-LD Credential using public key tied to caller
public struct Services_Verifiablecredentials_V1_IssueRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Valid JSON-LD Credential document to be signed, in string form
    public var documentJson: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `IssueRequest`
public struct Services_Verifiablecredentials_V1_IssueResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Verifiable Credential document, signed with public key
    /// tied to caller of `IssueRequest`
    public var signedDocumentJson: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to create and sign a JSON-LD Verifiable Credential from a template using public key tied to caller
public struct Services_Verifiablecredentials_V1_IssueFromTemplateRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of template to use
    public var templateID: String = .init()

    /// JSON document string with keys corresponding to the fields of
    /// the template referenced by `template_id`
    public var valuesJson: String = .init()

    /// Governance framework ID to use with issuance of this credential.
    /// If specified, the issued credential will contain extended issuer
    /// metadata with membership info for the given ecosystem governance framework (EGF)
    public var frameworkID: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `IssueFromTemplateRequest`
public struct Services_Verifiablecredentials_V1_IssueFromTemplateResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Verifiable Credential document, in JSON-LD form,
    /// constructed from the specified template and values; signed
    /// with public key tied to caller of `IssueFromTemplateRequest`
    public var documentJson: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to create a proof for a Verifiable Credential using public key tied to caller.
/// Either `item_id` or `document_json` may be provided, not both.
public struct Services_Verifiablecredentials_V1_CreateProofRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A valid JSON-LD frame describing which fields should be
    /// revealed in the generated proof.
    /// If unspecified, all fields in the document will be revealed
    public var revealDocumentJson: String = .init()

    /// Specify the input to be used to derive this proof.
    /// Input can be an existing item in the wallet or an input document
    public var proof: Services_Verifiablecredentials_V1_CreateProofRequest.OneOf_Proof?

    /// ID of wallet item stored in a Trinsic cloud wallet
    public var itemID: String {
        get {
            if case let .itemID(v)? = proof { return v }
            return String()
        }
        set { proof = .itemID(newValue) }
    }

    /// A valid JSON-LD Verifiable Credential document string
    /// with an unbound signature. The proof will be derived from this
    /// document directly. The document will not be stored in the wallet.
    public var documentJson: String {
        get {
            if case let .documentJson(v)? = proof { return v }
            return String()
        }
        set { proof = .documentJson(newValue) }
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Specify the input to be used to derive this proof.
    /// Input can be an existing item in the wallet or an input document
    public enum OneOf_Proof: Equatable {
        /// ID of wallet item stored in a Trinsic cloud wallet
        case itemID(String)
        /// A valid JSON-LD Verifiable Credential document string
        /// with an unbound signature. The proof will be derived from this
        /// document directly. The document will not be stored in the wallet.
        case documentJson(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Verifiablecredentials_V1_CreateProofRequest.OneOf_Proof, rhs: Services_Verifiablecredentials_V1_CreateProofRequest.OneOf_Proof) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.itemID, .itemID): return {
                        guard case let .itemID(l) = lhs, case let .itemID(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.documentJson, .documentJson): return {
                        guard case let .documentJson(l) = lhs, case let .documentJson(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

/// Response to `CreateProofRequest`
public struct Services_Verifiablecredentials_V1_CreateProofResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Valid JSON-LD proof for the specified credential
    public var proofDocumentJson: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to verify a proof
public struct Services_Verifiablecredentials_V1_VerifyProofRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// JSON-LD proof document string to verify
    public var proofDocumentJson: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `VerifyProofRequest`
public struct Services_Verifiablecredentials_V1_VerifyProofResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether or not all validations in `validation_results` passed
    public var isValid: Bool = false

    /// Use `validation_results` instead
    public var validationMessages: [String] = []

    /// Results of each validation check performed,
    /// such as schema conformance, revocation status, signature, etc.
    /// Detailed results are provided for failed validations.
    public var validationResults: [String: Services_Verifiablecredentials_V1_ValidationMessage] = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Result of a validation check on a proof
public struct Services_Verifiablecredentials_V1_ValidationMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether or not this validation check passed
    public var isValid: Bool = false

    /// If validation failed, contains messages explaining why
    public var messages: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to send a document to another user's wallet
public struct Services_Verifiablecredentials_V1_SendRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var deliveryMethod: Services_Verifiablecredentials_V1_SendRequest.OneOf_DeliveryMethod?

    /// Email address of user to send item to
    public var email: String {
        get {
            if case let .email(v)? = deliveryMethod { return v }
            return String()
        }
        set { deliveryMethod = .email(newValue) }
    }

    /// DID of recipient (presently unsupported)
    public var didUri: String {
        get {
            if case let .didUri(v)? = deliveryMethod { return v }
            return String()
        }
        set { deliveryMethod = .didUri(newValue) }
    }

    /// DIDComm out-of-band invitation JSON (presently unsupported)
    public var didcommInvitationJson: String {
        get {
            if case let .didcommInvitationJson(v)? = deliveryMethod { return v }
            return String()
        }
        set { deliveryMethod = .didcommInvitationJson(newValue) }
    }

    /// JSON document to send to recipient
    public var documentJson: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_DeliveryMethod: Equatable {
        /// Email address of user to send item to
        case email(String)
        /// DID of recipient (presently unsupported)
        case didUri(String)
        /// DIDComm out-of-band invitation JSON (presently unsupported)
        case didcommInvitationJson(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Verifiablecredentials_V1_SendRequest.OneOf_DeliveryMethod, rhs: Services_Verifiablecredentials_V1_SendRequest.OneOf_DeliveryMethod) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.email, .email): return {
                        guard case let .email(l) = lhs, case let .email(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.didUri, .didUri): return {
                        guard case let .didUri(l) = lhs, case let .didUri(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.didcommInvitationJson, .didcommInvitationJson): return {
                        guard case let .didcommInvitationJson(l) = lhs, case let .didcommInvitationJson(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

/// Response to `SendRequest`
public struct Services_Verifiablecredentials_V1_SendResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to update a credential's revocation status
public struct Services_Verifiablecredentials_V1_UpdateStatusRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Credential Status ID to update
    public var credentialStatusID: String = .init()

    /// New revocation status of credential
    public var revoked: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `UpdateStatusRequest`
public struct Services_Verifiablecredentials_V1_UpdateStatusResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to check a credential's revocation status
public struct Services_Verifiablecredentials_V1_CheckStatusRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Credential Status ID to check
    public var credentialStatusID: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `CheckStatusRequest`
public struct Services_Verifiablecredentials_V1_CheckStatusResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The credential's revocation status
    public var revoked: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension Services_Verifiablecredentials_V1_IssueRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_IssueResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_IssueFromTemplateRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_IssueFromTemplateResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CreateProofRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CreateProofRequest.OneOf_Proof: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CreateProofResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_VerifyProofRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_VerifyProofResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_ValidationMessage: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_SendRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_SendRequest.OneOf_DeliveryMethod: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_SendResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_UpdateStatusRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_UpdateStatusResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CheckStatusRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CheckStatusResponse: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "services.verifiablecredentials.v1"

extension Services_Verifiablecredentials_V1_IssueRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".IssueRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "document_json"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &documentJson)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !documentJson.isEmpty {
            try visitor.visitSingularStringField(value: documentJson, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_IssueRequest, rhs: Services_Verifiablecredentials_V1_IssueRequest) -> Bool {
        if lhs.documentJson != rhs.documentJson { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_IssueResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".IssueResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "signed_document_json"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &signedDocumentJson)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !signedDocumentJson.isEmpty {
            try visitor.visitSingularStringField(value: signedDocumentJson, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_IssueResponse, rhs: Services_Verifiablecredentials_V1_IssueResponse) -> Bool {
        if lhs.signedDocumentJson != rhs.signedDocumentJson { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_IssueFromTemplateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".IssueFromTemplateRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "template_id"),
        2: .standard(proto: "values_json"),
        3: .standard(proto: "framework_id"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &templateID)
            case 2: try try decoder.decodeSingularStringField(value: &valuesJson)
            case 3: try try decoder.decodeSingularStringField(value: &frameworkID)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !templateID.isEmpty {
            try visitor.visitSingularStringField(value: templateID, fieldNumber: 1)
        }
        if !valuesJson.isEmpty {
            try visitor.visitSingularStringField(value: valuesJson, fieldNumber: 2)
        }
        if !frameworkID.isEmpty {
            try visitor.visitSingularStringField(value: frameworkID, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_IssueFromTemplateRequest, rhs: Services_Verifiablecredentials_V1_IssueFromTemplateRequest) -> Bool {
        if lhs.templateID != rhs.templateID { return false }
        if lhs.valuesJson != rhs.valuesJson { return false }
        if lhs.frameworkID != rhs.frameworkID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_IssueFromTemplateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".IssueFromTemplateResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "document_json"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &documentJson)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !documentJson.isEmpty {
            try visitor.visitSingularStringField(value: documentJson, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_IssueFromTemplateResponse, rhs: Services_Verifiablecredentials_V1_IssueFromTemplateResponse) -> Bool {
        if lhs.documentJson != rhs.documentJson { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_CreateProofRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CreateProofRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "reveal_document_json"),
        2: .standard(proto: "item_id"),
        3: .standard(proto: "document_json"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &revealDocumentJson)
            case 2: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.proof != nil { try decoder.handleConflictingOneOf() }
                        self.proof = .itemID(v)
                    }
                }()
            case 3: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.proof != nil { try decoder.handleConflictingOneOf() }
                        self.proof = .documentJson(v)
                    }
                }()
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !revealDocumentJson.isEmpty {
            try visitor.visitSingularStringField(value: revealDocumentJson, fieldNumber: 1)
        }
        switch proof {
        case .itemID?: try {
                guard case let .itemID(v)? = self.proof else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 2)
            }()
        case .documentJson?: try {
                guard case let .documentJson(v)? = self.proof else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 3)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_CreateProofRequest, rhs: Services_Verifiablecredentials_V1_CreateProofRequest) -> Bool {
        if lhs.revealDocumentJson != rhs.revealDocumentJson { return false }
        if lhs.proof != rhs.proof { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_CreateProofResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CreateProofResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "proof_document_json"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &proofDocumentJson)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !proofDocumentJson.isEmpty {
            try visitor.visitSingularStringField(value: proofDocumentJson, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_CreateProofResponse, rhs: Services_Verifiablecredentials_V1_CreateProofResponse) -> Bool {
        if lhs.proofDocumentJson != rhs.proofDocumentJson { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_VerifyProofRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".VerifyProofRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "proof_document_json"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &proofDocumentJson)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !proofDocumentJson.isEmpty {
            try visitor.visitSingularStringField(value: proofDocumentJson, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_VerifyProofRequest, rhs: Services_Verifiablecredentials_V1_VerifyProofRequest) -> Bool {
        if lhs.proofDocumentJson != rhs.proofDocumentJson { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_VerifyProofResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".VerifyProofResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "is_valid"),
        2: .standard(proto: "validation_messages"),
        3: .standard(proto: "validation_results"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularBoolField(value: &isValid)
            case 2: try try decoder.decodeRepeatedStringField(value: &validationMessages)
            case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Services_Verifiablecredentials_V1_ValidationMessage>.self, value: &self.validationResults) }()
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if isValid != false {
            try visitor.visitSingularBoolField(value: isValid, fieldNumber: 1)
        }
        if !validationMessages.isEmpty {
            try visitor.visitRepeatedStringField(value: validationMessages, fieldNumber: 2)
        }
        if !validationResults.isEmpty {
            try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Services_Verifiablecredentials_V1_ValidationMessage>.self, value: validationResults, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_VerifyProofResponse, rhs: Services_Verifiablecredentials_V1_VerifyProofResponse) -> Bool {
        if lhs.isValid != rhs.isValid { return false }
        if lhs.validationMessages != rhs.validationMessages { return false }
        if lhs.validationResults != rhs.validationResults { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_ValidationMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ValidationMessage"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "is_valid"),
        2: .same(proto: "messages"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularBoolField(value: &isValid)
            case 2: try try decoder.decodeRepeatedStringField(value: &messages)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if isValid != false {
            try visitor.visitSingularBoolField(value: isValid, fieldNumber: 1)
        }
        if !messages.isEmpty {
            try visitor.visitRepeatedStringField(value: messages, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_ValidationMessage, rhs: Services_Verifiablecredentials_V1_ValidationMessage) -> Bool {
        if lhs.isValid != rhs.isValid { return false }
        if lhs.messages != rhs.messages { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_SendRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".SendRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "email"),
        2: .standard(proto: "did_uri"),
        3: .standard(proto: "didcomm_invitation_json"),
        100: .standard(proto: "document_json"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.deliveryMethod != nil { try decoder.handleConflictingOneOf() }
                        self.deliveryMethod = .email(v)
                    }
                }()
            case 2: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.deliveryMethod != nil { try decoder.handleConflictingOneOf() }
                        self.deliveryMethod = .didUri(v)
                    }
                }()
            case 3: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.deliveryMethod != nil { try decoder.handleConflictingOneOf() }
                        self.deliveryMethod = .didcommInvitationJson(v)
                    }
                }()
            case 100: try try decoder.decodeSingularStringField(value: &documentJson)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch deliveryMethod {
        case .email?: try {
                guard case let .email(v)? = self.deliveryMethod else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 1)
            }()
        case .didUri?: try {
                guard case let .didUri(v)? = self.deliveryMethod else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 2)
            }()
        case .didcommInvitationJson?: try {
                guard case let .didcommInvitationJson(v)? = self.deliveryMethod else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 3)
            }()
        case nil: break
        }
        if !documentJson.isEmpty {
            try visitor.visitSingularStringField(value: documentJson, fieldNumber: 100)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_SendRequest, rhs: Services_Verifiablecredentials_V1_SendRequest) -> Bool {
        if lhs.deliveryMethod != rhs.deliveryMethod { return false }
        if lhs.documentJson != rhs.documentJson { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_SendResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".SendResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_SendResponse, rhs: Services_Verifiablecredentials_V1_SendResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_UpdateStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".UpdateStatusRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "credential_status_id"),
        2: .same(proto: "revoked"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &credentialStatusID)
            case 2: try try decoder.decodeSingularBoolField(value: &revoked)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !credentialStatusID.isEmpty {
            try visitor.visitSingularStringField(value: credentialStatusID, fieldNumber: 1)
        }
        if revoked != false {
            try visitor.visitSingularBoolField(value: revoked, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_UpdateStatusRequest, rhs: Services_Verifiablecredentials_V1_UpdateStatusRequest) -> Bool {
        if lhs.credentialStatusID != rhs.credentialStatusID { return false }
        if lhs.revoked != rhs.revoked { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_UpdateStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".UpdateStatusResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_UpdateStatusResponse, rhs: Services_Verifiablecredentials_V1_UpdateStatusResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_CheckStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CheckStatusRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "credential_status_id"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &credentialStatusID)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !credentialStatusID.isEmpty {
            try visitor.visitSingularStringField(value: credentialStatusID, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_CheckStatusRequest, rhs: Services_Verifiablecredentials_V1_CheckStatusRequest) -> Bool {
        if lhs.credentialStatusID != rhs.credentialStatusID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_CheckStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CheckStatusResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "revoked"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularBoolField(value: &revoked)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if revoked != false {
            try visitor.visitSingularBoolField(value: revoked, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_CheckStatusResponse, rhs: Services_Verifiablecredentials_V1_CheckStatusResponse) -> Bool {
        if lhs.revoked != rhs.revoked { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
