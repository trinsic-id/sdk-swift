// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/verifiable-credentials/v1/verifiable-credentials.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public enum Services_Verifiablecredentials_V1_SignatureType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The signature type is not specified. The experimental signature type will be used.
    case unspecified // = 0

    /// The signature type uses EdDSA with the Ed25519 curve (NIST compliant).
    /// This type of signature does not support selective disclosure of attributes.
    case standard // = 1

    /// The signature type uses BBS signatures with BLS12-381 curve (experimental).
    /// This type of signature allows for selective disclosure of attributes.
    case experimental // = 2
    case UNRECOGNIZED(Int)

    public init() {
        self = .unspecified
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .standard
        case 2: self = .experimental
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    public var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .standard: return 1
        case .experimental: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension Services_Verifiablecredentials_V1_SignatureType: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        public static let allCases: [Services_Verifiablecredentials_V1_SignatureType] = [
            .unspecified,
            .standard,
            .experimental,
        ]
    }

#endif // swift(>=4.2)

/// Request to create and sign a JSON-LD Verifiable Credential from a template using public key tied to caller
public struct Services_Verifiablecredentials_V1_IssueFromTemplateRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of template to use
    public var templateID: String = .init()

    /// JSON document string with keys corresponding to the fields of
    /// the template referenced by `template_id`
    public var valuesJson: String = .init()

    /// Save a copy of the issued credential to this user's wallet. This copy will only contain
    /// the credential data, but not the secret proof value. Issuers may use this data to
    /// keep track of the details for revocation status.
    public var saveCopy: Bool = false

    /// The ISO8601 expiration UTC date of the credential. This is a reserved field in the VC specification.
    /// If specified, the issued credential will contain an expiration date.
    /// https://www.w3.org/TR/vc-data-model/#expiration
    public var expirationDate: String = .init()

    /// If true, the issued credential will contain an attestation of the issuer's membership in the ecosystem's
    /// Trust Registry.
    public var includeGovernance: Bool = false

    /// The type of signature to use when signing the credential. Defaults to `EXPERIMENTAL`.
    public var signatureType: Services_Verifiablecredentials_V1_SignatureType = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `IssueFromTemplateRequest`
public struct Services_Verifiablecredentials_V1_IssueFromTemplateResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Verifiable Credential document, in JSON-LD form,
    /// constructed from the specified template and values; signed
    /// with public key tied to caller of `IssueFromTemplateRequest`
    public var documentJson: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to create a proof for a Verifiable Credential using public key tied to caller.
/// Either `item_id`, or `document_json` may be provided, not both.
public struct Services_Verifiablecredentials_V1_CreateProofRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Selective disclosure specification. If nothing is provided, the entire proof is returned.
    /// Either a custom JSON-LD frame is provided, or a list of attributes is provided for selective disclosure
    public var disclosure: Services_Verifiablecredentials_V1_CreateProofRequest.OneOf_Disclosure?

    /// A valid JSON-LD frame describing which fields should be
    /// revealed in the generated proof.
    /// If unspecified, all fields in the document will be revealed
    public var revealDocumentJson: String {
        get {
            if case let .revealDocumentJson(v)? = disclosure { return v }
            return String()
        }
        set { disclosure = .revealDocumentJson(newValue) }
    }

    /// Information about what sections of the document to reveal
    public var revealTemplate: Services_Verifiablecredentials_V1_RevealTemplateAttributes {
        get {
            if case let .revealTemplate(v)? = disclosure { return v }
            return Services_Verifiablecredentials_V1_RevealTemplateAttributes()
        }
        set { disclosure = .revealTemplate(newValue) }
    }

    /// Id of verification template with which to construct the JSON-LD proof document
    public var verificationTemplateID: String {
        get {
            if case let .verificationTemplateID(v)? = disclosure { return v }
            return String()
        }
        set { disclosure = .verificationTemplateID(newValue) }
    }

    /// Specify the input to be used to derive this proof.
    /// Input can be an existing item in the wallet or an input document
    public var proof: Services_Verifiablecredentials_V1_CreateProofRequest.OneOf_Proof?

    /// ID of wallet item stored in a Trinsic cloud wallet
    public var itemID: String {
        get {
            if case let .itemID(v)? = proof { return v }
            return String()
        }
        set { proof = .itemID(newValue) }
    }

    /// A valid JSON-LD Verifiable Credential document string
    /// with an unbound signature. The proof will be derived from this
    /// document directly. The document will not be stored in the wallet.
    public var documentJson: String {
        get {
            if case let .documentJson(v)? = proof { return v }
            return String()
        }
        set { proof = .documentJson(newValue) }
    }

    /// Wrap the output in a verifiable presentation.
    /// If the credential used in the proof is bound to the holder DID,
    /// the output will always use a verifiable presentation and this field will be ignored.
    public var useVerifiablePresentation: Bool = false

    /// Nonce value used to derive the proof. If not specified, a random nonce will be generated.
    /// This value may be represented in base64 format in the proof model.
    public var nonce: Data = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Selective disclosure specification. If nothing is provided, the entire proof is returned.
    /// Either a custom JSON-LD frame is provided, or a list of attributes is provided for selective disclosure
    public enum OneOf_Disclosure: Equatable {
        /// A valid JSON-LD frame describing which fields should be
        /// revealed in the generated proof.
        /// If unspecified, all fields in the document will be revealed
        case revealDocumentJson(String)
        /// Information about what sections of the document to reveal
        case revealTemplate(Services_Verifiablecredentials_V1_RevealTemplateAttributes)
        /// Id of verification template with which to construct the JSON-LD proof document
        case verificationTemplateID(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Verifiablecredentials_V1_CreateProofRequest.OneOf_Disclosure, rhs: Services_Verifiablecredentials_V1_CreateProofRequest.OneOf_Disclosure) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.revealDocumentJson, .revealDocumentJson): return {
                        guard case let .revealDocumentJson(l) = lhs, case let .revealDocumentJson(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.revealTemplate, .revealTemplate): return {
                        guard case let .revealTemplate(l) = lhs, case let .revealTemplate(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.verificationTemplateID, .verificationTemplateID): return {
                        guard case let .verificationTemplateID(l) = lhs, case let .verificationTemplateID(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    /// Specify the input to be used to derive this proof.
    /// Input can be an existing item in the wallet or an input document
    public enum OneOf_Proof: Equatable {
        /// ID of wallet item stored in a Trinsic cloud wallet
        case itemID(String)
        /// A valid JSON-LD Verifiable Credential document string
        /// with an unbound signature. The proof will be derived from this
        /// document directly. The document will not be stored in the wallet.
        case documentJson(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Verifiablecredentials_V1_CreateProofRequest.OneOf_Proof, rhs: Services_Verifiablecredentials_V1_CreateProofRequest.OneOf_Proof) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.itemID, .itemID): return {
                        guard case let .itemID(l) = lhs, case let .itemID(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.documentJson, .documentJson): return {
                        guard case let .documentJson(l) = lhs, case let .documentJson(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

public struct Services_Verifiablecredentials_V1_RevealTemplateAttributes {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A list of document attributes to reveal. If unset, all attributes will be returned.
    public var templateAttributes: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `CreateProofRequest`
public struct Services_Verifiablecredentials_V1_CreateProofResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Valid JSON-LD proof for the specified credential
    public var proofDocumentJson: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to verify a proof
public struct Services_Verifiablecredentials_V1_VerifyProofRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// JSON-LD proof document string to verify
    public var proofDocumentJson: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `VerifyProofRequest`
public struct Services_Verifiablecredentials_V1_VerifyProofResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether all validations in `validation_results` passed
    public var isValid: Bool = false

    /// Results of each validation check performed,
    /// such as schema conformance, revocation status, signature, etc.
    /// Detailed results are provided for failed validations.
    public var validationResults: [String: Services_Verifiablecredentials_V1_ValidationMessage] = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Result of a validation check on a proof
public struct Services_Verifiablecredentials_V1_ValidationMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether this validation check passed
    public var isValid: Bool = false

    /// If validation failed, contains messages explaining why
    public var messages: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to send a document to another user's wallet
public struct Services_Verifiablecredentials_V1_SendRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var deliveryMethod: Services_Verifiablecredentials_V1_SendRequest.OneOf_DeliveryMethod?

    /// Email address of user to whom you'll send the item
    public var email: String {
        get {
            if case let .email(v)? = deliveryMethod { return v }
            return String()
        }
        set { deliveryMethod = .email(newValue) }
    }

    /// Wallet ID of the recipient within the ecosystem
    public var walletID: String {
        get {
            if case let .walletID(v)? = deliveryMethod { return v }
            return String()
        }
        set { deliveryMethod = .walletID(newValue) }
    }

    /// DID URI of the recipient
    public var didUri: String {
        get {
            if case let .didUri(v)? = deliveryMethod { return v }
            return String()
        }
        set { deliveryMethod = .didUri(newValue) }
    }

    /// SMS of user to whom you'll send the item
    public var phoneNumber: String {
        get {
            if case let .phoneNumber(v)? = deliveryMethod { return v }
            return String()
        }
        set { deliveryMethod = .phoneNumber(newValue) }
    }

    /// Send email notification that credential has been sent to a wallet
    public var sendNotification: Bool = false

    /// JSON document to send to recipient
    public var documentJson: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_DeliveryMethod: Equatable {
        /// Email address of user to whom you'll send the item
        case email(String)
        /// Wallet ID of the recipient within the ecosystem
        case walletID(String)
        /// DID URI of the recipient
        case didUri(String)
        /// SMS of user to whom you'll send the item
        case phoneNumber(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Verifiablecredentials_V1_SendRequest.OneOf_DeliveryMethod, rhs: Services_Verifiablecredentials_V1_SendRequest.OneOf_DeliveryMethod) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.email, .email): return {
                        guard case let .email(l) = lhs, case let .email(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.walletID, .walletID): return {
                        guard case let .walletID(l) = lhs, case let .walletID(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.didUri, .didUri): return {
                        guard case let .didUri(l) = lhs, case let .didUri(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.phoneNumber, .phoneNumber): return {
                        guard case let .phoneNumber(l) = lhs, case let .phoneNumber(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

/// Response to `SendRequest`
public struct Services_Verifiablecredentials_V1_SendResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to update a credential's revocation status
public struct Services_Verifiablecredentials_V1_UpdateStatusRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Credential Status ID to update. This is not the same as the credential's ID.
    public var credentialStatusID: String = .init()

    /// New revocation status of credential
    public var revoked: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `UpdateStatusRequest`
public struct Services_Verifiablecredentials_V1_UpdateStatusResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to check a credential's revocation status
public struct Services_Verifiablecredentials_V1_CheckStatusRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Credential Status ID to check. This is not the same as the credential's ID.
    public var credentialStatusID: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `CheckStatusRequest`
public struct Services_Verifiablecredentials_V1_CheckStatusResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The credential's revocation status
    public var revoked: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Verifiablecredentials_V1_CreateCredentialOfferRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of template to use
    public var templateID: String = .init()

    /// JSON document string with keys corresponding to the fields of
    /// the template referenced by `template_id`
    public var valuesJson: String = .init()

    /// If true, the credential will be issued with holder binding by specifying
    /// the holder DID in the credential subject
    public var holderBinding: Bool = false

    /// If true, the issued credential will contain an attestation of the issuer's membership in the ecosystem's
    /// Trust Registry.
    public var includeGovernance: Bool = false

    /// If true, a short URL link will be generated that can be used to share the credential offer with the holder.
    /// This link will point to the credential offer in the wallet app.
    public var generateShareURL: Bool = false

    /// The type of signature to use when signing the credential. Defaults to `EXPERIMENTAL`.
    public var signatureType: Services_Verifiablecredentials_V1_SignatureType = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Verifiablecredentials_V1_CreateCredentialOfferResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The JSON document that contains the credential offer
    public var documentJson: String = .init()

    /// If requested, a URL that can be used to share the credential offer with the holder.
    /// This is a short URL that can be used in a QR code and will redirect the
    /// holder to the credential offer using the wallet app.
    public var shareURL: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Verifiablecredentials_V1_AcceptCredentialRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var offer: Services_Verifiablecredentials_V1_AcceptCredentialRequest.OneOf_Offer?

    /// The JSON document that contains the credential offer
    public var documentJson: String {
        get {
            if case let .documentJson(v)? = offer { return v }
            return String()
        }
        set { offer = .documentJson(newValue) }
    }

    /// The ID of the credential offer (Parameter ID inside the JSON document)
    public var itemID: String {
        get {
            if case let .itemID(v)? = offer { return v }
            return String()
        }
        set { offer = .itemID(newValue) }
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Offer: Equatable {
        /// The JSON document that contains the credential offer
        case documentJson(String)
        /// The ID of the credential offer (Parameter ID inside the JSON document)
        case itemID(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Verifiablecredentials_V1_AcceptCredentialRequest.OneOf_Offer, rhs: Services_Verifiablecredentials_V1_AcceptCredentialRequest.OneOf_Offer) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.documentJson, .documentJson): return {
                        guard case let .documentJson(l) = lhs, case let .documentJson(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.itemID, .itemID): return {
                        guard case let .itemID(l) = lhs, case let .itemID(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

public struct Services_Verifiablecredentials_V1_AcceptCredentialResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The ID of the item in the wallet that contains the issued credential
    public var itemID: String = .init()

    /// The JSON document that contains the issued credential.
    /// This item is already stored in the wallet.
    public var documentJson: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Verifiablecredentials_V1_RejectCredentialRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var offer: Services_Verifiablecredentials_V1_RejectCredentialRequest.OneOf_Offer?

    /// The JSON document that contains the credential offer
    public var documentJson: String {
        get {
            if case let .documentJson(v)? = offer { return v }
            return String()
        }
        set { offer = .documentJson(newValue) }
    }

    /// The ID of the credential offer (Parameter ID inside the JSON document)
    public var itemID: String {
        get {
            if case let .itemID(v)? = offer { return v }
            return String()
        }
        set { offer = .itemID(newValue) }
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Offer: Equatable {
        /// The JSON document that contains the credential offer
        case documentJson(String)
        /// The ID of the credential offer (Parameter ID inside the JSON document)
        case itemID(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Verifiablecredentials_V1_RejectCredentialRequest.OneOf_Offer, rhs: Services_Verifiablecredentials_V1_RejectCredentialRequest.OneOf_Offer) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.documentJson, .documentJson): return {
                        guard case let .documentJson(l) = lhs, case let .documentJson(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.itemID, .itemID): return {
                        guard case let .itemID(l) = lhs, case let .itemID(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

public struct Services_Verifiablecredentials_V1_RejectCredentialResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension Services_Verifiablecredentials_V1_SignatureType: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_IssueFromTemplateRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_IssueFromTemplateResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CreateProofRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CreateProofRequest.OneOf_Disclosure: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CreateProofRequest.OneOf_Proof: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_RevealTemplateAttributes: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CreateProofResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_VerifyProofRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_VerifyProofResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_ValidationMessage: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_SendRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_SendRequest.OneOf_DeliveryMethod: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_SendResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_UpdateStatusRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_UpdateStatusResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CheckStatusRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CheckStatusResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CreateCredentialOfferRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_CreateCredentialOfferResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_AcceptCredentialRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_AcceptCredentialRequest.OneOf_Offer: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_AcceptCredentialResponse: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_RejectCredentialRequest: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_RejectCredentialRequest.OneOf_Offer: @unchecked Sendable {}
    extension Services_Verifiablecredentials_V1_RejectCredentialResponse: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "services.verifiablecredentials.v1"

extension Services_Verifiablecredentials_V1_SignatureType: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "UNSPECIFIED"),
        1: .same(proto: "STANDARD"),
        2: .same(proto: "EXPERIMENTAL"),
    ]
}

extension Services_Verifiablecredentials_V1_IssueFromTemplateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".IssueFromTemplateRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "template_id"),
        2: .standard(proto: "values_json"),
        4: .standard(proto: "save_copy"),
        5: .standard(proto: "expiration_date"),
        6: .standard(proto: "include_governance"),
        7: .standard(proto: "signature_type"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &templateID)
            case 2: try decoder.decodeSingularStringField(value: &valuesJson)
            case 4: try decoder.decodeSingularBoolField(value: &saveCopy)
            case 5: try decoder.decodeSingularStringField(value: &expirationDate)
            case 6: try decoder.decodeSingularBoolField(value: &includeGovernance)
            case 7: try decoder.decodeSingularEnumField(value: &signatureType)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !templateID.isEmpty {
            try visitor.visitSingularStringField(value: templateID, fieldNumber: 1)
        }
        if !valuesJson.isEmpty {
            try visitor.visitSingularStringField(value: valuesJson, fieldNumber: 2)
        }
        if saveCopy != false {
            try visitor.visitSingularBoolField(value: saveCopy, fieldNumber: 4)
        }
        if !expirationDate.isEmpty {
            try visitor.visitSingularStringField(value: expirationDate, fieldNumber: 5)
        }
        if includeGovernance != false {
            try visitor.visitSingularBoolField(value: includeGovernance, fieldNumber: 6)
        }
        if signatureType != .unspecified {
            try visitor.visitSingularEnumField(value: signatureType, fieldNumber: 7)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_IssueFromTemplateRequest, rhs: Services_Verifiablecredentials_V1_IssueFromTemplateRequest) -> Bool {
        if lhs.templateID != rhs.templateID { return false }
        if lhs.valuesJson != rhs.valuesJson { return false }
        if lhs.saveCopy != rhs.saveCopy { return false }
        if lhs.expirationDate != rhs.expirationDate { return false }
        if lhs.includeGovernance != rhs.includeGovernance { return false }
        if lhs.signatureType != rhs.signatureType { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_IssueFromTemplateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".IssueFromTemplateResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "document_json"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &documentJson)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !documentJson.isEmpty {
            try visitor.visitSingularStringField(value: documentJson, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_IssueFromTemplateResponse, rhs: Services_Verifiablecredentials_V1_IssueFromTemplateResponse) -> Bool {
        if lhs.documentJson != rhs.documentJson { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_CreateProofRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CreateProofRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "reveal_document_json"),
        11: .standard(proto: "reveal_template"),
        12: .standard(proto: "verification_template_id"),
        2: .standard(proto: "item_id"),
        3: .standard(proto: "document_json"),
        4: .standard(proto: "use_verifiable_presentation"),
        10: .same(proto: "nonce"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.disclosure != nil { try decoder.handleConflictingOneOf() }
                        self.disclosure = .revealDocumentJson(v)
                    }
                }()
            case 2: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.proof != nil { try decoder.handleConflictingOneOf() }
                        self.proof = .itemID(v)
                    }
                }()
            case 3: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.proof != nil { try decoder.handleConflictingOneOf() }
                        self.proof = .documentJson(v)
                    }
                }()
            case 4: try decoder.decodeSingularBoolField(value: &useVerifiablePresentation)
            case 10: try decoder.decodeSingularBytesField(value: &nonce)
            case 11: try {
                    var v: Services_Verifiablecredentials_V1_RevealTemplateAttributes?
                    var hadOneofValue = false
                    if let current = self.disclosure {
                        hadOneofValue = true
                        if case let .revealTemplate(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.disclosure = .revealTemplate(v)
                    }
                }()
            case 12: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.disclosure != nil { try decoder.handleConflictingOneOf() }
                        self.disclosure = .verificationTemplateID(v)
                    }
                }()
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if case let .revealDocumentJson(v)? = self.disclosure {
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        } }()
        switch proof {
        case .itemID?: try {
                guard case let .itemID(v)? = self.proof else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 2)
            }()
        case .documentJson?: try {
                guard case let .documentJson(v)? = self.proof else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 3)
            }()
        case nil: break
        }
        if useVerifiablePresentation != false {
            try visitor.visitSingularBoolField(value: useVerifiablePresentation, fieldNumber: 4)
        }
        if !nonce.isEmpty {
            try visitor.visitSingularBytesField(value: nonce, fieldNumber: 10)
        }
        switch disclosure {
        case .revealTemplate?: try {
                guard case let .revealTemplate(v)? = self.disclosure else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            }()
        case .verificationTemplateID?: try {
                guard case let .verificationTemplateID(v)? = self.disclosure else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 12)
            }()
        default: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_CreateProofRequest, rhs: Services_Verifiablecredentials_V1_CreateProofRequest) -> Bool {
        if lhs.disclosure != rhs.disclosure { return false }
        if lhs.proof != rhs.proof { return false }
        if lhs.useVerifiablePresentation != rhs.useVerifiablePresentation { return false }
        if lhs.nonce != rhs.nonce { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_RevealTemplateAttributes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".RevealTemplateAttributes"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "template_attributes"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedStringField(value: &templateAttributes)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !templateAttributes.isEmpty {
            try visitor.visitRepeatedStringField(value: templateAttributes, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_RevealTemplateAttributes, rhs: Services_Verifiablecredentials_V1_RevealTemplateAttributes) -> Bool {
        if lhs.templateAttributes != rhs.templateAttributes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_CreateProofResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CreateProofResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "proof_document_json"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &proofDocumentJson)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !proofDocumentJson.isEmpty {
            try visitor.visitSingularStringField(value: proofDocumentJson, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_CreateProofResponse, rhs: Services_Verifiablecredentials_V1_CreateProofResponse) -> Bool {
        if lhs.proofDocumentJson != rhs.proofDocumentJson { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_VerifyProofRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".VerifyProofRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "proof_document_json"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &proofDocumentJson)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !proofDocumentJson.isEmpty {
            try visitor.visitSingularStringField(value: proofDocumentJson, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_VerifyProofRequest, rhs: Services_Verifiablecredentials_V1_VerifyProofRequest) -> Bool {
        if lhs.proofDocumentJson != rhs.proofDocumentJson { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_VerifyProofResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".VerifyProofResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "is_valid"),
        3: .standard(proto: "validation_results"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBoolField(value: &isValid)
            case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Services_Verifiablecredentials_V1_ValidationMessage>.self, value: &validationResults)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if isValid != false {
            try visitor.visitSingularBoolField(value: isValid, fieldNumber: 1)
        }
        if !validationResults.isEmpty {
            try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Services_Verifiablecredentials_V1_ValidationMessage>.self, value: validationResults, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_VerifyProofResponse, rhs: Services_Verifiablecredentials_V1_VerifyProofResponse) -> Bool {
        if lhs.isValid != rhs.isValid { return false }
        if lhs.validationResults != rhs.validationResults { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_ValidationMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ValidationMessage"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "is_valid"),
        2: .same(proto: "messages"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBoolField(value: &isValid)
            case 2: try decoder.decodeRepeatedStringField(value: &messages)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if isValid != false {
            try visitor.visitSingularBoolField(value: isValid, fieldNumber: 1)
        }
        if !messages.isEmpty {
            try visitor.visitRepeatedStringField(value: messages, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_ValidationMessage, rhs: Services_Verifiablecredentials_V1_ValidationMessage) -> Bool {
        if lhs.isValid != rhs.isValid { return false }
        if lhs.messages != rhs.messages { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_SendRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".SendRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "email"),
        5: .standard(proto: "wallet_id"),
        6: .standard(proto: "did_uri"),
        7: .standard(proto: "phone_number"),
        4: .standard(proto: "send_notification"),
        100: .standard(proto: "document_json"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.deliveryMethod != nil { try decoder.handleConflictingOneOf() }
                        self.deliveryMethod = .email(v)
                    }
                }()
            case 4: try decoder.decodeSingularBoolField(value: &sendNotification)
            case 5: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.deliveryMethod != nil { try decoder.handleConflictingOneOf() }
                        self.deliveryMethod = .walletID(v)
                    }
                }()
            case 6: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.deliveryMethod != nil { try decoder.handleConflictingOneOf() }
                        self.deliveryMethod = .didUri(v)
                    }
                }()
            case 7: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.deliveryMethod != nil { try decoder.handleConflictingOneOf() }
                        self.deliveryMethod = .phoneNumber(v)
                    }
                }()
            case 100: try decoder.decodeSingularStringField(value: &documentJson)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if case let .email(v)? = self.deliveryMethod {
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        } }()
        if sendNotification != false {
            try visitor.visitSingularBoolField(value: sendNotification, fieldNumber: 4)
        }
        switch deliveryMethod {
        case .walletID?: try {
                guard case let .walletID(v)? = self.deliveryMethod else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 5)
            }()
        case .didUri?: try {
                guard case let .didUri(v)? = self.deliveryMethod else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 6)
            }()
        case .phoneNumber?: try {
                guard case let .phoneNumber(v)? = self.deliveryMethod else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 7)
            }()
        default: break
        }
        if !documentJson.isEmpty {
            try visitor.visitSingularStringField(value: documentJson, fieldNumber: 100)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_SendRequest, rhs: Services_Verifiablecredentials_V1_SendRequest) -> Bool {
        if lhs.deliveryMethod != rhs.deliveryMethod { return false }
        if lhs.sendNotification != rhs.sendNotification { return false }
        if lhs.documentJson != rhs.documentJson { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_SendResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".SendResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_SendResponse, rhs: Services_Verifiablecredentials_V1_SendResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_UpdateStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".UpdateStatusRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "credential_status_id"),
        2: .same(proto: "revoked"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &credentialStatusID)
            case 2: try decoder.decodeSingularBoolField(value: &revoked)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !credentialStatusID.isEmpty {
            try visitor.visitSingularStringField(value: credentialStatusID, fieldNumber: 1)
        }
        if revoked != false {
            try visitor.visitSingularBoolField(value: revoked, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_UpdateStatusRequest, rhs: Services_Verifiablecredentials_V1_UpdateStatusRequest) -> Bool {
        if lhs.credentialStatusID != rhs.credentialStatusID { return false }
        if lhs.revoked != rhs.revoked { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_UpdateStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".UpdateStatusResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_UpdateStatusResponse, rhs: Services_Verifiablecredentials_V1_UpdateStatusResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_CheckStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CheckStatusRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "credential_status_id"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &credentialStatusID)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !credentialStatusID.isEmpty {
            try visitor.visitSingularStringField(value: credentialStatusID, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_CheckStatusRequest, rhs: Services_Verifiablecredentials_V1_CheckStatusRequest) -> Bool {
        if lhs.credentialStatusID != rhs.credentialStatusID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_CheckStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CheckStatusResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "revoked"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBoolField(value: &revoked)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if revoked != false {
            try visitor.visitSingularBoolField(value: revoked, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_CheckStatusResponse, rhs: Services_Verifiablecredentials_V1_CheckStatusResponse) -> Bool {
        if lhs.revoked != rhs.revoked { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_CreateCredentialOfferRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CreateCredentialOfferRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "template_id"),
        2: .standard(proto: "values_json"),
        3: .standard(proto: "holder_binding"),
        4: .standard(proto: "include_governance"),
        5: .standard(proto: "generate_share_url"),
        7: .standard(proto: "signature_type"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &templateID)
            case 2: try decoder.decodeSingularStringField(value: &valuesJson)
            case 3: try decoder.decodeSingularBoolField(value: &holderBinding)
            case 4: try decoder.decodeSingularBoolField(value: &includeGovernance)
            case 5: try decoder.decodeSingularBoolField(value: &generateShareURL)
            case 7: try decoder.decodeSingularEnumField(value: &signatureType)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !templateID.isEmpty {
            try visitor.visitSingularStringField(value: templateID, fieldNumber: 1)
        }
        if !valuesJson.isEmpty {
            try visitor.visitSingularStringField(value: valuesJson, fieldNumber: 2)
        }
        if holderBinding != false {
            try visitor.visitSingularBoolField(value: holderBinding, fieldNumber: 3)
        }
        if includeGovernance != false {
            try visitor.visitSingularBoolField(value: includeGovernance, fieldNumber: 4)
        }
        if generateShareURL != false {
            try visitor.visitSingularBoolField(value: generateShareURL, fieldNumber: 5)
        }
        if signatureType != .unspecified {
            try visitor.visitSingularEnumField(value: signatureType, fieldNumber: 7)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_CreateCredentialOfferRequest, rhs: Services_Verifiablecredentials_V1_CreateCredentialOfferRequest) -> Bool {
        if lhs.templateID != rhs.templateID { return false }
        if lhs.valuesJson != rhs.valuesJson { return false }
        if lhs.holderBinding != rhs.holderBinding { return false }
        if lhs.includeGovernance != rhs.includeGovernance { return false }
        if lhs.generateShareURL != rhs.generateShareURL { return false }
        if lhs.signatureType != rhs.signatureType { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_CreateCredentialOfferResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".CreateCredentialOfferResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "document_json"),
        2: .standard(proto: "share_url"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &documentJson)
            case 2: try decoder.decodeSingularStringField(value: &shareURL)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !documentJson.isEmpty {
            try visitor.visitSingularStringField(value: documentJson, fieldNumber: 1)
        }
        if !shareURL.isEmpty {
            try visitor.visitSingularStringField(value: shareURL, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_CreateCredentialOfferResponse, rhs: Services_Verifiablecredentials_V1_CreateCredentialOfferResponse) -> Bool {
        if lhs.documentJson != rhs.documentJson { return false }
        if lhs.shareURL != rhs.shareURL { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_AcceptCredentialRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AcceptCredentialRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "document_json"),
        2: .standard(proto: "item_id"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.offer != nil { try decoder.handleConflictingOneOf() }
                        self.offer = .documentJson(v)
                    }
                }()
            case 2: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.offer != nil { try decoder.handleConflictingOneOf() }
                        self.offer = .itemID(v)
                    }
                }()
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch offer {
        case .documentJson?: try {
                guard case let .documentJson(v)? = self.offer else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 1)
            }()
        case .itemID?: try {
                guard case let .itemID(v)? = self.offer else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 2)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_AcceptCredentialRequest, rhs: Services_Verifiablecredentials_V1_AcceptCredentialRequest) -> Bool {
        if lhs.offer != rhs.offer { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_AcceptCredentialResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AcceptCredentialResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "item_id"),
        2: .standard(proto: "document_json"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &itemID)
            case 2: try decoder.decodeSingularStringField(value: &documentJson)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !itemID.isEmpty {
            try visitor.visitSingularStringField(value: itemID, fieldNumber: 1)
        }
        if !documentJson.isEmpty {
            try visitor.visitSingularStringField(value: documentJson, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_AcceptCredentialResponse, rhs: Services_Verifiablecredentials_V1_AcceptCredentialResponse) -> Bool {
        if lhs.itemID != rhs.itemID { return false }
        if lhs.documentJson != rhs.documentJson { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_RejectCredentialRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".RejectCredentialRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "document_json"),
        2: .standard(proto: "item_id"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.offer != nil { try decoder.handleConflictingOneOf() }
                        self.offer = .documentJson(v)
                    }
                }()
            case 2: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.offer != nil { try decoder.handleConflictingOneOf() }
                        self.offer = .itemID(v)
                    }
                }()
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch offer {
        case .documentJson?: try {
                guard case let .documentJson(v)? = self.offer else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 1)
            }()
        case .itemID?: try {
                guard case let .itemID(v)? = self.offer else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 2)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_RejectCredentialRequest, rhs: Services_Verifiablecredentials_V1_RejectCredentialRequest) -> Bool {
        if lhs.offer != rhs.offer { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Verifiablecredentials_V1_RejectCredentialResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".RejectCredentialResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Verifiablecredentials_V1_RejectCredentialResponse, rhs: Services_Verifiablecredentials_V1_RejectCredentialResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
