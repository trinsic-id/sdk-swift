// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/account/v1/account.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

/// Confirmation method type for two-factor workflows
public enum Services_Account_V1_ConfirmationMethod: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// No confirmation required
    case none // = 0

    /// Email confirmation required
    case email // = 1

    /// SMS confirmation required
    case sms // = 2

    /// Confirmation from a connected device is required
    case connectedDevice // = 3

    /// Third-party method of confirmation is required
    case other // = 10
    case UNRECOGNIZED(Int)

    public init() {
        self = .none
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .none
        case 1: self = .email
        case 2: self = .sms
        case 3: self = .connectedDevice
        case 10: self = .other
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    public var rawValue: Int {
        switch self {
        case .none: return 0
        case .email: return 1
        case .sms: return 2
        case .connectedDevice: return 3
        case .other: return 10
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension Services_Account_V1_ConfirmationMethod: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        public static let allCases: [Services_Account_V1_ConfirmationMethod] = [
            .none,
            .email,
            .sms,
            .connectedDevice,
            .other,
        ]
    }

#endif // swift(>=4.2)

/// Account registration details
public struct Services_Account_V1_AccountDetails {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Account name
    public var name: String = .init()

    /// Email address of account.
    public var email: String = .init()

    /// SMS number including country code
    public var sms: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Token protection info
public struct Services_Account_V1_TokenProtection {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Indicates if token is protected using a PIN,
    /// security code, HSM secret, etc.
    public var enabled: Bool = false

    /// The method used to protect the token
    public var method: Services_Account_V1_ConfirmationMethod = .none

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Device profile containing sensitive authentication data.
/// This information should be stored securely
public struct Services_Account_V1_AccountProfile {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The type of profile, used to differentiate between
    /// protocol schemes or versions
    public var profileType: String = .init()

    /// Auth data containg information about the current device access
    public var authData: Data = .init()

    /// Secure token issued by server used to generate zero-knowledge proofs
    public var authToken: Data = .init()

    /// Token security information about the token.
    /// If token protection is enabled, implementations must supply
    /// protection secret before using the token for authentication.
    public var protection: Services_Account_V1_TokenProtection {
        get { _protection ?? Services_Account_V1_TokenProtection() }
        set { _protection = newValue }
    }

    /// Returns true if `protection` has been explicitly set.
    public var hasProtection: Bool { _protection != nil }
    /// Clears the value of `protection`. Subsequent reads from it will return its default value.
    public mutating func clearProtection() { _protection = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    private var _protection: Services_Account_V1_TokenProtection?
}

/// Information about authentication tokens for a wallet
public struct Services_Account_V1_WalletAuthToken {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Unique identifier for the token.
    /// This field will match the `DeviceId` in the WalletAuthData
    public var id: String = .init()

    /// Device name/description
    public var description_p: String {
        get { _description_p ?? String() }
        set { _description_p = newValue }
    }

    /// Returns true if `description_p` has been explicitly set.
    public var hasDescription_p: Bool { _description_p != nil }
    /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
    public mutating func clearDescription_p() { _description_p = nil }

    /// Date when the token was created in ISO 8601 format
    public var dateCreated: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    private var _description_p: String?
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension Services_Account_V1_ConfirmationMethod: @unchecked Sendable {}
    extension Services_Account_V1_AccountDetails: @unchecked Sendable {}
    extension Services_Account_V1_TokenProtection: @unchecked Sendable {}
    extension Services_Account_V1_AccountProfile: @unchecked Sendable {}
    extension Services_Account_V1_WalletAuthToken: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "services.account.v1"

extension Services_Account_V1_ConfirmationMethod: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "None"),
        1: .same(proto: "Email"),
        2: .same(proto: "Sms"),
        3: .same(proto: "ConnectedDevice"),
        10: .same(proto: "Other"),
    ]
}

extension Services_Account_V1_AccountDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AccountDetails"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "name"),
        2: .same(proto: "email"),
        3: .same(proto: "sms"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &name)
            case 2: try decoder.decodeSingularStringField(value: &email)
            case 3: try decoder.decodeSingularStringField(value: &sms)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 1)
        }
        if !email.isEmpty {
            try visitor.visitSingularStringField(value: email, fieldNumber: 2)
        }
        if !sms.isEmpty {
            try visitor.visitSingularStringField(value: sms, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_AccountDetails, rhs: Services_Account_V1_AccountDetails) -> Bool {
        if lhs.name != rhs.name { return false }
        if lhs.email != rhs.email { return false }
        if lhs.sms != rhs.sms { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_TokenProtection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".TokenProtection"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "enabled"),
        2: .same(proto: "method"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBoolField(value: &enabled)
            case 2: try decoder.decodeSingularEnumField(value: &method)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if enabled != false {
            try visitor.visitSingularBoolField(value: enabled, fieldNumber: 1)
        }
        if method != .none {
            try visitor.visitSingularEnumField(value: method, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_TokenProtection, rhs: Services_Account_V1_TokenProtection) -> Bool {
        if lhs.enabled != rhs.enabled { return false }
        if lhs.method != rhs.method { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_AccountProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AccountProfile"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "profile_type"),
        2: .standard(proto: "auth_data"),
        3: .standard(proto: "auth_token"),
        4: .same(proto: "protection"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &profileType)
            case 2: try decoder.decodeSingularBytesField(value: &authData)
            case 3: try decoder.decodeSingularBytesField(value: &authToken)
            case 4: try decoder.decodeSingularMessageField(value: &_protection)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !profileType.isEmpty {
            try visitor.visitSingularStringField(value: profileType, fieldNumber: 1)
        }
        if !authData.isEmpty {
            try visitor.visitSingularBytesField(value: authData, fieldNumber: 2)
        }
        if !authToken.isEmpty {
            try visitor.visitSingularBytesField(value: authToken, fieldNumber: 3)
        }
        try { if let v = self._protection {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_AccountProfile, rhs: Services_Account_V1_AccountProfile) -> Bool {
        if lhs.profileType != rhs.profileType { return false }
        if lhs.authData != rhs.authData { return false }
        if lhs.authToken != rhs.authToken { return false }
        if lhs._protection != rhs._protection { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_WalletAuthToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".WalletAuthToken"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "description"),
        3: .standard(proto: "date_created"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &id)
            case 2: try decoder.decodeSingularStringField(value: &_description_p)
            case 3: try decoder.decodeSingularStringField(value: &dateCreated)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        try { if let v = self._description_p {
            try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        } }()
        if !dateCreated.isEmpty {
            try visitor.visitSingularStringField(value: dateCreated, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_WalletAuthToken, rhs: Services_Account_V1_WalletAuthToken) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs._description_p != rhs._description_p { return false }
        if lhs.dateCreated != rhs.dateCreated { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
