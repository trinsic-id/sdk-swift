// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/account/v1/account.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

/// Confirmation method type for two-factor workflows
public enum Services_Account_V1_ConfirmationMethod: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// No confirmation required
    case none // = 0

    /// Email confirmation required
    case email // = 1

    /// SMS confirmation required
    case sms // = 2

    /// Confirmation from a connected device is required
    case connectedDevice // = 3

    /// Indicates third-party method of confirmation is required
    case other // = 10
    case UNRECOGNIZED(Int)

    public init() {
        self = .none
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .none
        case 1: self = .email
        case 2: self = .sms
        case 3: self = .connectedDevice
        case 10: self = .other
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    public var rawValue: Int {
        switch self {
        case .none: return 0
        case .email: return 1
        case .sms: return 2
        case .connectedDevice: return 3
        case .other: return 10
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension Services_Account_V1_ConfirmationMethod: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        public static var allCases: [Services_Account_V1_ConfirmationMethod] = [
            .none,
            .email,
            .sms,
            .connectedDevice,
            .other,
        ]
    }

#endif // swift(>=4.2)

/// Request for creating or signing into an account
public struct Services_Account_V1_SignInRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Account registration details
    public var details: Services_Account_V1_AccountDetails {
        get { return _details ?? Services_Account_V1_AccountDetails() }
        set { _details = newValue }
    }

    /// Returns true if `details` has been explicitly set.
    public var hasDetails: Bool { return _details != nil }
    /// Clears the value of `details`. Subsequent reads from it will return its default value.
    public mutating func clearDetails() { _details = nil }

    /// Invitation code associated with this registration
    public var invitationCode: String = .init()

    /// ID of Ecosystem to use
    /// Ignored if `invitation_code` is passed
    public var ecosystemID: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _details: Services_Account_V1_AccountDetails?
}

/// Account registration details
public struct Services_Account_V1_AccountDetails {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Account name
    public var name: String = .init()

    /// Email account
    public var email: String = .init()

    /// SMS number including country code
    public var sms: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response for creating new account
/// This object will indicate if a confirmation code
/// was sent to one of the users two-factor methods
/// like email, SMS, etc.
public struct Services_Account_V1_SignInResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Indicates if confirmation of account is required.
    /// This settings is configured globally by the server administrator.
    public var confirmationMethod: Services_Account_V1_ConfirmationMethod = .none

    /// Contains authentication data for use with the current device.
    /// This object must be stored in a secure place. It can also be
    /// protected with a PIN, but this is optional.
    /// See the docs at https://docs.trinsic.id for more information
    /// on working with authentication data.
    public var profile: Services_Account_V1_AccountProfile {
        get { return _profile ?? Services_Account_V1_AccountProfile() }
        set { _profile = newValue }
    }

    /// Returns true if `profile` has been explicitly set.
    public var hasProfile: Bool { return _profile != nil }
    /// Clears the value of `profile`. Subsequent reads from it will return its default value.
    public mutating func clearProfile() { _profile = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _profile: Services_Account_V1_AccountProfile?
}

/// Device profile containing sensitive authentication data.
/// This information should be stored securely
public struct Services_Account_V1_AccountProfile {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The type of profile, used to differentiate between
    /// protocol schemes or versions
    public var profileType: String = .init()

    /// Auth data containg information about the current device access
    public var authData: Data = .init()

    /// Secure token issued by server used to generate zero-knowledge proofs
    public var authToken: Data = .init()

    /// Token security information about the token.
    /// If token protection is enabled, implementations must supply
    /// protection secret before using the token for authentication.
    public var protection: Services_Account_V1_TokenProtection {
        get { return _protection ?? Services_Account_V1_TokenProtection() }
        set { _protection = newValue }
    }

    /// Returns true if `protection` has been explicitly set.
    public var hasProtection: Bool { return _protection != nil }
    /// Clears the value of `protection`. Subsequent reads from it will return its default value.
    public mutating func clearProtection() { _protection = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _protection: Services_Account_V1_TokenProtection?
}

/// Token protection info
public struct Services_Account_V1_TokenProtection {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Indicates if token is protected using a PIN,
    /// security code, HSM secret, etc.
    public var enabled: Bool = false

    /// The method used to protect the token
    public var method: Services_Account_V1_ConfirmationMethod = .none

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request for information about the account used to make the request
public struct Services_Account_V1_AccountInfoRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Information about the account used to make the request
public struct Services_Account_V1_AccountInfoResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The account details associated with
    /// the calling request context
    public var details: Services_Account_V1_AccountDetails {
        get { return _details ?? Services_Account_V1_AccountDetails() }
        set { _details = newValue }
    }

    /// Returns true if `details` has been explicitly set.
    public var hasDetails: Bool { return _details != nil }
    /// Clears the value of `details`. Subsequent reads from it will return its default value.
    public mutating func clearDetails() { _details = nil }

    /// Use `ecosystem_id` instead
    public var ecosystems: [Services_Account_V1_AccountEcosystem] = []

    /// The wallet ID associated with this account
    public var walletID: String = .init()

    /// The device ID associated with this account session
    public var deviceID: String = .init()

    /// The ecosystem ID within which this account resides
    public var ecosystemID: String = .init()

    /// The public DID associated with this account.
    /// This DID is used as "issuer" when signing verifiable credentials
    public var publicDid: String = .init()

    /// Webhook events if any this wallet has authorized
    public var authorizedWebhooks: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _details: Services_Account_V1_AccountDetails?
}

public struct Services_Account_V1_ListDevicesRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Account_V1_ListDevicesResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Account_V1_RevokeDeviceRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Account_V1_RevokeDeviceResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Account_V1_AccountEcosystem {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: String = .init()

    public var name: String = .init()

    public var description_p: String = .init()

    public var uri: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Account_V1_LoginRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Email account to associate with the login request
    public var email: String = .init()

    /// Invitation code associated with this registration
    public var invitationCode: String = .init()

    /// ID of Ecosystem to sign into.
    /// Ignored if `invitation_code` is passed
    public var ecosystemID: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Account_V1_LoginResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var response: Services_Account_V1_LoginResponse.OneOf_Response?

    /// Challenge response. Random byte sequence unique
    /// for this login request
    public var challenge: Data {
        get {
            if case let .challenge(v)? = response { return v }
            return Data()
        }
        set { response = .challenge(newValue) }
    }

    /// Profile response. The login isn't challenged and
    /// the token is returned in this call. Does not require
    /// confirmation step
    public var profile: Services_Account_V1_AccountProfile {
        get {
            if case let .profile(v)? = response { return v }
            return Services_Account_V1_AccountProfile()
        }
        set { response = .profile(newValue) }
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Response: Equatable {
        /// Challenge response. Random byte sequence unique
        /// for this login request
        case challenge(Data)
        /// Profile response. The login isn't challenged and
        /// the token is returned in this call. Does not require
        /// confirmation step
        case profile(Services_Account_V1_AccountProfile)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Account_V1_LoginResponse.OneOf_Response, rhs: Services_Account_V1_LoginResponse.OneOf_Response) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.challenge, .challenge): return {
                        guard case let .challenge(l) = lhs, case let .challenge(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.profile, .profile): return {
                        guard case let .profile(l) = lhs, case let .profile(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

public struct Services_Account_V1_LoginConfirmRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Login challenge received during the Login call
    public var challenge: Data = .init()

    /// Confirmation code received in email or SMS
    /// hashed using Blake3
    public var confirmationCodeHashed: Data = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Account_V1_LoginConfirmResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Profile response. This profile may be protected and
    /// require unblinding/unprotection using the raw hashed code
    public var profile: Services_Account_V1_AccountProfile {
        get { return _profile ?? Services_Account_V1_AccountProfile() }
        set { _profile = newValue }
    }

    /// Returns true if `profile` has been explicitly set.
    public var hasProfile: Bool { return _profile != nil }
    /// Clears the value of `profile`. Subsequent reads from it will return its default value.
    public mutating func clearProfile() { _profile = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _profile: Services_Account_V1_AccountProfile?
}

/// Authorize ecosystem to receive wallet events
public struct Services_Account_V1_AuthorizeWebhookRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Events to authorize access to. Default is "*" (all events)
    public var events: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `AuthorizeWebhookRequest`
public struct Services_Account_V1_AuthorizeWebhookResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension Services_Account_V1_ConfirmationMethod: @unchecked Sendable {}
    extension Services_Account_V1_SignInRequest: @unchecked Sendable {}
    extension Services_Account_V1_AccountDetails: @unchecked Sendable {}
    extension Services_Account_V1_SignInResponse: @unchecked Sendable {}
    extension Services_Account_V1_AccountProfile: @unchecked Sendable {}
    extension Services_Account_V1_TokenProtection: @unchecked Sendable {}
    extension Services_Account_V1_AccountInfoRequest: @unchecked Sendable {}
    extension Services_Account_V1_AccountInfoResponse: @unchecked Sendable {}
    extension Services_Account_V1_ListDevicesRequest: @unchecked Sendable {}
    extension Services_Account_V1_ListDevicesResponse: @unchecked Sendable {}
    extension Services_Account_V1_RevokeDeviceRequest: @unchecked Sendable {}
    extension Services_Account_V1_RevokeDeviceResponse: @unchecked Sendable {}
    extension Services_Account_V1_AccountEcosystem: @unchecked Sendable {}
    extension Services_Account_V1_LoginRequest: @unchecked Sendable {}
    extension Services_Account_V1_LoginResponse: @unchecked Sendable {}
    extension Services_Account_V1_LoginResponse.OneOf_Response: @unchecked Sendable {}
    extension Services_Account_V1_LoginConfirmRequest: @unchecked Sendable {}
    extension Services_Account_V1_LoginConfirmResponse: @unchecked Sendable {}
    extension Services_Account_V1_AuthorizeWebhookRequest: @unchecked Sendable {}
    extension Services_Account_V1_AuthorizeWebhookResponse: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "services.account.v1"

extension Services_Account_V1_ConfirmationMethod: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "None"),
        1: .same(proto: "Email"),
        2: .same(proto: "Sms"),
        3: .same(proto: "ConnectedDevice"),
        10: .same(proto: "Other"),
    ]
}

extension Services_Account_V1_SignInRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".SignInRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "details"),
        2: .standard(proto: "invitation_code"),
        3: .standard(proto: "ecosystem_id"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularMessageField(value: &_details)
            case 2: try try decoder.decodeSingularStringField(value: &invitationCode)
            case 3: try try decoder.decodeSingularStringField(value: &ecosystemID)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._details {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        if !invitationCode.isEmpty {
            try visitor.visitSingularStringField(value: invitationCode, fieldNumber: 2)
        }
        if !ecosystemID.isEmpty {
            try visitor.visitSingularStringField(value: ecosystemID, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_SignInRequest, rhs: Services_Account_V1_SignInRequest) -> Bool {
        if lhs._details != rhs._details { return false }
        if lhs.invitationCode != rhs.invitationCode { return false }
        if lhs.ecosystemID != rhs.ecosystemID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_AccountDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AccountDetails"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "name"),
        2: .same(proto: "email"),
        3: .same(proto: "sms"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &name)
            case 2: try try decoder.decodeSingularStringField(value: &email)
            case 3: try try decoder.decodeSingularStringField(value: &sms)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 1)
        }
        if !email.isEmpty {
            try visitor.visitSingularStringField(value: email, fieldNumber: 2)
        }
        if !sms.isEmpty {
            try visitor.visitSingularStringField(value: sms, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_AccountDetails, rhs: Services_Account_V1_AccountDetails) -> Bool {
        if lhs.name != rhs.name { return false }
        if lhs.email != rhs.email { return false }
        if lhs.sms != rhs.sms { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_SignInResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".SignInResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        3: .standard(proto: "confirmation_method"),
        4: .same(proto: "profile"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 3: try try decoder.decodeSingularEnumField(value: &confirmationMethod)
            case 4: try try decoder.decodeSingularMessageField(value: &_profile)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if confirmationMethod != .none {
            try visitor.visitSingularEnumField(value: confirmationMethod, fieldNumber: 3)
        }
        try { if let v = self._profile {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_SignInResponse, rhs: Services_Account_V1_SignInResponse) -> Bool {
        if lhs.confirmationMethod != rhs.confirmationMethod { return false }
        if lhs._profile != rhs._profile { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_AccountProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AccountProfile"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "profile_type"),
        2: .standard(proto: "auth_data"),
        3: .standard(proto: "auth_token"),
        4: .same(proto: "protection"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &profileType)
            case 2: try try decoder.decodeSingularBytesField(value: &authData)
            case 3: try try decoder.decodeSingularBytesField(value: &authToken)
            case 4: try try decoder.decodeSingularMessageField(value: &_protection)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !profileType.isEmpty {
            try visitor.visitSingularStringField(value: profileType, fieldNumber: 1)
        }
        if !authData.isEmpty {
            try visitor.visitSingularBytesField(value: authData, fieldNumber: 2)
        }
        if !authToken.isEmpty {
            try visitor.visitSingularBytesField(value: authToken, fieldNumber: 3)
        }
        try { if let v = self._protection {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_AccountProfile, rhs: Services_Account_V1_AccountProfile) -> Bool {
        if lhs.profileType != rhs.profileType { return false }
        if lhs.authData != rhs.authData { return false }
        if lhs.authToken != rhs.authToken { return false }
        if lhs._protection != rhs._protection { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_TokenProtection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".TokenProtection"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "enabled"),
        2: .same(proto: "method"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularBoolField(value: &enabled)
            case 2: try try decoder.decodeSingularEnumField(value: &method)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if enabled != false {
            try visitor.visitSingularBoolField(value: enabled, fieldNumber: 1)
        }
        if method != .none {
            try visitor.visitSingularEnumField(value: method, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_TokenProtection, rhs: Services_Account_V1_TokenProtection) -> Bool {
        if lhs.enabled != rhs.enabled { return false }
        if lhs.method != rhs.method { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_AccountInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AccountInfoRequest"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_AccountInfoRequest, rhs: Services_Account_V1_AccountInfoRequest) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_AccountInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AccountInfoResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "details"),
        2: .same(proto: "ecosystems"),
        3: .standard(proto: "wallet_id"),
        4: .standard(proto: "device_id"),
        5: .standard(proto: "ecosystem_id"),
        6: .standard(proto: "public_did"),
        7: .standard(proto: "authorized_webhooks"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularMessageField(value: &_details)
            case 2: try try decoder.decodeRepeatedMessageField(value: &ecosystems)
            case 3: try try decoder.decodeSingularStringField(value: &walletID)
            case 4: try try decoder.decodeSingularStringField(value: &deviceID)
            case 5: try try decoder.decodeSingularStringField(value: &ecosystemID)
            case 6: try try decoder.decodeSingularStringField(value: &publicDid)
            case 7: try try decoder.decodeRepeatedStringField(value: &authorizedWebhooks)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._details {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        if !ecosystems.isEmpty {
            try visitor.visitRepeatedMessageField(value: ecosystems, fieldNumber: 2)
        }
        if !walletID.isEmpty {
            try visitor.visitSingularStringField(value: walletID, fieldNumber: 3)
        }
        if !deviceID.isEmpty {
            try visitor.visitSingularStringField(value: deviceID, fieldNumber: 4)
        }
        if !ecosystemID.isEmpty {
            try visitor.visitSingularStringField(value: ecosystemID, fieldNumber: 5)
        }
        if !publicDid.isEmpty {
            try visitor.visitSingularStringField(value: publicDid, fieldNumber: 6)
        }
        if !authorizedWebhooks.isEmpty {
            try visitor.visitRepeatedStringField(value: authorizedWebhooks, fieldNumber: 7)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_AccountInfoResponse, rhs: Services_Account_V1_AccountInfoResponse) -> Bool {
        if lhs._details != rhs._details { return false }
        if lhs.ecosystems != rhs.ecosystems { return false }
        if lhs.walletID != rhs.walletID { return false }
        if lhs.deviceID != rhs.deviceID { return false }
        if lhs.ecosystemID != rhs.ecosystemID { return false }
        if lhs.publicDid != rhs.publicDid { return false }
        if lhs.authorizedWebhooks != rhs.authorizedWebhooks { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_ListDevicesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ListDevicesRequest"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_ListDevicesRequest, rhs: Services_Account_V1_ListDevicesRequest) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_ListDevicesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ListDevicesResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_ListDevicesResponse, rhs: Services_Account_V1_ListDevicesResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_RevokeDeviceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".RevokeDeviceRequest"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_RevokeDeviceRequest, rhs: Services_Account_V1_RevokeDeviceRequest) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_RevokeDeviceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".RevokeDeviceResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_RevokeDeviceResponse, rhs: Services_Account_V1_RevokeDeviceResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_AccountEcosystem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AccountEcosystem"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "name"),
        3: .same(proto: "description"),
        4: .same(proto: "uri"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &id)
            case 2: try try decoder.decodeSingularStringField(value: &name)
            case 3: try try decoder.decodeSingularStringField(value: &description_p)
            case 4: try try decoder.decodeSingularStringField(value: &uri)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 2)
        }
        if !description_p.isEmpty {
            try visitor.visitSingularStringField(value: description_p, fieldNumber: 3)
        }
        if !uri.isEmpty {
            try visitor.visitSingularStringField(value: uri, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_AccountEcosystem, rhs: Services_Account_V1_AccountEcosystem) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.name != rhs.name { return false }
        if lhs.description_p != rhs.description_p { return false }
        if lhs.uri != rhs.uri { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_LoginRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".LoginRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "email"),
        2: .standard(proto: "invitation_code"),
        3: .standard(proto: "ecosystem_id"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularStringField(value: &email)
            case 2: try try decoder.decodeSingularStringField(value: &invitationCode)
            case 3: try try decoder.decodeSingularStringField(value: &ecosystemID)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !email.isEmpty {
            try visitor.visitSingularStringField(value: email, fieldNumber: 1)
        }
        if !invitationCode.isEmpty {
            try visitor.visitSingularStringField(value: invitationCode, fieldNumber: 2)
        }
        if !ecosystemID.isEmpty {
            try visitor.visitSingularStringField(value: ecosystemID, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_LoginRequest, rhs: Services_Account_V1_LoginRequest) -> Bool {
        if lhs.email != rhs.email { return false }
        if lhs.invitationCode != rhs.invitationCode { return false }
        if lhs.ecosystemID != rhs.ecosystemID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_LoginResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".LoginResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "challenge"),
        2: .same(proto: "profile"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: Data?
                    try decoder.decodeSingularBytesField(value: &v)
                    if let v = v {
                        if self.response != nil { try decoder.handleConflictingOneOf() }
                        self.response = .challenge(v)
                    }
                }()
            case 2: try {
                    var v: Services_Account_V1_AccountProfile?
                    var hadOneofValue = false
                    if let current = self.response {
                        hadOneofValue = true
                        if case let .profile(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.response = .profile(v)
                    }
                }()
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch response {
        case .challenge?: try {
                guard case let .challenge(v)? = self.response else { preconditionFailure() }
                try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
            }()
        case .profile?: try {
                guard case let .profile(v)? = self.response else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_LoginResponse, rhs: Services_Account_V1_LoginResponse) -> Bool {
        if lhs.response != rhs.response { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_LoginConfirmRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".LoginConfirmRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "challenge"),
        2: .standard(proto: "confirmation_code_hashed"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularBytesField(value: &challenge)
            case 2: try try decoder.decodeSingularBytesField(value: &confirmationCodeHashed)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !challenge.isEmpty {
            try visitor.visitSingularBytesField(value: challenge, fieldNumber: 1)
        }
        if !confirmationCodeHashed.isEmpty {
            try visitor.visitSingularBytesField(value: confirmationCodeHashed, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_LoginConfirmRequest, rhs: Services_Account_V1_LoginConfirmRequest) -> Bool {
        if lhs.challenge != rhs.challenge { return false }
        if lhs.confirmationCodeHashed != rhs.confirmationCodeHashed { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_LoginConfirmResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".LoginConfirmResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "profile"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeSingularMessageField(value: &_profile)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._profile {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_LoginConfirmResponse, rhs: Services_Account_V1_LoginConfirmResponse) -> Bool {
        if lhs._profile != rhs._profile { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_AuthorizeWebhookRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AuthorizeWebhookRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "events"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try try decoder.decodeRepeatedStringField(value: &events)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !events.isEmpty {
            try visitor.visitRepeatedStringField(value: events, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_AuthorizeWebhookRequest, rhs: Services_Account_V1_AuthorizeWebhookRequest) -> Bool {
        if lhs.events != rhs.events { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Account_V1_AuthorizeWebhookResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AuthorizeWebhookResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Account_V1_AuthorizeWebhookResponse, rhs: Services_Account_V1_AuthorizeWebhookResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
