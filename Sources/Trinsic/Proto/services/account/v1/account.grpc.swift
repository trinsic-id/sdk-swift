//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: services/account/v1/account.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `Services_Account_V1_AccountClient`, then call methods of this protocol to make API calls.
public protocol Services_Account_V1_AccountClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol? { get }

    func SignIn(
        _ request: Services_Account_V1_SignInRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Account_V1_SignInRequest, Services_Account_V1_SignInResponse>

    func Login(
        _ request: Services_Account_V1_LoginRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Account_V1_LoginRequest, Services_Account_V1_LoginResponse>

    func LoginConfirm(
        _ request: Services_Account_V1_LoginConfirmRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Account_V1_LoginConfirmRequest, Services_Account_V1_LoginConfirmResponse>

    func Info(
        _ request: Services_Account_V1_AccountInfoRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Account_V1_AccountInfoRequest, Services_Account_V1_AccountInfoResponse>
}

public extension Services_Account_V1_AccountClientProtocol {
    var serviceName: String {
        "services.account.v1.Account"
    }

    /// Sign in to an already existing account
    ///
    /// - Parameters:
    ///   - request: Request to send to SignIn.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func SignIn(
        _ request: Services_Account_V1_SignInRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Account_V1_SignInRequest, Services_Account_V1_SignInResponse> {
        makeUnaryCall(
            path: Services_Account_V1_AccountClientMetadata.Methods.SignIn.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSignInInterceptors() ?? []
        )
    }

    /// Begin login flow for specified account, creating one if it does not already exist
    ///
    /// - Parameters:
    ///   - request: Request to send to Login.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func Login(
        _ request: Services_Account_V1_LoginRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Account_V1_LoginRequest, Services_Account_V1_LoginResponse> {
        makeUnaryCall(
            path: Services_Account_V1_AccountClientMetadata.Methods.Login.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeLoginInterceptors() ?? []
        )
    }

    /// Finalize login flow with two-factor confirmation code
    ///
    /// - Parameters:
    ///   - request: Request to send to LoginConfirm.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func LoginConfirm(
        _ request: Services_Account_V1_LoginConfirmRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Account_V1_LoginConfirmRequest, Services_Account_V1_LoginConfirmResponse> {
        makeUnaryCall(
            path: Services_Account_V1_AccountClientMetadata.Methods.LoginConfirm.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeLoginConfirmInterceptors() ?? []
        )
    }

    /// Get account information
    ///
    /// - Parameters:
    ///   - request: Request to send to Info.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func Info(
        _ request: Services_Account_V1_AccountInfoRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Account_V1_AccountInfoRequest, Services_Account_V1_AccountInfoResponse> {
        makeUnaryCall(
            path: Services_Account_V1_AccountClientMetadata.Methods.Info.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeInfoInterceptors() ?? []
        )
    }
}

@available(*, deprecated)
extension Services_Account_V1_AccountClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Services_Account_V1_AccountNIOClient")
public final class Services_Account_V1_AccountClient: Services_Account_V1_AccountClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the services.account.v1.Account service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct Services_Account_V1_AccountNIOClient: Services_Account_V1_AccountClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol?

    /// Creates a client for the services.account.v1.Account service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Services_Account_V1_AccountAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol? { get }

    func makeSignInCall(
        _ request: Services_Account_V1_SignInRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Account_V1_SignInRequest, Services_Account_V1_SignInResponse>

    func makeLoginCall(
        _ request: Services_Account_V1_LoginRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Account_V1_LoginRequest, Services_Account_V1_LoginResponse>

    func makeLoginConfirmCall(
        _ request: Services_Account_V1_LoginConfirmRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Account_V1_LoginConfirmRequest, Services_Account_V1_LoginConfirmResponse>

    func makeInfoCall(
        _ request: Services_Account_V1_AccountInfoRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Account_V1_AccountInfoRequest, Services_Account_V1_AccountInfoResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Account_V1_AccountAsyncClientProtocol {
    static var serviceDescriptor: GRPCServiceDescriptor {
        Services_Account_V1_AccountClientMetadata.serviceDescriptor
    }

    var interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol? {
        nil
    }

    func makeSignInCall(
        _ request: Services_Account_V1_SignInRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Account_V1_SignInRequest, Services_Account_V1_SignInResponse> {
        makeAsyncUnaryCall(
            path: Services_Account_V1_AccountClientMetadata.Methods.SignIn.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSignInInterceptors() ?? []
        )
    }

    func makeLoginCall(
        _ request: Services_Account_V1_LoginRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Account_V1_LoginRequest, Services_Account_V1_LoginResponse> {
        makeAsyncUnaryCall(
            path: Services_Account_V1_AccountClientMetadata.Methods.Login.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeLoginInterceptors() ?? []
        )
    }

    func makeLoginConfirmCall(
        _ request: Services_Account_V1_LoginConfirmRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Account_V1_LoginConfirmRequest, Services_Account_V1_LoginConfirmResponse> {
        makeAsyncUnaryCall(
            path: Services_Account_V1_AccountClientMetadata.Methods.LoginConfirm.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeLoginConfirmInterceptors() ?? []
        )
    }

    func makeInfoCall(
        _ request: Services_Account_V1_AccountInfoRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Account_V1_AccountInfoRequest, Services_Account_V1_AccountInfoResponse> {
        makeAsyncUnaryCall(
            path: Services_Account_V1_AccountClientMetadata.Methods.Info.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeInfoInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Account_V1_AccountAsyncClientProtocol {
    func SignIn(
        _ request: Services_Account_V1_SignInRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Account_V1_SignInResponse {
        try await performAsyncUnaryCall(
            path: Services_Account_V1_AccountClientMetadata.Methods.SignIn.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSignInInterceptors() ?? []
        )
    }

    func Login(
        _ request: Services_Account_V1_LoginRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Account_V1_LoginResponse {
        try await performAsyncUnaryCall(
            path: Services_Account_V1_AccountClientMetadata.Methods.Login.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeLoginInterceptors() ?? []
        )
    }

    func LoginConfirm(
        _ request: Services_Account_V1_LoginConfirmRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Account_V1_LoginConfirmResponse {
        try await performAsyncUnaryCall(
            path: Services_Account_V1_AccountClientMetadata.Methods.LoginConfirm.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeLoginConfirmInterceptors() ?? []
        )
    }

    func Info(
        _ request: Services_Account_V1_AccountInfoRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Account_V1_AccountInfoResponse {
        try await performAsyncUnaryCall(
            path: Services_Account_V1_AccountClientMetadata.Methods.Info.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeInfoInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Services_Account_V1_AccountAsyncClient: Services_Account_V1_AccountAsyncClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol?

    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

public protocol Services_Account_V1_AccountClientInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when invoking 'SignIn'.
    func makeSignInInterceptors() -> [ClientInterceptor<Services_Account_V1_SignInRequest, Services_Account_V1_SignInResponse>]

    /// - Returns: Interceptors to use when invoking 'Login'.
    func makeLoginInterceptors() -> [ClientInterceptor<Services_Account_V1_LoginRequest, Services_Account_V1_LoginResponse>]

    /// - Returns: Interceptors to use when invoking 'LoginConfirm'.
    func makeLoginConfirmInterceptors() -> [ClientInterceptor<Services_Account_V1_LoginConfirmRequest, Services_Account_V1_LoginConfirmResponse>]

    /// - Returns: Interceptors to use when invoking 'Info'.
    func makeInfoInterceptors() -> [ClientInterceptor<Services_Account_V1_AccountInfoRequest, Services_Account_V1_AccountInfoResponse>]
}

public enum Services_Account_V1_AccountClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Account",
        fullName: "services.account.v1.Account",
        methods: [
            Services_Account_V1_AccountClientMetadata.Methods.SignIn,
            Services_Account_V1_AccountClientMetadata.Methods.Login,
            Services_Account_V1_AccountClientMetadata.Methods.LoginConfirm,
            Services_Account_V1_AccountClientMetadata.Methods.Info,
        ]
    )

    public enum Methods {
        public static let SignIn = GRPCMethodDescriptor(
            name: "SignIn",
            path: "/services.account.v1.Account/SignIn",
            type: GRPCCallType.unary
        )

        public static let Login = GRPCMethodDescriptor(
            name: "Login",
            path: "/services.account.v1.Account/Login",
            type: GRPCCallType.unary
        )

        public static let LoginConfirm = GRPCMethodDescriptor(
            name: "LoginConfirm",
            path: "/services.account.v1.Account/LoginConfirm",
            type: GRPCCallType.unary
        )

        public static let Info = GRPCMethodDescriptor(
            name: "Info",
            path: "/services.account.v1.Account/Info",
            type: GRPCCallType.unary
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Services_Account_V1_AccountProvider: CallHandlerProvider {
    var interceptors: Services_Account_V1_AccountServerInterceptorFactoryProtocol? { get }

    /// Sign in to an already existing account
    func SignIn(request: Services_Account_V1_SignInRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Account_V1_SignInResponse>

    /// Begin login flow for specified account, creating one if it does not already exist
    func Login(request: Services_Account_V1_LoginRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Account_V1_LoginResponse>

    /// Finalize login flow with two-factor confirmation code
    func LoginConfirm(request: Services_Account_V1_LoginConfirmRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Account_V1_LoginConfirmResponse>

    /// Get account information
    func Info(request: Services_Account_V1_AccountInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Account_V1_AccountInfoResponse>
}

public extension Services_Account_V1_AccountProvider {
    var serviceName: Substring {
        Services_Account_V1_AccountServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "SignIn":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Account_V1_SignInRequest>(),
                responseSerializer: ProtobufSerializer<Services_Account_V1_SignInResponse>(),
                interceptors: interceptors?.makeSignInInterceptors() ?? [],
                userFunction: SignIn(request:context:)
            )

        case "Login":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Account_V1_LoginRequest>(),
                responseSerializer: ProtobufSerializer<Services_Account_V1_LoginResponse>(),
                interceptors: interceptors?.makeLoginInterceptors() ?? [],
                userFunction: Login(request:context:)
            )

        case "LoginConfirm":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Account_V1_LoginConfirmRequest>(),
                responseSerializer: ProtobufSerializer<Services_Account_V1_LoginConfirmResponse>(),
                interceptors: interceptors?.makeLoginConfirmInterceptors() ?? [],
                userFunction: LoginConfirm(request:context:)
            )

        case "Info":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Account_V1_AccountInfoRequest>(),
                responseSerializer: ProtobufSerializer<Services_Account_V1_AccountInfoResponse>(),
                interceptors: interceptors?.makeInfoInterceptors() ?? [],
                userFunction: Info(request:context:)
            )

        default:
            return nil
        }
    }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Services_Account_V1_AccountAsyncProvider: CallHandlerProvider, Sendable {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Services_Account_V1_AccountServerInterceptorFactoryProtocol? { get }

    /// Sign in to an already existing account
    func SignIn(
        request: Services_Account_V1_SignInRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Account_V1_SignInResponse

    /// Begin login flow for specified account, creating one if it does not already exist
    func Login(
        request: Services_Account_V1_LoginRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Account_V1_LoginResponse

    /// Finalize login flow with two-factor confirmation code
    func LoginConfirm(
        request: Services_Account_V1_LoginConfirmRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Account_V1_LoginConfirmResponse

    /// Get account information
    func Info(
        request: Services_Account_V1_AccountInfoRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Account_V1_AccountInfoResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Account_V1_AccountAsyncProvider {
    static var serviceDescriptor: GRPCServiceDescriptor {
        Services_Account_V1_AccountServerMetadata.serviceDescriptor
    }

    var serviceName: Substring {
        Services_Account_V1_AccountServerMetadata.serviceDescriptor.fullName[...]
    }

    var interceptors: Services_Account_V1_AccountServerInterceptorFactoryProtocol? {
        nil
    }

    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "SignIn":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Account_V1_SignInRequest>(),
                responseSerializer: ProtobufSerializer<Services_Account_V1_SignInResponse>(),
                interceptors: interceptors?.makeSignInInterceptors() ?? [],
                wrapping: { try await self.SignIn(request: $0, context: $1) }
            )

        case "Login":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Account_V1_LoginRequest>(),
                responseSerializer: ProtobufSerializer<Services_Account_V1_LoginResponse>(),
                interceptors: interceptors?.makeLoginInterceptors() ?? [],
                wrapping: { try await self.Login(request: $0, context: $1) }
            )

        case "LoginConfirm":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Account_V1_LoginConfirmRequest>(),
                responseSerializer: ProtobufSerializer<Services_Account_V1_LoginConfirmResponse>(),
                interceptors: interceptors?.makeLoginConfirmInterceptors() ?? [],
                wrapping: { try await self.LoginConfirm(request: $0, context: $1) }
            )

        case "Info":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Account_V1_AccountInfoRequest>(),
                responseSerializer: ProtobufSerializer<Services_Account_V1_AccountInfoResponse>(),
                interceptors: interceptors?.makeInfoInterceptors() ?? [],
                wrapping: { try await self.Info(request: $0, context: $1) }
            )

        default:
            return nil
        }
    }
}

public protocol Services_Account_V1_AccountServerInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when handling 'SignIn'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeSignInInterceptors() -> [ServerInterceptor<Services_Account_V1_SignInRequest, Services_Account_V1_SignInResponse>]

    /// - Returns: Interceptors to use when handling 'Login'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeLoginInterceptors() -> [ServerInterceptor<Services_Account_V1_LoginRequest, Services_Account_V1_LoginResponse>]

    /// - Returns: Interceptors to use when handling 'LoginConfirm'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeLoginConfirmInterceptors() -> [ServerInterceptor<Services_Account_V1_LoginConfirmRequest, Services_Account_V1_LoginConfirmResponse>]

    /// - Returns: Interceptors to use when handling 'Info'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeInfoInterceptors() -> [ServerInterceptor<Services_Account_V1_AccountInfoRequest, Services_Account_V1_AccountInfoResponse>]
}

public enum Services_Account_V1_AccountServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Account",
        fullName: "services.account.v1.Account",
        methods: [
            Services_Account_V1_AccountServerMetadata.Methods.SignIn,
            Services_Account_V1_AccountServerMetadata.Methods.Login,
            Services_Account_V1_AccountServerMetadata.Methods.LoginConfirm,
            Services_Account_V1_AccountServerMetadata.Methods.Info,
        ]
    )

    public enum Methods {
        public static let SignIn = GRPCMethodDescriptor(
            name: "SignIn",
            path: "/services.account.v1.Account/SignIn",
            type: GRPCCallType.unary
        )

        public static let Login = GRPCMethodDescriptor(
            name: "Login",
            path: "/services.account.v1.Account/Login",
            type: GRPCCallType.unary
        )

        public static let LoginConfirm = GRPCMethodDescriptor(
            name: "LoginConfirm",
            path: "/services.account.v1.Account/LoginConfirm",
            type: GRPCCallType.unary
        )

        public static let Info = GRPCMethodDescriptor(
            name: "Info",
            path: "/services.account.v1.Account/Info",
            type: GRPCCallType.unary
        )
    }
}
