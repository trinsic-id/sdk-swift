//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: services/provider/v1/provider.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `Services_Provider_V1_ProviderClient`, then call methods of this protocol to make API calls.
public protocol Services_Provider_V1_ProviderClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? { get }

    func CreateEcosystem(
        _ request: Services_Provider_V1_CreateEcosystemRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse>

    func GetOberonKey(
        _ request: Services_Provider_V1_GetOberonKeyRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_GetOberonKeyRequest, Services_Provider_V1_GetOberonKeyResponse>

    func UpgradeDID(
        _ request: Services_Provider_V1_UpgradeDidRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_UpgradeDidRequest, Services_Provider_V1_UpgradeDidResponse>

    func SearchWalletConfigurations(
        _ request: Services_Provider_V1_SearchWalletConfigurationsRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_SearchWalletConfigurationsRequest, Services_Provider_V1_SearchWalletConfigurationResponse>
}

public extension Services_Provider_V1_ProviderClientProtocol {
    var serviceName: String {
        "services.provider.v1.Provider"
    }

    /// Create new ecosystem and assign the authenticated user as owner
    ///
    /// - Parameters:
    ///   - request: Request to send to CreateEcosystem.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func CreateEcosystem(
        _ request: Services_Provider_V1_CreateEcosystemRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.CreateEcosystem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeCreateEcosystemInterceptors() ?? []
        )
    }

    /// Returns the public key being used to create/verify oberon tokens
    ///
    /// - Parameters:
    ///   - request: Request to send to GetOberonKey.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func GetOberonKey(
        _ request: Services_Provider_V1_GetOberonKeyRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_GetOberonKeyRequest, Services_Provider_V1_GetOberonKeyResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.GetOberonKey.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetOberonKeyInterceptors() ?? []
        )
    }

    /// Upgrade a wallet's DID from `did:key` to another method
    ///
    /// - Parameters:
    ///   - request: Request to send to UpgradeDID.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func UpgradeDID(
        _ request: Services_Provider_V1_UpgradeDidRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_UpgradeDidRequest, Services_Provider_V1_UpgradeDidResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.UpgradeDID.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpgradeDIDInterceptors() ?? []
        )
    }

    /// Search for issuers/providers/verifiers in the current ecosystem
    ///
    /// - Parameters:
    ///   - request: Request to send to SearchWalletConfigurations.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func SearchWalletConfigurations(
        _ request: Services_Provider_V1_SearchWalletConfigurationsRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_SearchWalletConfigurationsRequest, Services_Provider_V1_SearchWalletConfigurationResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.SearchWalletConfigurations.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSearchWalletConfigurationsInterceptors() ?? []
        )
    }
}

@available(*, deprecated)
extension Services_Provider_V1_ProviderClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Services_Provider_V1_ProviderNIOClient")
public final class Services_Provider_V1_ProviderClient: Services_Provider_V1_ProviderClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the services.provider.v1.Provider service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct Services_Provider_V1_ProviderNIOClient: Services_Provider_V1_ProviderClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol?

    /// Creates a client for the services.provider.v1.Provider service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Services_Provider_V1_ProviderAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? { get }

    func makeCreateEcosystemCall(
        _ request: Services_Provider_V1_CreateEcosystemRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse>

    func makeGetOberonKeyCall(
        _ request: Services_Provider_V1_GetOberonKeyRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_GetOberonKeyRequest, Services_Provider_V1_GetOberonKeyResponse>

    func makeUpgradeDIDCall(
        _ request: Services_Provider_V1_UpgradeDidRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_UpgradeDidRequest, Services_Provider_V1_UpgradeDidResponse>

    func makeSearchWalletConfigurationsCall(
        _ request: Services_Provider_V1_SearchWalletConfigurationsRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_SearchWalletConfigurationsRequest, Services_Provider_V1_SearchWalletConfigurationResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Provider_V1_ProviderAsyncClientProtocol {
    static var serviceDescriptor: GRPCServiceDescriptor {
        Services_Provider_V1_ProviderClientMetadata.serviceDescriptor
    }

    var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? {
        nil
    }

    func makeCreateEcosystemCall(
        _ request: Services_Provider_V1_CreateEcosystemRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse> {
        makeAsyncUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.CreateEcosystem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeCreateEcosystemInterceptors() ?? []
        )
    }

    func makeGetOberonKeyCall(
        _ request: Services_Provider_V1_GetOberonKeyRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_GetOberonKeyRequest, Services_Provider_V1_GetOberonKeyResponse> {
        makeAsyncUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.GetOberonKey.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetOberonKeyInterceptors() ?? []
        )
    }

    func makeUpgradeDIDCall(
        _ request: Services_Provider_V1_UpgradeDidRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_UpgradeDidRequest, Services_Provider_V1_UpgradeDidResponse> {
        makeAsyncUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.UpgradeDID.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpgradeDIDInterceptors() ?? []
        )
    }

    func makeSearchWalletConfigurationsCall(
        _ request: Services_Provider_V1_SearchWalletConfigurationsRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_SearchWalletConfigurationsRequest, Services_Provider_V1_SearchWalletConfigurationResponse> {
        makeAsyncUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.SearchWalletConfigurations.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSearchWalletConfigurationsInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Provider_V1_ProviderAsyncClientProtocol {
    func CreateEcosystem(
        _ request: Services_Provider_V1_CreateEcosystemRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Provider_V1_CreateEcosystemResponse {
        try await performAsyncUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.CreateEcosystem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeCreateEcosystemInterceptors() ?? []
        )
    }

    func GetOberonKey(
        _ request: Services_Provider_V1_GetOberonKeyRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Provider_V1_GetOberonKeyResponse {
        try await performAsyncUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.GetOberonKey.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetOberonKeyInterceptors() ?? []
        )
    }

    func UpgradeDID(
        _ request: Services_Provider_V1_UpgradeDidRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Provider_V1_UpgradeDidResponse {
        try await performAsyncUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.UpgradeDID.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpgradeDIDInterceptors() ?? []
        )
    }

    func SearchWalletConfigurations(
        _ request: Services_Provider_V1_SearchWalletConfigurationsRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Provider_V1_SearchWalletConfigurationResponse {
        try await performAsyncUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.SearchWalletConfigurations.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSearchWalletConfigurationsInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Services_Provider_V1_ProviderAsyncClient: Services_Provider_V1_ProviderAsyncClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol?

    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

public protocol Services_Provider_V1_ProviderClientInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when invoking 'CreateEcosystem'.
    func makeCreateEcosystemInterceptors() -> [ClientInterceptor<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse>]

    /// - Returns: Interceptors to use when invoking 'GetOberonKey'.
    func makeGetOberonKeyInterceptors() -> [ClientInterceptor<Services_Provider_V1_GetOberonKeyRequest, Services_Provider_V1_GetOberonKeyResponse>]

    /// - Returns: Interceptors to use when invoking 'UpgradeDID'.
    func makeUpgradeDIDInterceptors() -> [ClientInterceptor<Services_Provider_V1_UpgradeDidRequest, Services_Provider_V1_UpgradeDidResponse>]

    /// - Returns: Interceptors to use when invoking 'SearchWalletConfigurations'.
    func makeSearchWalletConfigurationsInterceptors() -> [ClientInterceptor<Services_Provider_V1_SearchWalletConfigurationsRequest, Services_Provider_V1_SearchWalletConfigurationResponse>]
}

public enum Services_Provider_V1_ProviderClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Provider",
        fullName: "services.provider.v1.Provider",
        methods: [
            Services_Provider_V1_ProviderClientMetadata.Methods.CreateEcosystem,
            Services_Provider_V1_ProviderClientMetadata.Methods.GetOberonKey,
            Services_Provider_V1_ProviderClientMetadata.Methods.UpgradeDID,
            Services_Provider_V1_ProviderClientMetadata.Methods.SearchWalletConfigurations,
        ]
    )

    public enum Methods {
        public static let CreateEcosystem = GRPCMethodDescriptor(
            name: "CreateEcosystem",
            path: "/services.provider.v1.Provider/CreateEcosystem",
            type: GRPCCallType.unary
        )

        public static let GetOberonKey = GRPCMethodDescriptor(
            name: "GetOberonKey",
            path: "/services.provider.v1.Provider/GetOberonKey",
            type: GRPCCallType.unary
        )

        public static let UpgradeDID = GRPCMethodDescriptor(
            name: "UpgradeDID",
            path: "/services.provider.v1.Provider/UpgradeDID",
            type: GRPCCallType.unary
        )

        public static let SearchWalletConfigurations = GRPCMethodDescriptor(
            name: "SearchWalletConfigurations",
            path: "/services.provider.v1.Provider/SearchWalletConfigurations",
            type: GRPCCallType.unary
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Services_Provider_V1_ProviderProvider: CallHandlerProvider {
    var interceptors: Services_Provider_V1_ProviderServerInterceptorFactoryProtocol? { get }

    /// Create new ecosystem and assign the authenticated user as owner
    func CreateEcosystem(request: Services_Provider_V1_CreateEcosystemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_CreateEcosystemResponse>

    /// Returns the public key being used to create/verify oberon tokens
    func GetOberonKey(request: Services_Provider_V1_GetOberonKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_GetOberonKeyResponse>

    /// Upgrade a wallet's DID from `did:key` to another method
    func UpgradeDID(request: Services_Provider_V1_UpgradeDidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_UpgradeDidResponse>

    /// Search for issuers/providers/verifiers in the current ecosystem
    func SearchWalletConfigurations(request: Services_Provider_V1_SearchWalletConfigurationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_SearchWalletConfigurationResponse>
}

public extension Services_Provider_V1_ProviderProvider {
    var serviceName: Substring {
        Services_Provider_V1_ProviderServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "CreateEcosystem":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_CreateEcosystemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_CreateEcosystemResponse>(),
                interceptors: interceptors?.makeCreateEcosystemInterceptors() ?? [],
                userFunction: CreateEcosystem(request:context:)
            )

        case "GetOberonKey":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_GetOberonKeyRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_GetOberonKeyResponse>(),
                interceptors: interceptors?.makeGetOberonKeyInterceptors() ?? [],
                userFunction: GetOberonKey(request:context:)
            )

        case "UpgradeDID":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_UpgradeDidRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_UpgradeDidResponse>(),
                interceptors: interceptors?.makeUpgradeDIDInterceptors() ?? [],
                userFunction: UpgradeDID(request:context:)
            )

        case "SearchWalletConfigurations":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_SearchWalletConfigurationsRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_SearchWalletConfigurationResponse>(),
                interceptors: interceptors?.makeSearchWalletConfigurationsInterceptors() ?? [],
                userFunction: SearchWalletConfigurations(request:context:)
            )

        default:
            return nil
        }
    }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Services_Provider_V1_ProviderAsyncProvider: CallHandlerProvider, Sendable {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Services_Provider_V1_ProviderServerInterceptorFactoryProtocol? { get }

    /// Create new ecosystem and assign the authenticated user as owner
    func CreateEcosystem(
        request: Services_Provider_V1_CreateEcosystemRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Provider_V1_CreateEcosystemResponse

    /// Returns the public key being used to create/verify oberon tokens
    func GetOberonKey(
        request: Services_Provider_V1_GetOberonKeyRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Provider_V1_GetOberonKeyResponse

    /// Upgrade a wallet's DID from `did:key` to another method
    func UpgradeDID(
        request: Services_Provider_V1_UpgradeDidRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Provider_V1_UpgradeDidResponse

    /// Search for issuers/providers/verifiers in the current ecosystem
    func SearchWalletConfigurations(
        request: Services_Provider_V1_SearchWalletConfigurationsRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Provider_V1_SearchWalletConfigurationResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Provider_V1_ProviderAsyncProvider {
    static var serviceDescriptor: GRPCServiceDescriptor {
        Services_Provider_V1_ProviderServerMetadata.serviceDescriptor
    }

    var serviceName: Substring {
        Services_Provider_V1_ProviderServerMetadata.serviceDescriptor.fullName[...]
    }

    var interceptors: Services_Provider_V1_ProviderServerInterceptorFactoryProtocol? {
        nil
    }

    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "CreateEcosystem":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_CreateEcosystemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_CreateEcosystemResponse>(),
                interceptors: interceptors?.makeCreateEcosystemInterceptors() ?? [],
                wrapping: { try await self.CreateEcosystem(request: $0, context: $1) }
            )

        case "GetOberonKey":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_GetOberonKeyRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_GetOberonKeyResponse>(),
                interceptors: interceptors?.makeGetOberonKeyInterceptors() ?? [],
                wrapping: { try await self.GetOberonKey(request: $0, context: $1) }
            )

        case "UpgradeDID":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_UpgradeDidRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_UpgradeDidResponse>(),
                interceptors: interceptors?.makeUpgradeDIDInterceptors() ?? [],
                wrapping: { try await self.UpgradeDID(request: $0, context: $1) }
            )

        case "SearchWalletConfigurations":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_SearchWalletConfigurationsRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_SearchWalletConfigurationResponse>(),
                interceptors: interceptors?.makeSearchWalletConfigurationsInterceptors() ?? [],
                wrapping: { try await self.SearchWalletConfigurations(request: $0, context: $1) }
            )

        default:
            return nil
        }
    }
}

public protocol Services_Provider_V1_ProviderServerInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when handling 'CreateEcosystem'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeCreateEcosystemInterceptors() -> [ServerInterceptor<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse>]

    /// - Returns: Interceptors to use when handling 'GetOberonKey'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetOberonKeyInterceptors() -> [ServerInterceptor<Services_Provider_V1_GetOberonKeyRequest, Services_Provider_V1_GetOberonKeyResponse>]

    /// - Returns: Interceptors to use when handling 'UpgradeDID'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeUpgradeDIDInterceptors() -> [ServerInterceptor<Services_Provider_V1_UpgradeDidRequest, Services_Provider_V1_UpgradeDidResponse>]

    /// - Returns: Interceptors to use when handling 'SearchWalletConfigurations'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeSearchWalletConfigurationsInterceptors() -> [ServerInterceptor<Services_Provider_V1_SearchWalletConfigurationsRequest, Services_Provider_V1_SearchWalletConfigurationResponse>]
}

public enum Services_Provider_V1_ProviderServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Provider",
        fullName: "services.provider.v1.Provider",
        methods: [
            Services_Provider_V1_ProviderServerMetadata.Methods.CreateEcosystem,
            Services_Provider_V1_ProviderServerMetadata.Methods.GetOberonKey,
            Services_Provider_V1_ProviderServerMetadata.Methods.UpgradeDID,
            Services_Provider_V1_ProviderServerMetadata.Methods.SearchWalletConfigurations,
        ]
    )

    public enum Methods {
        public static let CreateEcosystem = GRPCMethodDescriptor(
            name: "CreateEcosystem",
            path: "/services.provider.v1.Provider/CreateEcosystem",
            type: GRPCCallType.unary
        )

        public static let GetOberonKey = GRPCMethodDescriptor(
            name: "GetOberonKey",
            path: "/services.provider.v1.Provider/GetOberonKey",
            type: GRPCCallType.unary
        )

        public static let UpgradeDID = GRPCMethodDescriptor(
            name: "UpgradeDID",
            path: "/services.provider.v1.Provider/UpgradeDID",
            type: GRPCCallType.unary
        )

        public static let SearchWalletConfigurations = GRPCMethodDescriptor(
            name: "SearchWalletConfigurations",
            path: "/services.provider.v1.Provider/SearchWalletConfigurations",
            type: GRPCCallType.unary
        )
    }
}
