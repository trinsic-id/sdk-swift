//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: services/provider/v1/provider.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Services_Provider_V1_ProviderClient`, then call methods of this protocol to make API calls.
public protocol Services_Provider_V1_ProviderClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? { get }

  func CreateEcosystem(
    _ request: Services_Provider_V1_CreateEcosystemRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse>

  func GenerateToken(
    _ request: Services_Provider_V1_GenerateTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Services_Provider_V1_GenerateTokenRequest, Services_Provider_V1_GenerateTokenResponse>

  func Invite(
    _ request: Services_Provider_V1_InviteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Services_Provider_V1_InviteRequest, Services_Provider_V1_InviteResponse>

  func InvitationStatus(
    _ request: Services_Provider_V1_InvitationStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Services_Provider_V1_InvitationStatusRequest, Services_Provider_V1_InvitationStatusResponse>
}

extension Services_Provider_V1_ProviderClientProtocol {
  public var serviceName: String {
    return "services.provider.v1.Provider"
  }

  /// Create new ecosystem and assign the authenticated user as owner
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateEcosystem.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func CreateEcosystem(
    _ request: Services_Provider_V1_CreateEcosystemRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse> {
    return self.makeUnaryCall(
      path: "/services.provider.v1.Provider/CreateEcosystem",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateEcosystemInterceptors() ?? []
    )
  }

  /// Generates an unprotected authentication token that can be used to
  /// configure server side applications
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func GenerateToken(
    _ request: Services_Provider_V1_GenerateTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Services_Provider_V1_GenerateTokenRequest, Services_Provider_V1_GenerateTokenResponse> {
    return self.makeUnaryCall(
      path: "/services.provider.v1.Provider/GenerateToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateTokenInterceptors() ?? []
    )
  }

  /// Invite a user to the ecosystem
  ///
  /// - Parameters:
  ///   - request: Request to send to Invite.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func Invite(
    _ request: Services_Provider_V1_InviteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Services_Provider_V1_InviteRequest, Services_Provider_V1_InviteResponse> {
    return self.makeUnaryCall(
      path: "/services.provider.v1.Provider/Invite",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInviteInterceptors() ?? []
    )
  }

  /// Check the invitation status
  ///
  /// - Parameters:
  ///   - request: Request to send to InvitationStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func InvitationStatus(
    _ request: Services_Provider_V1_InvitationStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Services_Provider_V1_InvitationStatusRequest, Services_Provider_V1_InvitationStatusResponse> {
    return self.makeUnaryCall(
      path: "/services.provider.v1.Provider/InvitationStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInvitationStatusInterceptors() ?? []
    )
  }
}

public protocol Services_Provider_V1_ProviderClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'CreateEcosystem'.
  func makeCreateEcosystemInterceptors() -> [ClientInterceptor<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse>]

  /// - Returns: Interceptors to use when invoking 'GenerateToken'.
  func makeGenerateTokenInterceptors() -> [ClientInterceptor<Services_Provider_V1_GenerateTokenRequest, Services_Provider_V1_GenerateTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'Invite'.
  func makeInviteInterceptors() -> [ClientInterceptor<Services_Provider_V1_InviteRequest, Services_Provider_V1_InviteResponse>]

  /// - Returns: Interceptors to use when invoking 'InvitationStatus'.
  func makeInvitationStatusInterceptors() -> [ClientInterceptor<Services_Provider_V1_InvitationStatusRequest, Services_Provider_V1_InvitationStatusResponse>]
}

public final class Services_Provider_V1_ProviderClient: Services_Provider_V1_ProviderClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol?

  /// Creates a client for the services.provider.v1.Provider service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Services_Provider_V1_ProviderProvider: CallHandlerProvider {
  var interceptors: Services_Provider_V1_ProviderServerInterceptorFactoryProtocol? { get }

  /// Create new ecosystem and assign the authenticated user as owner
  func CreateEcosystem(request: Services_Provider_V1_CreateEcosystemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_CreateEcosystemResponse>

  /// Generates an unprotected authentication token that can be used to
  /// configure server side applications
  func GenerateToken(request: Services_Provider_V1_GenerateTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_GenerateTokenResponse>

  /// Invite a user to the ecosystem
  func Invite(request: Services_Provider_V1_InviteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_InviteResponse>

  /// Check the invitation status
  func InvitationStatus(request: Services_Provider_V1_InvitationStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_InvitationStatusResponse>
}

extension Services_Provider_V1_ProviderProvider {
  public var serviceName: Substring { return "services.provider.v1.Provider" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateEcosystem":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Services_Provider_V1_CreateEcosystemRequest>(),
        responseSerializer: ProtobufSerializer<Services_Provider_V1_CreateEcosystemResponse>(),
        interceptors: self.interceptors?.makeCreateEcosystemInterceptors() ?? [],
        userFunction: self.CreateEcosystem(request:context:)
      )

    case "GenerateToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Services_Provider_V1_GenerateTokenRequest>(),
        responseSerializer: ProtobufSerializer<Services_Provider_V1_GenerateTokenResponse>(),
        interceptors: self.interceptors?.makeGenerateTokenInterceptors() ?? [],
        userFunction: self.GenerateToken(request:context:)
      )

    case "Invite":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Services_Provider_V1_InviteRequest>(),
        responseSerializer: ProtobufSerializer<Services_Provider_V1_InviteResponse>(),
        interceptors: self.interceptors?.makeInviteInterceptors() ?? [],
        userFunction: self.Invite(request:context:)
      )

    case "InvitationStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Services_Provider_V1_InvitationStatusRequest>(),
        responseSerializer: ProtobufSerializer<Services_Provider_V1_InvitationStatusResponse>(),
        interceptors: self.interceptors?.makeInvitationStatusInterceptors() ?? [],
        userFunction: self.InvitationStatus(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Services_Provider_V1_ProviderServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'CreateEcosystem'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateEcosystemInterceptors() -> [ServerInterceptor<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse>]

  /// - Returns: Interceptors to use when handling 'GenerateToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenerateTokenInterceptors() -> [ServerInterceptor<Services_Provider_V1_GenerateTokenRequest, Services_Provider_V1_GenerateTokenResponse>]

  /// - Returns: Interceptors to use when handling 'Invite'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInviteInterceptors() -> [ServerInterceptor<Services_Provider_V1_InviteRequest, Services_Provider_V1_InviteResponse>]

  /// - Returns: Interceptors to use when handling 'InvitationStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInvitationStatusInterceptors() -> [ServerInterceptor<Services_Provider_V1_InvitationStatusRequest, Services_Provider_V1_InvitationStatusResponse>]
}
