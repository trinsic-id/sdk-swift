//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: services/provider/v1/provider.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `Services_Provider_V1_ProviderClient`, then call methods of this protocol to make API calls.
public protocol Services_Provider_V1_ProviderClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? { get }

    func CreateEcosystem(
        _ request: Services_Provider_V1_CreateEcosystemRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse>

    func UpdateEcosystem(
        _ request: Services_Provider_V1_UpdateEcosystemRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_UpdateEcosystemRequest, Services_Provider_V1_UpdateEcosystemResponse>

    func AddWebhook(
        _ request: Services_Provider_V1_AddWebhookRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_AddWebhookRequest, Services_Provider_V1_AddWebhookResponse>

    func DeleteWebhook(
        _ request: Services_Provider_V1_DeleteWebhookRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_DeleteWebhookRequest, Services_Provider_V1_DeleteWebhookResponse>

    func EcosystemInfo(
        _ request: Services_Provider_V1_EcosystemInfoRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_EcosystemInfoRequest, Services_Provider_V1_EcosystemInfoResponse>

    func GetPublicEcosystemInfo(
        _ request: Services_Provider_V1_GetPublicEcosystemInfoRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_GetPublicEcosystemInfoRequest, Services_Provider_V1_GetPublicEcosystemInfoResponse>

    func Invite(
        _ request: Services_Provider_V1_InviteRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_InviteRequest, Services_Provider_V1_InviteResponse>

    func InvitationStatus(
        _ request: Services_Provider_V1_InvitationStatusRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_InvitationStatusRequest, Services_Provider_V1_InvitationStatusResponse>

    func GetOberonKey(
        _ request: Services_Provider_V1_GetOberonKeyRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_GetOberonKeyRequest, Services_Provider_V1_GetOberonKeyResponse>

    func UpgradeDID(
        _ request: Services_Provider_V1_UpgradeDidRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_UpgradeDidRequest, Services_Provider_V1_UpgradeDidResponse>

    func RetrieveDomainVerificationRecord(
        _ request: Services_Provider_V1_RetrieveDomainVerificationRecordRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_RetrieveDomainVerificationRecordRequest, Services_Provider_V1_RetrieveDomainVerificationRecordResponse>

    func RefreshDomainVerificationStatus(
        _ request: Services_Provider_V1_RefreshDomainVerificationStatusRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_RefreshDomainVerificationStatusRequest, Services_Provider_V1_RefreshDomainVerificationStatusResponse>

    func SearchWalletConfigurations(
        _ request: Services_Provider_V1_SearchWalletConfigurationsRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_SearchWalletConfigurationsRequest, Services_Provider_V1_SearchWalletConfigurationResponse>
}

public extension Services_Provider_V1_ProviderClientProtocol {
    var serviceName: String {
        "services.provider.v1.Provider"
    }

    /// Create new ecosystem and assign the authenticated user as owner
    ///
    /// - Parameters:
    ///   - request: Request to send to CreateEcosystem.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func CreateEcosystem(
        _ request: Services_Provider_V1_CreateEcosystemRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.CreateEcosystem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeCreateEcosystemInterceptors() ?? []
        )
    }

    /// Update an existing ecosystem
    ///
    /// - Parameters:
    ///   - request: Request to send to UpdateEcosystem.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func UpdateEcosystem(
        _ request: Services_Provider_V1_UpdateEcosystemRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_UpdateEcosystemRequest, Services_Provider_V1_UpdateEcosystemResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.UpdateEcosystem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpdateEcosystemInterceptors() ?? []
        )
    }

    /// Add a webhook endpoint to the ecosystem
    ///
    /// - Parameters:
    ///   - request: Request to send to AddWebhook.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func AddWebhook(
        _ request: Services_Provider_V1_AddWebhookRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_AddWebhookRequest, Services_Provider_V1_AddWebhookResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.AddWebhook.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddWebhookInterceptors() ?? []
        )
    }

    /// Delete a webhook endpoint from the ecosystem
    ///
    /// - Parameters:
    ///   - request: Request to send to DeleteWebhook.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func DeleteWebhook(
        _ request: Services_Provider_V1_DeleteWebhookRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_DeleteWebhookRequest, Services_Provider_V1_DeleteWebhookResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.DeleteWebhook.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteWebhookInterceptors() ?? []
        )
    }

    /// Get ecosystem information
    ///
    /// - Parameters:
    ///   - request: Request to send to EcosystemInfo.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func EcosystemInfo(
        _ request: Services_Provider_V1_EcosystemInfoRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_EcosystemInfoRequest, Services_Provider_V1_EcosystemInfoResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.EcosystemInfo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeEcosystemInfoInterceptors() ?? []
        )
    }

    /// Get public ecosystem information about *any* ecosystem
    ///
    /// - Parameters:
    ///   - request: Request to send to GetPublicEcosystemInfo.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func GetPublicEcosystemInfo(
        _ request: Services_Provider_V1_GetPublicEcosystemInfoRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_GetPublicEcosystemInfoRequest, Services_Provider_V1_GetPublicEcosystemInfoResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.GetPublicEcosystemInfo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetPublicEcosystemInfoInterceptors() ?? []
        )
    }

    /// Invite a user to the ecosystem
    ///
    /// - Parameters:
    ///   - request: Request to send to Invite.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func Invite(
        _ request: Services_Provider_V1_InviteRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_InviteRequest, Services_Provider_V1_InviteResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.Invite.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeInviteInterceptors() ?? []
        )
    }

    /// Check the status of an invitation
    ///
    /// - Parameters:
    ///   - request: Request to send to InvitationStatus.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func InvitationStatus(
        _ request: Services_Provider_V1_InvitationStatusRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_InvitationStatusRequest, Services_Provider_V1_InvitationStatusResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.InvitationStatus.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeInvitationStatusInterceptors() ?? []
        )
    }

    /// Returns the public key being used to create/verify oberon tokens
    ///
    /// - Parameters:
    ///   - request: Request to send to GetOberonKey.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func GetOberonKey(
        _ request: Services_Provider_V1_GetOberonKeyRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_GetOberonKeyRequest, Services_Provider_V1_GetOberonKeyResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.GetOberonKey.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetOberonKeyInterceptors() ?? []
        )
    }

    /// Upgrade a wallet's DID from `did:key` to another method
    ///
    /// - Parameters:
    ///   - request: Request to send to UpgradeDID.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func UpgradeDID(
        _ request: Services_Provider_V1_UpgradeDidRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_UpgradeDidRequest, Services_Provider_V1_UpgradeDidResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.UpgradeDID.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpgradeDIDInterceptors() ?? []
        )
    }

    /// Retrieve a random hash TXT that can be used to verify domain ownership
    ///
    /// - Parameters:
    ///   - request: Request to send to RetrieveDomainVerificationRecord.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func RetrieveDomainVerificationRecord(
        _ request: Services_Provider_V1_RetrieveDomainVerificationRecordRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_RetrieveDomainVerificationRecordRequest, Services_Provider_V1_RetrieveDomainVerificationRecordResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.RetrieveDomainVerificationRecord.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRetrieveDomainVerificationRecordInterceptors() ?? []
        )
    }

    /// Call to verify domain
    ///
    /// - Parameters:
    ///   - request: Request to send to RefreshDomainVerificationStatus.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func RefreshDomainVerificationStatus(
        _ request: Services_Provider_V1_RefreshDomainVerificationStatusRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_RefreshDomainVerificationStatusRequest, Services_Provider_V1_RefreshDomainVerificationStatusResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.RefreshDomainVerificationStatus.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRefreshDomainVerificationStatusInterceptors() ?? []
        )
    }

    /// Search for issuers/providers/verifiers in the current ecosystem
    ///
    /// - Parameters:
    ///   - request: Request to send to SearchWalletConfigurations.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func SearchWalletConfigurations(
        _ request: Services_Provider_V1_SearchWalletConfigurationsRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_SearchWalletConfigurationsRequest, Services_Provider_V1_SearchWalletConfigurationResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_ProviderClientMetadata.Methods.SearchWalletConfigurations.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSearchWalletConfigurationsInterceptors() ?? []
        )
    }
}

#if compiler(>=5.6)
    @available(*, deprecated)
    extension Services_Provider_V1_ProviderClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Services_Provider_V1_ProviderNIOClient")
public final class Services_Provider_V1_ProviderClient: Services_Provider_V1_ProviderClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the services.provider.v1.Provider service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct Services_Provider_V1_ProviderNIOClient: Services_Provider_V1_ProviderClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol?

    /// Creates a client for the services.provider.v1.Provider service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

#if compiler(>=5.6)
    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public protocol Services_Provider_V1_ProviderAsyncClientProtocol: GRPCClient {
        static var serviceDescriptor: GRPCServiceDescriptor { get }
        var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? { get }

        func makeCreateEcosystemCall(
            _ request: Services_Provider_V1_CreateEcosystemRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse>

        func makeUpdateEcosystemCall(
            _ request: Services_Provider_V1_UpdateEcosystemRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_UpdateEcosystemRequest, Services_Provider_V1_UpdateEcosystemResponse>

        func makeAddWebhookCall(
            _ request: Services_Provider_V1_AddWebhookRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_AddWebhookRequest, Services_Provider_V1_AddWebhookResponse>

        func makeDeleteWebhookCall(
            _ request: Services_Provider_V1_DeleteWebhookRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_DeleteWebhookRequest, Services_Provider_V1_DeleteWebhookResponse>

        func makeEcosystemInfoCall(
            _ request: Services_Provider_V1_EcosystemInfoRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_EcosystemInfoRequest, Services_Provider_V1_EcosystemInfoResponse>

        func makeGetPublicEcosystemInfoCall(
            _ request: Services_Provider_V1_GetPublicEcosystemInfoRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_GetPublicEcosystemInfoRequest, Services_Provider_V1_GetPublicEcosystemInfoResponse>

        func makeInviteCall(
            _ request: Services_Provider_V1_InviteRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_InviteRequest, Services_Provider_V1_InviteResponse>

        func makeInvitationStatusCall(
            _ request: Services_Provider_V1_InvitationStatusRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_InvitationStatusRequest, Services_Provider_V1_InvitationStatusResponse>

        func makeGetOberonKeyCall(
            _ request: Services_Provider_V1_GetOberonKeyRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_GetOberonKeyRequest, Services_Provider_V1_GetOberonKeyResponse>

        func makeUpgradeDIDCall(
            _ request: Services_Provider_V1_UpgradeDidRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_UpgradeDidRequest, Services_Provider_V1_UpgradeDidResponse>

        func makeRetrieveDomainVerificationRecordCall(
            _ request: Services_Provider_V1_RetrieveDomainVerificationRecordRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_RetrieveDomainVerificationRecordRequest, Services_Provider_V1_RetrieveDomainVerificationRecordResponse>

        func makeRefreshDomainVerificationStatusCall(
            _ request: Services_Provider_V1_RefreshDomainVerificationStatusRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_RefreshDomainVerificationStatusRequest, Services_Provider_V1_RefreshDomainVerificationStatusResponse>

        func makeSearchWalletConfigurationsCall(
            _ request: Services_Provider_V1_SearchWalletConfigurationsRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_SearchWalletConfigurationsRequest, Services_Provider_V1_SearchWalletConfigurationResponse>
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public extension Services_Provider_V1_ProviderAsyncClientProtocol {
        static var serviceDescriptor: GRPCServiceDescriptor {
            Services_Provider_V1_ProviderClientMetadata.serviceDescriptor
        }

        var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? {
            nil
        }

        func makeCreateEcosystemCall(
            _ request: Services_Provider_V1_CreateEcosystemRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.CreateEcosystem.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeCreateEcosystemInterceptors() ?? []
            )
        }

        func makeUpdateEcosystemCall(
            _ request: Services_Provider_V1_UpdateEcosystemRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_UpdateEcosystemRequest, Services_Provider_V1_UpdateEcosystemResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.UpdateEcosystem.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeUpdateEcosystemInterceptors() ?? []
            )
        }

        func makeAddWebhookCall(
            _ request: Services_Provider_V1_AddWebhookRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_AddWebhookRequest, Services_Provider_V1_AddWebhookResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.AddWebhook.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeAddWebhookInterceptors() ?? []
            )
        }

        func makeDeleteWebhookCall(
            _ request: Services_Provider_V1_DeleteWebhookRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_DeleteWebhookRequest, Services_Provider_V1_DeleteWebhookResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.DeleteWebhook.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeDeleteWebhookInterceptors() ?? []
            )
        }

        func makeEcosystemInfoCall(
            _ request: Services_Provider_V1_EcosystemInfoRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_EcosystemInfoRequest, Services_Provider_V1_EcosystemInfoResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.EcosystemInfo.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeEcosystemInfoInterceptors() ?? []
            )
        }

        func makeGetPublicEcosystemInfoCall(
            _ request: Services_Provider_V1_GetPublicEcosystemInfoRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_GetPublicEcosystemInfoRequest, Services_Provider_V1_GetPublicEcosystemInfoResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.GetPublicEcosystemInfo.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeGetPublicEcosystemInfoInterceptors() ?? []
            )
        }

        func makeInviteCall(
            _ request: Services_Provider_V1_InviteRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_InviteRequest, Services_Provider_V1_InviteResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.Invite.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeInviteInterceptors() ?? []
            )
        }

        func makeInvitationStatusCall(
            _ request: Services_Provider_V1_InvitationStatusRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_InvitationStatusRequest, Services_Provider_V1_InvitationStatusResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.InvitationStatus.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeInvitationStatusInterceptors() ?? []
            )
        }

        func makeGetOberonKeyCall(
            _ request: Services_Provider_V1_GetOberonKeyRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_GetOberonKeyRequest, Services_Provider_V1_GetOberonKeyResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.GetOberonKey.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeGetOberonKeyInterceptors() ?? []
            )
        }

        func makeUpgradeDIDCall(
            _ request: Services_Provider_V1_UpgradeDidRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_UpgradeDidRequest, Services_Provider_V1_UpgradeDidResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.UpgradeDID.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeUpgradeDIDInterceptors() ?? []
            )
        }

        func makeRetrieveDomainVerificationRecordCall(
            _ request: Services_Provider_V1_RetrieveDomainVerificationRecordRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_RetrieveDomainVerificationRecordRequest, Services_Provider_V1_RetrieveDomainVerificationRecordResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.RetrieveDomainVerificationRecord.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeRetrieveDomainVerificationRecordInterceptors() ?? []
            )
        }

        func makeRefreshDomainVerificationStatusCall(
            _ request: Services_Provider_V1_RefreshDomainVerificationStatusRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_RefreshDomainVerificationStatusRequest, Services_Provider_V1_RefreshDomainVerificationStatusResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.RefreshDomainVerificationStatus.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeRefreshDomainVerificationStatusInterceptors() ?? []
            )
        }

        func makeSearchWalletConfigurationsCall(
            _ request: Services_Provider_V1_SearchWalletConfigurationsRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Provider_V1_SearchWalletConfigurationsRequest, Services_Provider_V1_SearchWalletConfigurationResponse> {
            makeAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.SearchWalletConfigurations.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeSearchWalletConfigurationsInterceptors() ?? []
            )
        }
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public extension Services_Provider_V1_ProviderAsyncClientProtocol {
        func CreateEcosystem(
            _ request: Services_Provider_V1_CreateEcosystemRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_CreateEcosystemResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.CreateEcosystem.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeCreateEcosystemInterceptors() ?? []
            )
        }

        func UpdateEcosystem(
            _ request: Services_Provider_V1_UpdateEcosystemRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_UpdateEcosystemResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.UpdateEcosystem.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeUpdateEcosystemInterceptors() ?? []
            )
        }

        func AddWebhook(
            _ request: Services_Provider_V1_AddWebhookRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_AddWebhookResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.AddWebhook.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeAddWebhookInterceptors() ?? []
            )
        }

        func DeleteWebhook(
            _ request: Services_Provider_V1_DeleteWebhookRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_DeleteWebhookResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.DeleteWebhook.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeDeleteWebhookInterceptors() ?? []
            )
        }

        func EcosystemInfo(
            _ request: Services_Provider_V1_EcosystemInfoRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_EcosystemInfoResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.EcosystemInfo.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeEcosystemInfoInterceptors() ?? []
            )
        }

        func GetPublicEcosystemInfo(
            _ request: Services_Provider_V1_GetPublicEcosystemInfoRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_GetPublicEcosystemInfoResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.GetPublicEcosystemInfo.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeGetPublicEcosystemInfoInterceptors() ?? []
            )
        }

        func Invite(
            _ request: Services_Provider_V1_InviteRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_InviteResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.Invite.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeInviteInterceptors() ?? []
            )
        }

        func InvitationStatus(
            _ request: Services_Provider_V1_InvitationStatusRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_InvitationStatusResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.InvitationStatus.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeInvitationStatusInterceptors() ?? []
            )
        }

        func GetOberonKey(
            _ request: Services_Provider_V1_GetOberonKeyRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_GetOberonKeyResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.GetOberonKey.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeGetOberonKeyInterceptors() ?? []
            )
        }

        func UpgradeDID(
            _ request: Services_Provider_V1_UpgradeDidRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_UpgradeDidResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.UpgradeDID.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeUpgradeDIDInterceptors() ?? []
            )
        }

        func RetrieveDomainVerificationRecord(
            _ request: Services_Provider_V1_RetrieveDomainVerificationRecordRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_RetrieveDomainVerificationRecordResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.RetrieveDomainVerificationRecord.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeRetrieveDomainVerificationRecordInterceptors() ?? []
            )
        }

        func RefreshDomainVerificationStatus(
            _ request: Services_Provider_V1_RefreshDomainVerificationStatusRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_RefreshDomainVerificationStatusResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.RefreshDomainVerificationStatus.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeRefreshDomainVerificationStatusInterceptors() ?? []
            )
        }

        func SearchWalletConfigurations(
            _ request: Services_Provider_V1_SearchWalletConfigurationsRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Provider_V1_SearchWalletConfigurationResponse {
            try await performAsyncUnaryCall(
                path: Services_Provider_V1_ProviderClientMetadata.Methods.SearchWalletConfigurations.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeSearchWalletConfigurationsInterceptors() ?? []
            )
        }
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public struct Services_Provider_V1_ProviderAsyncClient: Services_Provider_V1_ProviderAsyncClientProtocol {
        public var channel: GRPCChannel
        public var defaultCallOptions: CallOptions
        public var interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol?

        public init(
            channel: GRPCChannel,
            defaultCallOptions: CallOptions = CallOptions(),
            interceptors: Services_Provider_V1_ProviderClientInterceptorFactoryProtocol? = nil
        ) {
            self.channel = channel
            self.defaultCallOptions = defaultCallOptions
            self.interceptors = interceptors
        }
    }

#endif // compiler(>=5.6)

public protocol Services_Provider_V1_ProviderClientInterceptorFactoryProtocol: GRPCSendable {
    /// - Returns: Interceptors to use when invoking 'CreateEcosystem'.
    func makeCreateEcosystemInterceptors() -> [ClientInterceptor<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse>]

    /// - Returns: Interceptors to use when invoking 'UpdateEcosystem'.
    func makeUpdateEcosystemInterceptors() -> [ClientInterceptor<Services_Provider_V1_UpdateEcosystemRequest, Services_Provider_V1_UpdateEcosystemResponse>]

    /// - Returns: Interceptors to use when invoking 'AddWebhook'.
    func makeAddWebhookInterceptors() -> [ClientInterceptor<Services_Provider_V1_AddWebhookRequest, Services_Provider_V1_AddWebhookResponse>]

    /// - Returns: Interceptors to use when invoking 'DeleteWebhook'.
    func makeDeleteWebhookInterceptors() -> [ClientInterceptor<Services_Provider_V1_DeleteWebhookRequest, Services_Provider_V1_DeleteWebhookResponse>]

    /// - Returns: Interceptors to use when invoking 'EcosystemInfo'.
    func makeEcosystemInfoInterceptors() -> [ClientInterceptor<Services_Provider_V1_EcosystemInfoRequest, Services_Provider_V1_EcosystemInfoResponse>]

    /// - Returns: Interceptors to use when invoking 'GetPublicEcosystemInfo'.
    func makeGetPublicEcosystemInfoInterceptors() -> [ClientInterceptor<Services_Provider_V1_GetPublicEcosystemInfoRequest, Services_Provider_V1_GetPublicEcosystemInfoResponse>]

    /// - Returns: Interceptors to use when invoking 'Invite'.
    func makeInviteInterceptors() -> [ClientInterceptor<Services_Provider_V1_InviteRequest, Services_Provider_V1_InviteResponse>]

    /// - Returns: Interceptors to use when invoking 'InvitationStatus'.
    func makeInvitationStatusInterceptors() -> [ClientInterceptor<Services_Provider_V1_InvitationStatusRequest, Services_Provider_V1_InvitationStatusResponse>]

    /// - Returns: Interceptors to use when invoking 'GetOberonKey'.
    func makeGetOberonKeyInterceptors() -> [ClientInterceptor<Services_Provider_V1_GetOberonKeyRequest, Services_Provider_V1_GetOberonKeyResponse>]

    /// - Returns: Interceptors to use when invoking 'UpgradeDID'.
    func makeUpgradeDIDInterceptors() -> [ClientInterceptor<Services_Provider_V1_UpgradeDidRequest, Services_Provider_V1_UpgradeDidResponse>]

    /// - Returns: Interceptors to use when invoking 'RetrieveDomainVerificationRecord'.
    func makeRetrieveDomainVerificationRecordInterceptors() -> [ClientInterceptor<Services_Provider_V1_RetrieveDomainVerificationRecordRequest, Services_Provider_V1_RetrieveDomainVerificationRecordResponse>]

    /// - Returns: Interceptors to use when invoking 'RefreshDomainVerificationStatus'.
    func makeRefreshDomainVerificationStatusInterceptors() -> [ClientInterceptor<Services_Provider_V1_RefreshDomainVerificationStatusRequest, Services_Provider_V1_RefreshDomainVerificationStatusResponse>]

    /// - Returns: Interceptors to use when invoking 'SearchWalletConfigurations'.
    func makeSearchWalletConfigurationsInterceptors() -> [ClientInterceptor<Services_Provider_V1_SearchWalletConfigurationsRequest, Services_Provider_V1_SearchWalletConfigurationResponse>]
}

public enum Services_Provider_V1_ProviderClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Provider",
        fullName: "services.provider.v1.Provider",
        methods: [
            Services_Provider_V1_ProviderClientMetadata.Methods.CreateEcosystem,
            Services_Provider_V1_ProviderClientMetadata.Methods.UpdateEcosystem,
            Services_Provider_V1_ProviderClientMetadata.Methods.AddWebhook,
            Services_Provider_V1_ProviderClientMetadata.Methods.DeleteWebhook,
            Services_Provider_V1_ProviderClientMetadata.Methods.EcosystemInfo,
            Services_Provider_V1_ProviderClientMetadata.Methods.GetPublicEcosystemInfo,
            Services_Provider_V1_ProviderClientMetadata.Methods.Invite,
            Services_Provider_V1_ProviderClientMetadata.Methods.InvitationStatus,
            Services_Provider_V1_ProviderClientMetadata.Methods.GetOberonKey,
            Services_Provider_V1_ProviderClientMetadata.Methods.UpgradeDID,
            Services_Provider_V1_ProviderClientMetadata.Methods.RetrieveDomainVerificationRecord,
            Services_Provider_V1_ProviderClientMetadata.Methods.RefreshDomainVerificationStatus,
            Services_Provider_V1_ProviderClientMetadata.Methods.SearchWalletConfigurations,
        ]
    )

    public enum Methods {
        public static let CreateEcosystem = GRPCMethodDescriptor(
            name: "CreateEcosystem",
            path: "/services.provider.v1.Provider/CreateEcosystem",
            type: GRPCCallType.unary
        )

        public static let UpdateEcosystem = GRPCMethodDescriptor(
            name: "UpdateEcosystem",
            path: "/services.provider.v1.Provider/UpdateEcosystem",
            type: GRPCCallType.unary
        )

        public static let AddWebhook = GRPCMethodDescriptor(
            name: "AddWebhook",
            path: "/services.provider.v1.Provider/AddWebhook",
            type: GRPCCallType.unary
        )

        public static let DeleteWebhook = GRPCMethodDescriptor(
            name: "DeleteWebhook",
            path: "/services.provider.v1.Provider/DeleteWebhook",
            type: GRPCCallType.unary
        )

        public static let EcosystemInfo = GRPCMethodDescriptor(
            name: "EcosystemInfo",
            path: "/services.provider.v1.Provider/EcosystemInfo",
            type: GRPCCallType.unary
        )

        public static let GetPublicEcosystemInfo = GRPCMethodDescriptor(
            name: "GetPublicEcosystemInfo",
            path: "/services.provider.v1.Provider/GetPublicEcosystemInfo",
            type: GRPCCallType.unary
        )

        public static let Invite = GRPCMethodDescriptor(
            name: "Invite",
            path: "/services.provider.v1.Provider/Invite",
            type: GRPCCallType.unary
        )

        public static let InvitationStatus = GRPCMethodDescriptor(
            name: "InvitationStatus",
            path: "/services.provider.v1.Provider/InvitationStatus",
            type: GRPCCallType.unary
        )

        public static let GetOberonKey = GRPCMethodDescriptor(
            name: "GetOberonKey",
            path: "/services.provider.v1.Provider/GetOberonKey",
            type: GRPCCallType.unary
        )

        public static let UpgradeDID = GRPCMethodDescriptor(
            name: "UpgradeDID",
            path: "/services.provider.v1.Provider/UpgradeDID",
            type: GRPCCallType.unary
        )

        public static let RetrieveDomainVerificationRecord = GRPCMethodDescriptor(
            name: "RetrieveDomainVerificationRecord",
            path: "/services.provider.v1.Provider/RetrieveDomainVerificationRecord",
            type: GRPCCallType.unary
        )

        public static let RefreshDomainVerificationStatus = GRPCMethodDescriptor(
            name: "RefreshDomainVerificationStatus",
            path: "/services.provider.v1.Provider/RefreshDomainVerificationStatus",
            type: GRPCCallType.unary
        )

        public static let SearchWalletConfigurations = GRPCMethodDescriptor(
            name: "SearchWalletConfigurations",
            path: "/services.provider.v1.Provider/SearchWalletConfigurations",
            type: GRPCCallType.unary
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Services_Provider_V1_ProviderProvider: CallHandlerProvider {
    var interceptors: Services_Provider_V1_ProviderServerInterceptorFactoryProtocol? { get }

    /// Create new ecosystem and assign the authenticated user as owner
    func CreateEcosystem(request: Services_Provider_V1_CreateEcosystemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_CreateEcosystemResponse>

    /// Update an existing ecosystem
    func UpdateEcosystem(request: Services_Provider_V1_UpdateEcosystemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_UpdateEcosystemResponse>

    /// Add a webhook endpoint to the ecosystem
    func AddWebhook(request: Services_Provider_V1_AddWebhookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_AddWebhookResponse>

    /// Delete a webhook endpoint from the ecosystem
    func DeleteWebhook(request: Services_Provider_V1_DeleteWebhookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_DeleteWebhookResponse>

    /// Get ecosystem information
    func EcosystemInfo(request: Services_Provider_V1_EcosystemInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_EcosystemInfoResponse>

    /// Get public ecosystem information about *any* ecosystem
    func GetPublicEcosystemInfo(request: Services_Provider_V1_GetPublicEcosystemInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_GetPublicEcosystemInfoResponse>

    /// Invite a user to the ecosystem
    func Invite(request: Services_Provider_V1_InviteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_InviteResponse>

    /// Check the status of an invitation
    func InvitationStatus(request: Services_Provider_V1_InvitationStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_InvitationStatusResponse>

    /// Returns the public key being used to create/verify oberon tokens
    func GetOberonKey(request: Services_Provider_V1_GetOberonKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_GetOberonKeyResponse>

    /// Upgrade a wallet's DID from `did:key` to another method
    func UpgradeDID(request: Services_Provider_V1_UpgradeDidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_UpgradeDidResponse>

    /// Retrieve a random hash TXT that can be used to verify domain ownership
    func RetrieveDomainVerificationRecord(request: Services_Provider_V1_RetrieveDomainVerificationRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_RetrieveDomainVerificationRecordResponse>

    /// Call to verify domain
    func RefreshDomainVerificationStatus(request: Services_Provider_V1_RefreshDomainVerificationStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_RefreshDomainVerificationStatusResponse>

    /// Search for issuers/providers/verifiers in the current ecosystem
    func SearchWalletConfigurations(request: Services_Provider_V1_SearchWalletConfigurationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_SearchWalletConfigurationResponse>
}

public extension Services_Provider_V1_ProviderProvider {
    var serviceName: Substring {
        Services_Provider_V1_ProviderServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "CreateEcosystem":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_CreateEcosystemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_CreateEcosystemResponse>(),
                interceptors: interceptors?.makeCreateEcosystemInterceptors() ?? [],
                userFunction: CreateEcosystem(request:context:)
            )

        case "UpdateEcosystem":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_UpdateEcosystemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_UpdateEcosystemResponse>(),
                interceptors: interceptors?.makeUpdateEcosystemInterceptors() ?? [],
                userFunction: UpdateEcosystem(request:context:)
            )

        case "AddWebhook":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_AddWebhookRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_AddWebhookResponse>(),
                interceptors: interceptors?.makeAddWebhookInterceptors() ?? [],
                userFunction: AddWebhook(request:context:)
            )

        case "DeleteWebhook":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_DeleteWebhookRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_DeleteWebhookResponse>(),
                interceptors: interceptors?.makeDeleteWebhookInterceptors() ?? [],
                userFunction: DeleteWebhook(request:context:)
            )

        case "EcosystemInfo":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_EcosystemInfoRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_EcosystemInfoResponse>(),
                interceptors: interceptors?.makeEcosystemInfoInterceptors() ?? [],
                userFunction: EcosystemInfo(request:context:)
            )

        case "GetPublicEcosystemInfo":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_GetPublicEcosystemInfoRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_GetPublicEcosystemInfoResponse>(),
                interceptors: interceptors?.makeGetPublicEcosystemInfoInterceptors() ?? [],
                userFunction: GetPublicEcosystemInfo(request:context:)
            )

        case "Invite":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_InviteRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_InviteResponse>(),
                interceptors: interceptors?.makeInviteInterceptors() ?? [],
                userFunction: Invite(request:context:)
            )

        case "InvitationStatus":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_InvitationStatusRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_InvitationStatusResponse>(),
                interceptors: interceptors?.makeInvitationStatusInterceptors() ?? [],
                userFunction: InvitationStatus(request:context:)
            )

        case "GetOberonKey":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_GetOberonKeyRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_GetOberonKeyResponse>(),
                interceptors: interceptors?.makeGetOberonKeyInterceptors() ?? [],
                userFunction: GetOberonKey(request:context:)
            )

        case "UpgradeDID":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_UpgradeDidRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_UpgradeDidResponse>(),
                interceptors: interceptors?.makeUpgradeDIDInterceptors() ?? [],
                userFunction: UpgradeDID(request:context:)
            )

        case "RetrieveDomainVerificationRecord":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_RetrieveDomainVerificationRecordRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_RetrieveDomainVerificationRecordResponse>(),
                interceptors: interceptors?.makeRetrieveDomainVerificationRecordInterceptors() ?? [],
                userFunction: RetrieveDomainVerificationRecord(request:context:)
            )

        case "RefreshDomainVerificationStatus":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_RefreshDomainVerificationStatusRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_RefreshDomainVerificationStatusResponse>(),
                interceptors: interceptors?.makeRefreshDomainVerificationStatusInterceptors() ?? [],
                userFunction: RefreshDomainVerificationStatus(request:context:)
            )

        case "SearchWalletConfigurations":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_SearchWalletConfigurationsRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_SearchWalletConfigurationResponse>(),
                interceptors: interceptors?.makeSearchWalletConfigurationsInterceptors() ?? [],
                userFunction: SearchWalletConfigurations(request:context:)
            )

        default:
            return nil
        }
    }
}

#if compiler(>=5.6)

    /// To implement a server, implement an object which conforms to this protocol.
    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public protocol Services_Provider_V1_ProviderAsyncProvider: CallHandlerProvider {
        static var serviceDescriptor: GRPCServiceDescriptor { get }
        var interceptors: Services_Provider_V1_ProviderServerInterceptorFactoryProtocol? { get }

        /// Create new ecosystem and assign the authenticated user as owner
        @Sendable func CreateEcosystem(
            request: Services_Provider_V1_CreateEcosystemRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_CreateEcosystemResponse

        /// Update an existing ecosystem
        @Sendable func UpdateEcosystem(
            request: Services_Provider_V1_UpdateEcosystemRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_UpdateEcosystemResponse

        /// Add a webhook endpoint to the ecosystem
        @Sendable func AddWebhook(
            request: Services_Provider_V1_AddWebhookRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_AddWebhookResponse

        /// Delete a webhook endpoint from the ecosystem
        @Sendable func DeleteWebhook(
            request: Services_Provider_V1_DeleteWebhookRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_DeleteWebhookResponse

        /// Get ecosystem information
        @Sendable func EcosystemInfo(
            request: Services_Provider_V1_EcosystemInfoRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_EcosystemInfoResponse

        /// Get public ecosystem information about *any* ecosystem
        @Sendable func GetPublicEcosystemInfo(
            request: Services_Provider_V1_GetPublicEcosystemInfoRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_GetPublicEcosystemInfoResponse

        /// Invite a user to the ecosystem
        @Sendable func Invite(
            request: Services_Provider_V1_InviteRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_InviteResponse

        /// Check the status of an invitation
        @Sendable func InvitationStatus(
            request: Services_Provider_V1_InvitationStatusRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_InvitationStatusResponse

        /// Returns the public key being used to create/verify oberon tokens
        @Sendable func GetOberonKey(
            request: Services_Provider_V1_GetOberonKeyRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_GetOberonKeyResponse

        /// Upgrade a wallet's DID from `did:key` to another method
        @Sendable func UpgradeDID(
            request: Services_Provider_V1_UpgradeDidRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_UpgradeDidResponse

        /// Retrieve a random hash TXT that can be used to verify domain ownership
        @Sendable func RetrieveDomainVerificationRecord(
            request: Services_Provider_V1_RetrieveDomainVerificationRecordRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_RetrieveDomainVerificationRecordResponse

        /// Call to verify domain
        @Sendable func RefreshDomainVerificationStatus(
            request: Services_Provider_V1_RefreshDomainVerificationStatusRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_RefreshDomainVerificationStatusResponse

        /// Search for issuers/providers/verifiers in the current ecosystem
        @Sendable func SearchWalletConfigurations(
            request: Services_Provider_V1_SearchWalletConfigurationsRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Provider_V1_SearchWalletConfigurationResponse
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public extension Services_Provider_V1_ProviderAsyncProvider {
        static var serviceDescriptor: GRPCServiceDescriptor {
            Services_Provider_V1_ProviderServerMetadata.serviceDescriptor
        }

        var serviceName: Substring {
            Services_Provider_V1_ProviderServerMetadata.serviceDescriptor.fullName[...]
        }

        var interceptors: Services_Provider_V1_ProviderServerInterceptorFactoryProtocol? {
            nil
        }

        func handle(
            method name: Substring,
            context: CallHandlerContext
        ) -> GRPCServerHandlerProtocol? {
            switch name {
            case "CreateEcosystem":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_CreateEcosystemRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_CreateEcosystemResponse>(),
                    interceptors: interceptors?.makeCreateEcosystemInterceptors() ?? [],
                    wrapping: CreateEcosystem(request:context:)
                )

            case "UpdateEcosystem":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_UpdateEcosystemRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_UpdateEcosystemResponse>(),
                    interceptors: interceptors?.makeUpdateEcosystemInterceptors() ?? [],
                    wrapping: UpdateEcosystem(request:context:)
                )

            case "AddWebhook":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_AddWebhookRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_AddWebhookResponse>(),
                    interceptors: interceptors?.makeAddWebhookInterceptors() ?? [],
                    wrapping: AddWebhook(request:context:)
                )

            case "DeleteWebhook":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_DeleteWebhookRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_DeleteWebhookResponse>(),
                    interceptors: interceptors?.makeDeleteWebhookInterceptors() ?? [],
                    wrapping: DeleteWebhook(request:context:)
                )

            case "EcosystemInfo":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_EcosystemInfoRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_EcosystemInfoResponse>(),
                    interceptors: interceptors?.makeEcosystemInfoInterceptors() ?? [],
                    wrapping: EcosystemInfo(request:context:)
                )

            case "GetPublicEcosystemInfo":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_GetPublicEcosystemInfoRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_GetPublicEcosystemInfoResponse>(),
                    interceptors: interceptors?.makeGetPublicEcosystemInfoInterceptors() ?? [],
                    wrapping: GetPublicEcosystemInfo(request:context:)
                )

            case "Invite":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_InviteRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_InviteResponse>(),
                    interceptors: interceptors?.makeInviteInterceptors() ?? [],
                    wrapping: Invite(request:context:)
                )

            case "InvitationStatus":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_InvitationStatusRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_InvitationStatusResponse>(),
                    interceptors: interceptors?.makeInvitationStatusInterceptors() ?? [],
                    wrapping: InvitationStatus(request:context:)
                )

            case "GetOberonKey":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_GetOberonKeyRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_GetOberonKeyResponse>(),
                    interceptors: interceptors?.makeGetOberonKeyInterceptors() ?? [],
                    wrapping: GetOberonKey(request:context:)
                )

            case "UpgradeDID":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_UpgradeDidRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_UpgradeDidResponse>(),
                    interceptors: interceptors?.makeUpgradeDIDInterceptors() ?? [],
                    wrapping: UpgradeDID(request:context:)
                )

            case "RetrieveDomainVerificationRecord":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_RetrieveDomainVerificationRecordRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_RetrieveDomainVerificationRecordResponse>(),
                    interceptors: interceptors?.makeRetrieveDomainVerificationRecordInterceptors() ?? [],
                    wrapping: RetrieveDomainVerificationRecord(request:context:)
                )

            case "RefreshDomainVerificationStatus":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_RefreshDomainVerificationStatusRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_RefreshDomainVerificationStatusResponse>(),
                    interceptors: interceptors?.makeRefreshDomainVerificationStatusInterceptors() ?? [],
                    wrapping: RefreshDomainVerificationStatus(request:context:)
                )

            case "SearchWalletConfigurations":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Provider_V1_SearchWalletConfigurationsRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Provider_V1_SearchWalletConfigurationResponse>(),
                    interceptors: interceptors?.makeSearchWalletConfigurationsInterceptors() ?? [],
                    wrapping: SearchWalletConfigurations(request:context:)
                )

            default:
                return nil
            }
        }
    }

#endif // compiler(>=5.6)

public protocol Services_Provider_V1_ProviderServerInterceptorFactoryProtocol {
    /// - Returns: Interceptors to use when handling 'CreateEcosystem'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeCreateEcosystemInterceptors() -> [ServerInterceptor<Services_Provider_V1_CreateEcosystemRequest, Services_Provider_V1_CreateEcosystemResponse>]

    /// - Returns: Interceptors to use when handling 'UpdateEcosystem'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeUpdateEcosystemInterceptors() -> [ServerInterceptor<Services_Provider_V1_UpdateEcosystemRequest, Services_Provider_V1_UpdateEcosystemResponse>]

    /// - Returns: Interceptors to use when handling 'AddWebhook'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeAddWebhookInterceptors() -> [ServerInterceptor<Services_Provider_V1_AddWebhookRequest, Services_Provider_V1_AddWebhookResponse>]

    /// - Returns: Interceptors to use when handling 'DeleteWebhook'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeDeleteWebhookInterceptors() -> [ServerInterceptor<Services_Provider_V1_DeleteWebhookRequest, Services_Provider_V1_DeleteWebhookResponse>]

    /// - Returns: Interceptors to use when handling 'EcosystemInfo'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeEcosystemInfoInterceptors() -> [ServerInterceptor<Services_Provider_V1_EcosystemInfoRequest, Services_Provider_V1_EcosystemInfoResponse>]

    /// - Returns: Interceptors to use when handling 'GetPublicEcosystemInfo'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetPublicEcosystemInfoInterceptors() -> [ServerInterceptor<Services_Provider_V1_GetPublicEcosystemInfoRequest, Services_Provider_V1_GetPublicEcosystemInfoResponse>]

    /// - Returns: Interceptors to use when handling 'Invite'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeInviteInterceptors() -> [ServerInterceptor<Services_Provider_V1_InviteRequest, Services_Provider_V1_InviteResponse>]

    /// - Returns: Interceptors to use when handling 'InvitationStatus'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeInvitationStatusInterceptors() -> [ServerInterceptor<Services_Provider_V1_InvitationStatusRequest, Services_Provider_V1_InvitationStatusResponse>]

    /// - Returns: Interceptors to use when handling 'GetOberonKey'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetOberonKeyInterceptors() -> [ServerInterceptor<Services_Provider_V1_GetOberonKeyRequest, Services_Provider_V1_GetOberonKeyResponse>]

    /// - Returns: Interceptors to use when handling 'UpgradeDID'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeUpgradeDIDInterceptors() -> [ServerInterceptor<Services_Provider_V1_UpgradeDidRequest, Services_Provider_V1_UpgradeDidResponse>]

    /// - Returns: Interceptors to use when handling 'RetrieveDomainVerificationRecord'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeRetrieveDomainVerificationRecordInterceptors() -> [ServerInterceptor<Services_Provider_V1_RetrieveDomainVerificationRecordRequest, Services_Provider_V1_RetrieveDomainVerificationRecordResponse>]

    /// - Returns: Interceptors to use when handling 'RefreshDomainVerificationStatus'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeRefreshDomainVerificationStatusInterceptors() -> [ServerInterceptor<Services_Provider_V1_RefreshDomainVerificationStatusRequest, Services_Provider_V1_RefreshDomainVerificationStatusResponse>]

    /// - Returns: Interceptors to use when handling 'SearchWalletConfigurations'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeSearchWalletConfigurationsInterceptors() -> [ServerInterceptor<Services_Provider_V1_SearchWalletConfigurationsRequest, Services_Provider_V1_SearchWalletConfigurationResponse>]
}

public enum Services_Provider_V1_ProviderServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "Provider",
        fullName: "services.provider.v1.Provider",
        methods: [
            Services_Provider_V1_ProviderServerMetadata.Methods.CreateEcosystem,
            Services_Provider_V1_ProviderServerMetadata.Methods.UpdateEcosystem,
            Services_Provider_V1_ProviderServerMetadata.Methods.AddWebhook,
            Services_Provider_V1_ProviderServerMetadata.Methods.DeleteWebhook,
            Services_Provider_V1_ProviderServerMetadata.Methods.EcosystemInfo,
            Services_Provider_V1_ProviderServerMetadata.Methods.GetPublicEcosystemInfo,
            Services_Provider_V1_ProviderServerMetadata.Methods.Invite,
            Services_Provider_V1_ProviderServerMetadata.Methods.InvitationStatus,
            Services_Provider_V1_ProviderServerMetadata.Methods.GetOberonKey,
            Services_Provider_V1_ProviderServerMetadata.Methods.UpgradeDID,
            Services_Provider_V1_ProviderServerMetadata.Methods.RetrieveDomainVerificationRecord,
            Services_Provider_V1_ProviderServerMetadata.Methods.RefreshDomainVerificationStatus,
            Services_Provider_V1_ProviderServerMetadata.Methods.SearchWalletConfigurations,
        ]
    )

    public enum Methods {
        public static let CreateEcosystem = GRPCMethodDescriptor(
            name: "CreateEcosystem",
            path: "/services.provider.v1.Provider/CreateEcosystem",
            type: GRPCCallType.unary
        )

        public static let UpdateEcosystem = GRPCMethodDescriptor(
            name: "UpdateEcosystem",
            path: "/services.provider.v1.Provider/UpdateEcosystem",
            type: GRPCCallType.unary
        )

        public static let AddWebhook = GRPCMethodDescriptor(
            name: "AddWebhook",
            path: "/services.provider.v1.Provider/AddWebhook",
            type: GRPCCallType.unary
        )

        public static let DeleteWebhook = GRPCMethodDescriptor(
            name: "DeleteWebhook",
            path: "/services.provider.v1.Provider/DeleteWebhook",
            type: GRPCCallType.unary
        )

        public static let EcosystemInfo = GRPCMethodDescriptor(
            name: "EcosystemInfo",
            path: "/services.provider.v1.Provider/EcosystemInfo",
            type: GRPCCallType.unary
        )

        public static let GetPublicEcosystemInfo = GRPCMethodDescriptor(
            name: "GetPublicEcosystemInfo",
            path: "/services.provider.v1.Provider/GetPublicEcosystemInfo",
            type: GRPCCallType.unary
        )

        public static let Invite = GRPCMethodDescriptor(
            name: "Invite",
            path: "/services.provider.v1.Provider/Invite",
            type: GRPCCallType.unary
        )

        public static let InvitationStatus = GRPCMethodDescriptor(
            name: "InvitationStatus",
            path: "/services.provider.v1.Provider/InvitationStatus",
            type: GRPCCallType.unary
        )

        public static let GetOberonKey = GRPCMethodDescriptor(
            name: "GetOberonKey",
            path: "/services.provider.v1.Provider/GetOberonKey",
            type: GRPCCallType.unary
        )

        public static let UpgradeDID = GRPCMethodDescriptor(
            name: "UpgradeDID",
            path: "/services.provider.v1.Provider/UpgradeDID",
            type: GRPCCallType.unary
        )

        public static let RetrieveDomainVerificationRecord = GRPCMethodDescriptor(
            name: "RetrieveDomainVerificationRecord",
            path: "/services.provider.v1.Provider/RetrieveDomainVerificationRecord",
            type: GRPCCallType.unary
        )

        public static let RefreshDomainVerificationStatus = GRPCMethodDescriptor(
            name: "RefreshDomainVerificationStatus",
            path: "/services.provider.v1.Provider/RefreshDomainVerificationStatus",
            type: GRPCCallType.unary
        )

        public static let SearchWalletConfigurations = GRPCMethodDescriptor(
            name: "SearchWalletConfigurations",
            path: "/services.provider.v1.Provider/SearchWalletConfigurations",
            type: GRPCCallType.unary
        )
    }
}
