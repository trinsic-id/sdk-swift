// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/provider/v1/access-management.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

/// Role management
public struct Services_Provider_V1_AddRoleAssignmentRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Role to assign
    public var role: String = .init()

    public var account: Services_Provider_V1_AddRoleAssignmentRequest.OneOf_Account?

    /// Email address of account to assign role.
    /// Mutually exclusive with `walletId` and `didUri`.
    public var email: String {
        get {
            if case let .email(v)? = account { return v }
            return String()
        }
        set { account = .email(newValue) }
    }

    /// Wallet ID of account to assign role to.
    /// Mutually exclusive with `email` and `didUri`.
    public var walletID: String {
        get {
            if case let .walletID(v)? = account { return v }
            return String()
        }
        set { account = .walletID(newValue) }
    }

    /// DID URI of the account to assign role.
    /// Mutually exclusive with `email` and `walletId`.
    public var didUri: String {
        get {
            if case let .didUri(v)? = account { return v }
            return String()
        }
        set { account = .didUri(newValue) }
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Account: Equatable {
        /// Email address of account to assign role.
        /// Mutually exclusive with `walletId` and `didUri`.
        case email(String)
        /// Wallet ID of account to assign role to.
        /// Mutually exclusive with `email` and `didUri`.
        case walletID(String)
        /// DID URI of the account to assign role.
        /// Mutually exclusive with `email` and `walletId`.
        case didUri(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Provider_V1_AddRoleAssignmentRequest.OneOf_Account, rhs: Services_Provider_V1_AddRoleAssignmentRequest.OneOf_Account) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.email, .email): return {
                        guard case let .email(l) = lhs, case let .email(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.walletID, .walletID): return {
                        guard case let .walletID(l) = lhs, case let .walletID(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.didUri, .didUri): return {
                        guard case let .didUri(l) = lhs, case let .didUri(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

public struct Services_Provider_V1_AddRoleAssignmentResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Provider_V1_RemoveRoleAssignmentRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Role to unassign
    public var role: String = .init()

    public var account: Services_Provider_V1_RemoveRoleAssignmentRequest.OneOf_Account?

    /// Email address of account to unassign role.
    /// Mutually exclusive with `walletId` and `didUri`.
    public var email: String {
        get {
            if case let .email(v)? = account { return v }
            return String()
        }
        set { account = .email(newValue) }
    }

    /// Wallet ID of account to unassign role.
    /// Mutually exclusive with `email` and `didUri`.
    public var walletID: String {
        get {
            if case let .walletID(v)? = account { return v }
            return String()
        }
        set { account = .walletID(newValue) }
    }

    /// DID URI of the account to unassign role.
    /// Mutually exclusive with `email` and `walletId`.
    public var didUri: String {
        get {
            if case let .didUri(v)? = account { return v }
            return String()
        }
        set { account = .didUri(newValue) }
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Account: Equatable {
        /// Email address of account to unassign role.
        /// Mutually exclusive with `walletId` and `didUri`.
        case email(String)
        /// Wallet ID of account to unassign role.
        /// Mutually exclusive with `email` and `didUri`.
        case walletID(String)
        /// DID URI of the account to unassign role.
        /// Mutually exclusive with `email` and `walletId`.
        case didUri(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Provider_V1_RemoveRoleAssignmentRequest.OneOf_Account, rhs: Services_Provider_V1_RemoveRoleAssignmentRequest.OneOf_Account) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.email, .email): return {
                        guard case let .email(l) = lhs, case let .email(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.walletID, .walletID): return {
                        guard case let .walletID(l) = lhs, case let .walletID(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.didUri, .didUri): return {
                        guard case let .didUri(l) = lhs, case let .didUri(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

public struct Services_Provider_V1_RemoveRoleAssignmentResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to fetch the list of roles assigned to the current account
public struct Services_Provider_V1_ListRoleAssignmentsRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var account: Services_Provider_V1_ListRoleAssignmentsRequest.OneOf_Account?

    /// Email address of account to list roles.
    /// Mutually exclusive with `walletId` and `didUri`.
    public var email: String {
        get {
            if case let .email(v)? = account { return v }
            return String()
        }
        set { account = .email(newValue) }
    }

    /// Wallet ID of account to list roles.
    /// Mutually exclusive with `email` and `didUri`.
    public var walletID: String {
        get {
            if case let .walletID(v)? = account { return v }
            return String()
        }
        set { account = .walletID(newValue) }
    }

    /// DID URI of the account to list roles.
    /// Mutually exclusive with `email` and `walletId`.
    public var didUri: String {
        get {
            if case let .didUri(v)? = account { return v }
            return String()
        }
        set { account = .didUri(newValue) }
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Account: Equatable {
        /// Email address of account to list roles.
        /// Mutually exclusive with `walletId` and `didUri`.
        case email(String)
        /// Wallet ID of account to list roles.
        /// Mutually exclusive with `email` and `didUri`.
        case walletID(String)
        /// DID URI of the account to list roles.
        /// Mutually exclusive with `email` and `walletId`.
        case didUri(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Provider_V1_ListRoleAssignmentsRequest.OneOf_Account, rhs: Services_Provider_V1_ListRoleAssignmentsRequest.OneOf_Account) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.email, .email): return {
                        guard case let .email(l) = lhs, case let .email(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.walletID, .walletID): return {
                        guard case let .walletID(l) = lhs, case let .walletID(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.didUri, .didUri): return {
                        guard case let .didUri(l) = lhs, case let .didUri(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

public struct Services_Provider_V1_ListRoleAssignmentsResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// List of roles
    public var roles: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to fetch the available roles in the current ecosystem
public struct Services_Provider_V1_ListAvailableRolesRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Provider_V1_ListAvailableRolesResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// List of roles
    public var roles: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension Services_Provider_V1_AddRoleAssignmentRequest: @unchecked Sendable {}
    extension Services_Provider_V1_AddRoleAssignmentRequest.OneOf_Account: @unchecked Sendable {}
    extension Services_Provider_V1_AddRoleAssignmentResponse: @unchecked Sendable {}
    extension Services_Provider_V1_RemoveRoleAssignmentRequest: @unchecked Sendable {}
    extension Services_Provider_V1_RemoveRoleAssignmentRequest.OneOf_Account: @unchecked Sendable {}
    extension Services_Provider_V1_RemoveRoleAssignmentResponse: @unchecked Sendable {}
    extension Services_Provider_V1_ListRoleAssignmentsRequest: @unchecked Sendable {}
    extension Services_Provider_V1_ListRoleAssignmentsRequest.OneOf_Account: @unchecked Sendable {}
    extension Services_Provider_V1_ListRoleAssignmentsResponse: @unchecked Sendable {}
    extension Services_Provider_V1_ListAvailableRolesRequest: @unchecked Sendable {}
    extension Services_Provider_V1_ListAvailableRolesResponse: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "services.provider.v1"

extension Services_Provider_V1_AddRoleAssignmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AddRoleAssignmentRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "role"),
        2: .same(proto: "email"),
        3: .standard(proto: "wallet_id"),
        4: .standard(proto: "did_uri"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &role)
            case 2: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.account != nil { try decoder.handleConflictingOneOf() }
                        self.account = .email(v)
                    }
                }()
            case 3: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.account != nil { try decoder.handleConflictingOneOf() }
                        self.account = .walletID(v)
                    }
                }()
            case 4: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.account != nil { try decoder.handleConflictingOneOf() }
                        self.account = .didUri(v)
                    }
                }()
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !role.isEmpty {
            try visitor.visitSingularStringField(value: role, fieldNumber: 1)
        }
        switch account {
        case .email?: try {
                guard case let .email(v)? = self.account else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 2)
            }()
        case .walletID?: try {
                guard case let .walletID(v)? = self.account else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 3)
            }()
        case .didUri?: try {
                guard case let .didUri(v)? = self.account else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 4)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Provider_V1_AddRoleAssignmentRequest, rhs: Services_Provider_V1_AddRoleAssignmentRequest) -> Bool {
        if lhs.role != rhs.role { return false }
        if lhs.account != rhs.account { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Provider_V1_AddRoleAssignmentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AddRoleAssignmentResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Provider_V1_AddRoleAssignmentResponse, rhs: Services_Provider_V1_AddRoleAssignmentResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Provider_V1_RemoveRoleAssignmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".RemoveRoleAssignmentRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "role"),
        2: .same(proto: "email"),
        3: .standard(proto: "wallet_id"),
        4: .standard(proto: "did_uri"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &role)
            case 2: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.account != nil { try decoder.handleConflictingOneOf() }
                        self.account = .email(v)
                    }
                }()
            case 3: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.account != nil { try decoder.handleConflictingOneOf() }
                        self.account = .walletID(v)
                    }
                }()
            case 4: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.account != nil { try decoder.handleConflictingOneOf() }
                        self.account = .didUri(v)
                    }
                }()
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !role.isEmpty {
            try visitor.visitSingularStringField(value: role, fieldNumber: 1)
        }
        switch account {
        case .email?: try {
                guard case let .email(v)? = self.account else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 2)
            }()
        case .walletID?: try {
                guard case let .walletID(v)? = self.account else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 3)
            }()
        case .didUri?: try {
                guard case let .didUri(v)? = self.account else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 4)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Provider_V1_RemoveRoleAssignmentRequest, rhs: Services_Provider_V1_RemoveRoleAssignmentRequest) -> Bool {
        if lhs.role != rhs.role { return false }
        if lhs.account != rhs.account { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Provider_V1_RemoveRoleAssignmentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".RemoveRoleAssignmentResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Provider_V1_RemoveRoleAssignmentResponse, rhs: Services_Provider_V1_RemoveRoleAssignmentResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Provider_V1_ListRoleAssignmentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ListRoleAssignmentsRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        2: .same(proto: "email"),
        3: .standard(proto: "wallet_id"),
        4: .standard(proto: "did_uri"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 2: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.account != nil { try decoder.handleConflictingOneOf() }
                        self.account = .email(v)
                    }
                }()
            case 3: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.account != nil { try decoder.handleConflictingOneOf() }
                        self.account = .walletID(v)
                    }
                }()
            case 4: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.account != nil { try decoder.handleConflictingOneOf() }
                        self.account = .didUri(v)
                    }
                }()
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch account {
        case .email?: try {
                guard case let .email(v)? = self.account else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 2)
            }()
        case .walletID?: try {
                guard case let .walletID(v)? = self.account else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 3)
            }()
        case .didUri?: try {
                guard case let .didUri(v)? = self.account else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 4)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Provider_V1_ListRoleAssignmentsRequest, rhs: Services_Provider_V1_ListRoleAssignmentsRequest) -> Bool {
        if lhs.account != rhs.account { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Provider_V1_ListRoleAssignmentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ListRoleAssignmentsResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "roles"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedStringField(value: &roles)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !roles.isEmpty {
            try visitor.visitRepeatedStringField(value: roles, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Provider_V1_ListRoleAssignmentsResponse, rhs: Services_Provider_V1_ListRoleAssignmentsResponse) -> Bool {
        if lhs.roles != rhs.roles { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Provider_V1_ListAvailableRolesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ListAvailableRolesRequest"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Provider_V1_ListAvailableRolesRequest, rhs: Services_Provider_V1_ListAvailableRolesRequest) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Provider_V1_ListAvailableRolesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ListAvailableRolesResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "roles"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedStringField(value: &roles)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !roles.isEmpty {
            try visitor.visitRepeatedStringField(value: roles, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Provider_V1_ListAvailableRolesResponse, rhs: Services_Provider_V1_ListAvailableRolesResponse) -> Bool {
        if lhs.roles != rhs.roles { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
