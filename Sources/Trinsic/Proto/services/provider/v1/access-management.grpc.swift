//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: services/provider/v1/access-management.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Access Management service provides methods to manage access to ecosystem resources
/// such by assigning roles and permissions to wallet accounts
///
/// Usage: instantiate `Services_Provider_V1_AccessManagementClient`, then call methods of this protocol to make API calls.
public protocol Services_Provider_V1_AccessManagementClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Services_Provider_V1_AccessManagementClientInterceptorFactoryProtocol? { get }

    func AddRoleAssignment(
        _ request: Services_Provider_V1_AddRoleAssignmentRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_AddRoleAssignmentRequest, Services_Provider_V1_AddRoleAssignmentResponse>

    func RemoveRoleAssignment(
        _ request: Services_Provider_V1_RemoveRoleAssignmentRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_RemoveRoleAssignmentRequest, Services_Provider_V1_RemoveRoleAssignmentResponse>

    func ListRoleAssignments(
        _ request: Services_Provider_V1_ListRoleAssignmentsRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_ListRoleAssignmentsRequest, Services_Provider_V1_ListRoleAssignmentsResponse>

    func ListAvailableRoles(
        _ request: Services_Provider_V1_ListAvailableRolesRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Provider_V1_ListAvailableRolesRequest, Services_Provider_V1_ListAvailableRolesResponse>
}

public extension Services_Provider_V1_AccessManagementClientProtocol {
    var serviceName: String {
        "services.provider.v1.AccessManagement"
    }

    /// Adds a role assignment to an account
    ///
    /// - Parameters:
    ///   - request: Request to send to AddRoleAssignment.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func AddRoleAssignment(
        _ request: Services_Provider_V1_AddRoleAssignmentRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_AddRoleAssignmentRequest, Services_Provider_V1_AddRoleAssignmentResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_AccessManagementClientMetadata.Methods.AddRoleAssignment.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddRoleAssignmentInterceptors() ?? []
        )
    }

    /// Removes a role assignment from the account
    ///
    /// - Parameters:
    ///   - request: Request to send to RemoveRoleAssignment.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func RemoveRoleAssignment(
        _ request: Services_Provider_V1_RemoveRoleAssignmentRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_RemoveRoleAssignmentRequest, Services_Provider_V1_RemoveRoleAssignmentResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_AccessManagementClientMetadata.Methods.RemoveRoleAssignment.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRemoveRoleAssignmentInterceptors() ?? []
        )
    }

    /// List the role assignments for the given account
    ///
    /// - Parameters:
    ///   - request: Request to send to ListRoleAssignments.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func ListRoleAssignments(
        _ request: Services_Provider_V1_ListRoleAssignmentsRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_ListRoleAssignmentsRequest, Services_Provider_V1_ListRoleAssignmentsResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_AccessManagementClientMetadata.Methods.ListRoleAssignments.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListRoleAssignmentsInterceptors() ?? []
        )
    }

    /// List the roles available in the ecosystem
    ///
    /// - Parameters:
    ///   - request: Request to send to ListAvailableRoles.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func ListAvailableRoles(
        _ request: Services_Provider_V1_ListAvailableRolesRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Provider_V1_ListAvailableRolesRequest, Services_Provider_V1_ListAvailableRolesResponse> {
        makeUnaryCall(
            path: Services_Provider_V1_AccessManagementClientMetadata.Methods.ListAvailableRoles.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListAvailableRolesInterceptors() ?? []
        )
    }
}

@available(*, deprecated)
extension Services_Provider_V1_AccessManagementClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Services_Provider_V1_AccessManagementNIOClient")
public final class Services_Provider_V1_AccessManagementClient: Services_Provider_V1_AccessManagementClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: Services_Provider_V1_AccessManagementClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: Services_Provider_V1_AccessManagementClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the services.provider.v1.AccessManagement service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Provider_V1_AccessManagementClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct Services_Provider_V1_AccessManagementNIOClient: Services_Provider_V1_AccessManagementClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Provider_V1_AccessManagementClientInterceptorFactoryProtocol?

    /// Creates a client for the services.provider.v1.AccessManagement service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Provider_V1_AccessManagementClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

/// Access Management service provides methods to manage access to ecosystem resources
/// such by assigning roles and permissions to wallet accounts
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Services_Provider_V1_AccessManagementAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Services_Provider_V1_AccessManagementClientInterceptorFactoryProtocol? { get }

    func makeAddRoleAssignmentCall(
        _ request: Services_Provider_V1_AddRoleAssignmentRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_AddRoleAssignmentRequest, Services_Provider_V1_AddRoleAssignmentResponse>

    func makeRemoveRoleAssignmentCall(
        _ request: Services_Provider_V1_RemoveRoleAssignmentRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_RemoveRoleAssignmentRequest, Services_Provider_V1_RemoveRoleAssignmentResponse>

    func makeListRoleAssignmentsCall(
        _ request: Services_Provider_V1_ListRoleAssignmentsRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_ListRoleAssignmentsRequest, Services_Provider_V1_ListRoleAssignmentsResponse>

    func makeListAvailableRolesCall(
        _ request: Services_Provider_V1_ListAvailableRolesRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_ListAvailableRolesRequest, Services_Provider_V1_ListAvailableRolesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Provider_V1_AccessManagementAsyncClientProtocol {
    static var serviceDescriptor: GRPCServiceDescriptor {
        Services_Provider_V1_AccessManagementClientMetadata.serviceDescriptor
    }

    var interceptors: Services_Provider_V1_AccessManagementClientInterceptorFactoryProtocol? {
        nil
    }

    func makeAddRoleAssignmentCall(
        _ request: Services_Provider_V1_AddRoleAssignmentRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_AddRoleAssignmentRequest, Services_Provider_V1_AddRoleAssignmentResponse> {
        makeAsyncUnaryCall(
            path: Services_Provider_V1_AccessManagementClientMetadata.Methods.AddRoleAssignment.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddRoleAssignmentInterceptors() ?? []
        )
    }

    func makeRemoveRoleAssignmentCall(
        _ request: Services_Provider_V1_RemoveRoleAssignmentRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_RemoveRoleAssignmentRequest, Services_Provider_V1_RemoveRoleAssignmentResponse> {
        makeAsyncUnaryCall(
            path: Services_Provider_V1_AccessManagementClientMetadata.Methods.RemoveRoleAssignment.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRemoveRoleAssignmentInterceptors() ?? []
        )
    }

    func makeListRoleAssignmentsCall(
        _ request: Services_Provider_V1_ListRoleAssignmentsRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_ListRoleAssignmentsRequest, Services_Provider_V1_ListRoleAssignmentsResponse> {
        makeAsyncUnaryCall(
            path: Services_Provider_V1_AccessManagementClientMetadata.Methods.ListRoleAssignments.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListRoleAssignmentsInterceptors() ?? []
        )
    }

    func makeListAvailableRolesCall(
        _ request: Services_Provider_V1_ListAvailableRolesRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Provider_V1_ListAvailableRolesRequest, Services_Provider_V1_ListAvailableRolesResponse> {
        makeAsyncUnaryCall(
            path: Services_Provider_V1_AccessManagementClientMetadata.Methods.ListAvailableRoles.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListAvailableRolesInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Provider_V1_AccessManagementAsyncClientProtocol {
    func AddRoleAssignment(
        _ request: Services_Provider_V1_AddRoleAssignmentRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Provider_V1_AddRoleAssignmentResponse {
        try await performAsyncUnaryCall(
            path: Services_Provider_V1_AccessManagementClientMetadata.Methods.AddRoleAssignment.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddRoleAssignmentInterceptors() ?? []
        )
    }

    func RemoveRoleAssignment(
        _ request: Services_Provider_V1_RemoveRoleAssignmentRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Provider_V1_RemoveRoleAssignmentResponse {
        try await performAsyncUnaryCall(
            path: Services_Provider_V1_AccessManagementClientMetadata.Methods.RemoveRoleAssignment.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRemoveRoleAssignmentInterceptors() ?? []
        )
    }

    func ListRoleAssignments(
        _ request: Services_Provider_V1_ListRoleAssignmentsRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Provider_V1_ListRoleAssignmentsResponse {
        try await performAsyncUnaryCall(
            path: Services_Provider_V1_AccessManagementClientMetadata.Methods.ListRoleAssignments.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListRoleAssignmentsInterceptors() ?? []
        )
    }

    func ListAvailableRoles(
        _ request: Services_Provider_V1_ListAvailableRolesRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Provider_V1_ListAvailableRolesResponse {
        try await performAsyncUnaryCall(
            path: Services_Provider_V1_AccessManagementClientMetadata.Methods.ListAvailableRoles.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListAvailableRolesInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Services_Provider_V1_AccessManagementAsyncClient: Services_Provider_V1_AccessManagementAsyncClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Provider_V1_AccessManagementClientInterceptorFactoryProtocol?

    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Provider_V1_AccessManagementClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

public protocol Services_Provider_V1_AccessManagementClientInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when invoking 'AddRoleAssignment'.
    func makeAddRoleAssignmentInterceptors() -> [ClientInterceptor<Services_Provider_V1_AddRoleAssignmentRequest, Services_Provider_V1_AddRoleAssignmentResponse>]

    /// - Returns: Interceptors to use when invoking 'RemoveRoleAssignment'.
    func makeRemoveRoleAssignmentInterceptors() -> [ClientInterceptor<Services_Provider_V1_RemoveRoleAssignmentRequest, Services_Provider_V1_RemoveRoleAssignmentResponse>]

    /// - Returns: Interceptors to use when invoking 'ListRoleAssignments'.
    func makeListRoleAssignmentsInterceptors() -> [ClientInterceptor<Services_Provider_V1_ListRoleAssignmentsRequest, Services_Provider_V1_ListRoleAssignmentsResponse>]

    /// - Returns: Interceptors to use when invoking 'ListAvailableRoles'.
    func makeListAvailableRolesInterceptors() -> [ClientInterceptor<Services_Provider_V1_ListAvailableRolesRequest, Services_Provider_V1_ListAvailableRolesResponse>]
}

public enum Services_Provider_V1_AccessManagementClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "AccessManagement",
        fullName: "services.provider.v1.AccessManagement",
        methods: [
            Services_Provider_V1_AccessManagementClientMetadata.Methods.AddRoleAssignment,
            Services_Provider_V1_AccessManagementClientMetadata.Methods.RemoveRoleAssignment,
            Services_Provider_V1_AccessManagementClientMetadata.Methods.ListRoleAssignments,
            Services_Provider_V1_AccessManagementClientMetadata.Methods.ListAvailableRoles,
        ]
    )

    public enum Methods {
        public static let AddRoleAssignment = GRPCMethodDescriptor(
            name: "AddRoleAssignment",
            path: "/services.provider.v1.AccessManagement/AddRoleAssignment",
            type: GRPCCallType.unary
        )

        public static let RemoveRoleAssignment = GRPCMethodDescriptor(
            name: "RemoveRoleAssignment",
            path: "/services.provider.v1.AccessManagement/RemoveRoleAssignment",
            type: GRPCCallType.unary
        )

        public static let ListRoleAssignments = GRPCMethodDescriptor(
            name: "ListRoleAssignments",
            path: "/services.provider.v1.AccessManagement/ListRoleAssignments",
            type: GRPCCallType.unary
        )

        public static let ListAvailableRoles = GRPCMethodDescriptor(
            name: "ListAvailableRoles",
            path: "/services.provider.v1.AccessManagement/ListAvailableRoles",
            type: GRPCCallType.unary
        )
    }
}

/// Access Management service provides methods to manage access to ecosystem resources
/// such by assigning roles and permissions to wallet accounts
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Services_Provider_V1_AccessManagementProvider: CallHandlerProvider {
    var interceptors: Services_Provider_V1_AccessManagementServerInterceptorFactoryProtocol? { get }

    /// Adds a role assignment to an account
    func AddRoleAssignment(request: Services_Provider_V1_AddRoleAssignmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_AddRoleAssignmentResponse>

    /// Removes a role assignment from the account
    func RemoveRoleAssignment(request: Services_Provider_V1_RemoveRoleAssignmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_RemoveRoleAssignmentResponse>

    /// List the role assignments for the given account
    func ListRoleAssignments(request: Services_Provider_V1_ListRoleAssignmentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_ListRoleAssignmentsResponse>

    /// List the roles available in the ecosystem
    func ListAvailableRoles(request: Services_Provider_V1_ListAvailableRolesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Provider_V1_ListAvailableRolesResponse>
}

public extension Services_Provider_V1_AccessManagementProvider {
    var serviceName: Substring {
        Services_Provider_V1_AccessManagementServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "AddRoleAssignment":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_AddRoleAssignmentRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_AddRoleAssignmentResponse>(),
                interceptors: interceptors?.makeAddRoleAssignmentInterceptors() ?? [],
                userFunction: AddRoleAssignment(request:context:)
            )

        case "RemoveRoleAssignment":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_RemoveRoleAssignmentRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_RemoveRoleAssignmentResponse>(),
                interceptors: interceptors?.makeRemoveRoleAssignmentInterceptors() ?? [],
                userFunction: RemoveRoleAssignment(request:context:)
            )

        case "ListRoleAssignments":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_ListRoleAssignmentsRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_ListRoleAssignmentsResponse>(),
                interceptors: interceptors?.makeListRoleAssignmentsInterceptors() ?? [],
                userFunction: ListRoleAssignments(request:context:)
            )

        case "ListAvailableRoles":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_ListAvailableRolesRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_ListAvailableRolesResponse>(),
                interceptors: interceptors?.makeListAvailableRolesInterceptors() ?? [],
                userFunction: ListAvailableRoles(request:context:)
            )

        default:
            return nil
        }
    }
}

/// Access Management service provides methods to manage access to ecosystem resources
/// such by assigning roles and permissions to wallet accounts
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Services_Provider_V1_AccessManagementAsyncProvider: CallHandlerProvider, Sendable {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Services_Provider_V1_AccessManagementServerInterceptorFactoryProtocol? { get }

    /// Adds a role assignment to an account
    func AddRoleAssignment(
        request: Services_Provider_V1_AddRoleAssignmentRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Provider_V1_AddRoleAssignmentResponse

    /// Removes a role assignment from the account
    func RemoveRoleAssignment(
        request: Services_Provider_V1_RemoveRoleAssignmentRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Provider_V1_RemoveRoleAssignmentResponse

    /// List the role assignments for the given account
    func ListRoleAssignments(
        request: Services_Provider_V1_ListRoleAssignmentsRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Provider_V1_ListRoleAssignmentsResponse

    /// List the roles available in the ecosystem
    func ListAvailableRoles(
        request: Services_Provider_V1_ListAvailableRolesRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Provider_V1_ListAvailableRolesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Provider_V1_AccessManagementAsyncProvider {
    static var serviceDescriptor: GRPCServiceDescriptor {
        Services_Provider_V1_AccessManagementServerMetadata.serviceDescriptor
    }

    var serviceName: Substring {
        Services_Provider_V1_AccessManagementServerMetadata.serviceDescriptor.fullName[...]
    }

    var interceptors: Services_Provider_V1_AccessManagementServerInterceptorFactoryProtocol? {
        nil
    }

    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "AddRoleAssignment":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_AddRoleAssignmentRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_AddRoleAssignmentResponse>(),
                interceptors: interceptors?.makeAddRoleAssignmentInterceptors() ?? [],
                wrapping: { try await self.AddRoleAssignment(request: $0, context: $1) }
            )

        case "RemoveRoleAssignment":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_RemoveRoleAssignmentRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_RemoveRoleAssignmentResponse>(),
                interceptors: interceptors?.makeRemoveRoleAssignmentInterceptors() ?? [],
                wrapping: { try await self.RemoveRoleAssignment(request: $0, context: $1) }
            )

        case "ListRoleAssignments":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_ListRoleAssignmentsRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_ListRoleAssignmentsResponse>(),
                interceptors: interceptors?.makeListRoleAssignmentsInterceptors() ?? [],
                wrapping: { try await self.ListRoleAssignments(request: $0, context: $1) }
            )

        case "ListAvailableRoles":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Provider_V1_ListAvailableRolesRequest>(),
                responseSerializer: ProtobufSerializer<Services_Provider_V1_ListAvailableRolesResponse>(),
                interceptors: interceptors?.makeListAvailableRolesInterceptors() ?? [],
                wrapping: { try await self.ListAvailableRoles(request: $0, context: $1) }
            )

        default:
            return nil
        }
    }
}

public protocol Services_Provider_V1_AccessManagementServerInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when handling 'AddRoleAssignment'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeAddRoleAssignmentInterceptors() -> [ServerInterceptor<Services_Provider_V1_AddRoleAssignmentRequest, Services_Provider_V1_AddRoleAssignmentResponse>]

    /// - Returns: Interceptors to use when handling 'RemoveRoleAssignment'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeRemoveRoleAssignmentInterceptors() -> [ServerInterceptor<Services_Provider_V1_RemoveRoleAssignmentRequest, Services_Provider_V1_RemoveRoleAssignmentResponse>]

    /// - Returns: Interceptors to use when handling 'ListRoleAssignments'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeListRoleAssignmentsInterceptors() -> [ServerInterceptor<Services_Provider_V1_ListRoleAssignmentsRequest, Services_Provider_V1_ListRoleAssignmentsResponse>]

    /// - Returns: Interceptors to use when handling 'ListAvailableRoles'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeListAvailableRolesInterceptors() -> [ServerInterceptor<Services_Provider_V1_ListAvailableRolesRequest, Services_Provider_V1_ListAvailableRolesResponse>]
}

public enum Services_Provider_V1_AccessManagementServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "AccessManagement",
        fullName: "services.provider.v1.AccessManagement",
        methods: [
            Services_Provider_V1_AccessManagementServerMetadata.Methods.AddRoleAssignment,
            Services_Provider_V1_AccessManagementServerMetadata.Methods.RemoveRoleAssignment,
            Services_Provider_V1_AccessManagementServerMetadata.Methods.ListRoleAssignments,
            Services_Provider_V1_AccessManagementServerMetadata.Methods.ListAvailableRoles,
        ]
    )

    public enum Methods {
        public static let AddRoleAssignment = GRPCMethodDescriptor(
            name: "AddRoleAssignment",
            path: "/services.provider.v1.AccessManagement/AddRoleAssignment",
            type: GRPCCallType.unary
        )

        public static let RemoveRoleAssignment = GRPCMethodDescriptor(
            name: "RemoveRoleAssignment",
            path: "/services.provider.v1.AccessManagement/RemoveRoleAssignment",
            type: GRPCCallType.unary
        )

        public static let ListRoleAssignments = GRPCMethodDescriptor(
            name: "ListRoleAssignments",
            path: "/services.provider.v1.AccessManagement/ListRoleAssignments",
            type: GRPCCallType.unary
        )

        public static let ListAvailableRoles = GRPCMethodDescriptor(
            name: "ListAvailableRoles",
            path: "/services.provider.v1.AccessManagement/ListAvailableRoles",
            type: GRPCCallType.unary
        )
    }
}
