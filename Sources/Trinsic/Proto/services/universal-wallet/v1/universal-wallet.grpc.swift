//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: services/universal-wallet/v1/universal-wallet.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Service for managing wallets
///
/// Usage: instantiate `Services_Universalwallet_V1_UniversalWalletClient`, then call methods of this protocol to make API calls.
public protocol Services_Universalwallet_V1_UniversalWalletClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? { get }

    func GetItem(
        _ request: Services_Universalwallet_V1_GetItemRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_GetItemRequest, Services_Universalwallet_V1_GetItemResponse>

    func Search(
        _ request: Services_Universalwallet_V1_SearchRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_SearchRequest, Services_Universalwallet_V1_SearchResponse>

    func InsertItem(
        _ request: Services_Universalwallet_V1_InsertItemRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_InsertItemRequest, Services_Universalwallet_V1_InsertItemResponse>

    func UpdateItem(
        _ request: Services_Universalwallet_V1_UpdateItemRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_UpdateItemRequest, Services_Universalwallet_V1_UpdateItemResponse>

    func DeleteItem(
        _ request: Services_Universalwallet_V1_DeleteItemRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_DeleteItemRequest, Services_Universalwallet_V1_DeleteItemResponse>

    func DeleteWallet(
        _ request: Services_Universalwallet_V1_DeleteWalletRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_DeleteWalletRequest, Services_Universalwallet_V1_DeleteWalletResponse>

    func CreateWallet(
        _ request: Services_Universalwallet_V1_CreateWalletRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_CreateWalletRequest, Services_Universalwallet_V1_CreateWalletResponse>

    func GetWalletInfo(
        _ request: Services_Universalwallet_V1_GetWalletInfoRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_GetWalletInfoRequest, Services_Universalwallet_V1_GetWalletInfoResponse>

    func GetMyInfo(
        _ request: Services_Universalwallet_V1_GetMyInfoRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_GetMyInfoRequest, Services_Universalwallet_V1_GetMyInfoResponse>

    func GenerateAuthToken(
        _ request: Services_Universalwallet_V1_GenerateAuthTokenRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_GenerateAuthTokenRequest, Services_Universalwallet_V1_GenerateAuthTokenResponse>

    func RevokeAuthToken(
        _ request: Services_Universalwallet_V1_RevokeAuthTokenRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_RevokeAuthTokenRequest, Services_Universalwallet_V1_RevokeAuthTokenResponse>

    func AddExternalIdentityInit(
        _ request: Services_Universalwallet_V1_AddExternalIdentityInitRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_AddExternalIdentityInitRequest, Services_Universalwallet_V1_AddExternalIdentityInitResponse>

    func AddExternalIdentityConfirm(
        _ request: Services_Universalwallet_V1_AddExternalIdentityConfirmRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_AddExternalIdentityConfirmRequest, Services_Universalwallet_V1_AddExternalIdentityConfirmResponse>

    func RemoveExternalIdentity(
        _ request: Services_Universalwallet_V1_RemoveExternalIdentityRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_RemoveExternalIdentityRequest, Services_Universalwallet_V1_RemoveExternalIdentityResponse>

    func AuthenticateInit(
        _ request: Services_Universalwallet_V1_AuthenticateInitRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_AuthenticateInitRequest, Services_Universalwallet_V1_AuthenticateInitResponse>

    func AuthenticateConfirm(
        _ request: Services_Universalwallet_V1_AuthenticateConfirmRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_AuthenticateConfirmRequest, Services_Universalwallet_V1_AuthenticateConfirmResponse>

    func AuthenticateResendCode(
        _ request: Services_Universalwallet_V1_AuthenticateResendCodeRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_AuthenticateResendCodeRequest, Services_Universalwallet_V1_AuthenticateResendCodeResponse>

    func ListWallets(
        _ request: Services_Universalwallet_V1_ListWalletsRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_ListWalletsRequest, Services_Universalwallet_V1_ListWalletsResponse>
}

public extension Services_Universalwallet_V1_UniversalWalletClientProtocol {
    var serviceName: String {
        "services.universalwallet.v1.UniversalWallet"
    }

    /// Retrieve an item from the wallet with a given item identifier
    ///
    /// - Parameters:
    ///   - request: Request to send to GetItem.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func GetItem(
        _ request: Services_Universalwallet_V1_GetItemRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_GetItemRequest, Services_Universalwallet_V1_GetItemResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetItemInterceptors() ?? []
        )
    }

    /// Search the wallet using a SQL syntax
    ///
    /// - Parameters:
    ///   - request: Request to send to Search.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func Search(
        _ request: Services_Universalwallet_V1_SearchRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_SearchRequest, Services_Universalwallet_V1_SearchResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.Search.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSearchInterceptors() ?? []
        )
    }

    /// Insert an item into the wallet
    ///
    /// - Parameters:
    ///   - request: Request to send to InsertItem.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func InsertItem(
        _ request: Services_Universalwallet_V1_InsertItemRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_InsertItemRequest, Services_Universalwallet_V1_InsertItemResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.InsertItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeInsertItemInterceptors() ?? []
        )
    }

    /// Update an item in the wallet
    ///
    /// - Parameters:
    ///   - request: Request to send to UpdateItem.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func UpdateItem(
        _ request: Services_Universalwallet_V1_UpdateItemRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_UpdateItemRequest, Services_Universalwallet_V1_UpdateItemResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.UpdateItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpdateItemInterceptors() ?? []
        )
    }

    /// Delete an item from the wallet permanently
    ///
    /// - Parameters:
    ///   - request: Request to send to DeleteItem.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func DeleteItem(
        _ request: Services_Universalwallet_V1_DeleteItemRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_DeleteItemRequest, Services_Universalwallet_V1_DeleteItemResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteItemInterceptors() ?? []
        )
    }

    /// Delete a wallet and its credentials
    ///
    /// - Parameters:
    ///   - request: Request to send to DeleteWallet.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func DeleteWallet(
        _ request: Services_Universalwallet_V1_DeleteWalletRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_DeleteWalletRequest, Services_Universalwallet_V1_DeleteWalletResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteWallet.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteWalletInterceptors() ?? []
        )
    }

    /// Create a new wallet and generate an auth token for access
    ///
    /// - Parameters:
    ///   - request: Request to send to CreateWallet.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func CreateWallet(
        _ request: Services_Universalwallet_V1_CreateWalletRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_CreateWalletRequest, Services_Universalwallet_V1_CreateWalletResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.CreateWallet.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeCreateWalletInterceptors() ?? []
        )
    }

    /// Retrieve wallet details and configuration
    ///
    /// - Parameters:
    ///   - request: Request to send to GetWalletInfo.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func GetWalletInfo(
        _ request: Services_Universalwallet_V1_GetWalletInfoRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_GetWalletInfoRequest, Services_Universalwallet_V1_GetWalletInfoResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetWalletInfo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetWalletInfoInterceptors() ?? []
        )
    }

    /// Retrieve wallet details and configuration about the currently authenticated wallet
    ///
    /// - Parameters:
    ///   - request: Request to send to GetMyInfo.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func GetMyInfo(
        _ request: Services_Universalwallet_V1_GetMyInfoRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_GetMyInfoRequest, Services_Universalwallet_V1_GetMyInfoResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetMyInfo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetMyInfoInterceptors() ?? []
        )
    }

    /// Generate new token for a given wallet and add it to the collection of known auth tokens.
    /// This endpoint requires authentication and will return a new token ID and auth token.
    /// Use this endpoint if you want to authorize another device, without having to share your
    /// existing auth token.
    ///
    /// - Parameters:
    ///   - request: Request to send to GenerateAuthToken.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func GenerateAuthToken(
        _ request: Services_Universalwallet_V1_GenerateAuthTokenRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_GenerateAuthTokenRequest, Services_Universalwallet_V1_GenerateAuthTokenResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GenerateAuthToken.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGenerateAuthTokenInterceptors() ?? []
        )
    }

    /// Revokes a previously issued auth token and updates the collection of known auth tokens.
    /// This endpoint requires authentication.
    ///
    /// - Parameters:
    ///   - request: Request to send to RevokeAuthToken.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func RevokeAuthToken(
        _ request: Services_Universalwallet_V1_RevokeAuthTokenRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_RevokeAuthTokenRequest, Services_Universalwallet_V1_RevokeAuthTokenResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.RevokeAuthToken.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRevokeAuthTokenInterceptors() ?? []
        )
    }

    /// Add new external identity to the current wallet, such as email, sms, ethereum address, etc.
    /// This identity ownership must be confirmed using `AddIdentityConfirm` via OTP, signature, etc.
    ///
    /// - Parameters:
    ///   - request: Request to send to AddExternalIdentityInit.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func AddExternalIdentityInit(
        _ request: Services_Universalwallet_V1_AddExternalIdentityInitRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_AddExternalIdentityInitRequest, Services_Universalwallet_V1_AddExternalIdentityInitResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AddExternalIdentityInit.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddExternalIdentityInitInterceptors() ?? []
        )
    }

    /// Confirm identity added to the current wallet using `AddExternalIdentityInit`
    ///
    /// - Parameters:
    ///   - request: Request to send to AddExternalIdentityConfirm.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func AddExternalIdentityConfirm(
        _ request: Services_Universalwallet_V1_AddExternalIdentityConfirmRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_AddExternalIdentityConfirmRequest, Services_Universalwallet_V1_AddExternalIdentityConfirmResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AddExternalIdentityConfirm.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddExternalIdentityConfirmInterceptors() ?? []
        )
    }

    /// Remove an external identity from the current wallet
    ///
    /// - Parameters:
    ///   - request: Request to send to RemoveExternalIdentity.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func RemoveExternalIdentity(
        _ request: Services_Universalwallet_V1_RemoveExternalIdentityRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_RemoveExternalIdentityRequest, Services_Universalwallet_V1_RemoveExternalIdentityResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.RemoveExternalIdentity.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRemoveExternalIdentityInterceptors() ?? []
        )
    }

    /// Sign-in to an already existing wallet, using an identity added that was previously registered
    /// This endpoint does not require authentication, and will return a challenge to be signed or verified
    ///
    /// - Parameters:
    ///   - request: Request to send to AuthenticateInit.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func AuthenticateInit(
        _ request: Services_Universalwallet_V1_AuthenticateInitRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_AuthenticateInitRequest, Services_Universalwallet_V1_AuthenticateInitResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AuthenticateInit.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAuthenticateInitInterceptors() ?? []
        )
    }

    /// Confirm sign-in to an already existing wallet and return authentication token
    ///
    /// - Parameters:
    ///   - request: Request to send to AuthenticateConfirm.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func AuthenticateConfirm(
        _ request: Services_Universalwallet_V1_AuthenticateConfirmRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_AuthenticateConfirmRequest, Services_Universalwallet_V1_AuthenticateConfirmResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AuthenticateConfirm.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAuthenticateConfirmInterceptors() ?? []
        )
    }

    /// Resend previous authentication code
    ///
    /// - Parameters:
    ///   - request: Request to send to AuthenticateResendCode.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func AuthenticateResendCode(
        _ request: Services_Universalwallet_V1_AuthenticateResendCodeRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_AuthenticateResendCodeRequest, Services_Universalwallet_V1_AuthenticateResendCodeResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AuthenticateResendCode.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAuthenticateResendCodeInterceptors() ?? []
        )
    }

    /// List all wallets in the ecosystem
    ///
    /// - Parameters:
    ///   - request: Request to send to ListWallets.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func ListWallets(
        _ request: Services_Universalwallet_V1_ListWalletsRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_ListWalletsRequest, Services_Universalwallet_V1_ListWalletsResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.ListWallets.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListWalletsInterceptors() ?? []
        )
    }
}

@available(*, deprecated)
extension Services_Universalwallet_V1_UniversalWalletClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Services_Universalwallet_V1_UniversalWalletNIOClient")
public final class Services_Universalwallet_V1_UniversalWalletClient: Services_Universalwallet_V1_UniversalWalletClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the services.universalwallet.v1.UniversalWallet service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct Services_Universalwallet_V1_UniversalWalletNIOClient: Services_Universalwallet_V1_UniversalWalletClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol?

    /// Creates a client for the services.universalwallet.v1.UniversalWallet service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

/// Service for managing wallets
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Services_Universalwallet_V1_UniversalWalletAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? { get }

    func makeGetItemCall(
        _ request: Services_Universalwallet_V1_GetItemRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_GetItemRequest, Services_Universalwallet_V1_GetItemResponse>

    func makeSearchCall(
        _ request: Services_Universalwallet_V1_SearchRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_SearchRequest, Services_Universalwallet_V1_SearchResponse>

    func makeInsertItemCall(
        _ request: Services_Universalwallet_V1_InsertItemRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_InsertItemRequest, Services_Universalwallet_V1_InsertItemResponse>

    func makeUpdateItemCall(
        _ request: Services_Universalwallet_V1_UpdateItemRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_UpdateItemRequest, Services_Universalwallet_V1_UpdateItemResponse>

    func makeDeleteItemCall(
        _ request: Services_Universalwallet_V1_DeleteItemRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_DeleteItemRequest, Services_Universalwallet_V1_DeleteItemResponse>

    func makeDeleteWalletCall(
        _ request: Services_Universalwallet_V1_DeleteWalletRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_DeleteWalletRequest, Services_Universalwallet_V1_DeleteWalletResponse>

    func makeCreateWalletCall(
        _ request: Services_Universalwallet_V1_CreateWalletRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_CreateWalletRequest, Services_Universalwallet_V1_CreateWalletResponse>

    func makeGetWalletInfoCall(
        _ request: Services_Universalwallet_V1_GetWalletInfoRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_GetWalletInfoRequest, Services_Universalwallet_V1_GetWalletInfoResponse>

    func makeGetMyInfoCall(
        _ request: Services_Universalwallet_V1_GetMyInfoRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_GetMyInfoRequest, Services_Universalwallet_V1_GetMyInfoResponse>

    func makeGenerateAuthTokenCall(
        _ request: Services_Universalwallet_V1_GenerateAuthTokenRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_GenerateAuthTokenRequest, Services_Universalwallet_V1_GenerateAuthTokenResponse>

    func makeRevokeAuthTokenCall(
        _ request: Services_Universalwallet_V1_RevokeAuthTokenRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_RevokeAuthTokenRequest, Services_Universalwallet_V1_RevokeAuthTokenResponse>

    func makeAddExternalIdentityInitCall(
        _ request: Services_Universalwallet_V1_AddExternalIdentityInitRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_AddExternalIdentityInitRequest, Services_Universalwallet_V1_AddExternalIdentityInitResponse>

    func makeAddExternalIdentityConfirmCall(
        _ request: Services_Universalwallet_V1_AddExternalIdentityConfirmRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_AddExternalIdentityConfirmRequest, Services_Universalwallet_V1_AddExternalIdentityConfirmResponse>

    func makeRemoveExternalIdentityCall(
        _ request: Services_Universalwallet_V1_RemoveExternalIdentityRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_RemoveExternalIdentityRequest, Services_Universalwallet_V1_RemoveExternalIdentityResponse>

    func makeAuthenticateInitCall(
        _ request: Services_Universalwallet_V1_AuthenticateInitRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_AuthenticateInitRequest, Services_Universalwallet_V1_AuthenticateInitResponse>

    func makeAuthenticateConfirmCall(
        _ request: Services_Universalwallet_V1_AuthenticateConfirmRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_AuthenticateConfirmRequest, Services_Universalwallet_V1_AuthenticateConfirmResponse>

    func makeAuthenticateResendCodeCall(
        _ request: Services_Universalwallet_V1_AuthenticateResendCodeRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_AuthenticateResendCodeRequest, Services_Universalwallet_V1_AuthenticateResendCodeResponse>

    func makeListWalletsCall(
        _ request: Services_Universalwallet_V1_ListWalletsRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_ListWalletsRequest, Services_Universalwallet_V1_ListWalletsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Universalwallet_V1_UniversalWalletAsyncClientProtocol {
    static var serviceDescriptor: GRPCServiceDescriptor {
        Services_Universalwallet_V1_UniversalWalletClientMetadata.serviceDescriptor
    }

    var interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? {
        nil
    }

    func makeGetItemCall(
        _ request: Services_Universalwallet_V1_GetItemRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_GetItemRequest, Services_Universalwallet_V1_GetItemResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetItemInterceptors() ?? []
        )
    }

    func makeSearchCall(
        _ request: Services_Universalwallet_V1_SearchRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_SearchRequest, Services_Universalwallet_V1_SearchResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.Search.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSearchInterceptors() ?? []
        )
    }

    func makeInsertItemCall(
        _ request: Services_Universalwallet_V1_InsertItemRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_InsertItemRequest, Services_Universalwallet_V1_InsertItemResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.InsertItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeInsertItemInterceptors() ?? []
        )
    }

    func makeUpdateItemCall(
        _ request: Services_Universalwallet_V1_UpdateItemRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_UpdateItemRequest, Services_Universalwallet_V1_UpdateItemResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.UpdateItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpdateItemInterceptors() ?? []
        )
    }

    func makeDeleteItemCall(
        _ request: Services_Universalwallet_V1_DeleteItemRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_DeleteItemRequest, Services_Universalwallet_V1_DeleteItemResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteItemInterceptors() ?? []
        )
    }

    func makeDeleteWalletCall(
        _ request: Services_Universalwallet_V1_DeleteWalletRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_DeleteWalletRequest, Services_Universalwallet_V1_DeleteWalletResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteWallet.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteWalletInterceptors() ?? []
        )
    }

    func makeCreateWalletCall(
        _ request: Services_Universalwallet_V1_CreateWalletRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_CreateWalletRequest, Services_Universalwallet_V1_CreateWalletResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.CreateWallet.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeCreateWalletInterceptors() ?? []
        )
    }

    func makeGetWalletInfoCall(
        _ request: Services_Universalwallet_V1_GetWalletInfoRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_GetWalletInfoRequest, Services_Universalwallet_V1_GetWalletInfoResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetWalletInfo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetWalletInfoInterceptors() ?? []
        )
    }

    func makeGetMyInfoCall(
        _ request: Services_Universalwallet_V1_GetMyInfoRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_GetMyInfoRequest, Services_Universalwallet_V1_GetMyInfoResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetMyInfo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetMyInfoInterceptors() ?? []
        )
    }

    func makeGenerateAuthTokenCall(
        _ request: Services_Universalwallet_V1_GenerateAuthTokenRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_GenerateAuthTokenRequest, Services_Universalwallet_V1_GenerateAuthTokenResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GenerateAuthToken.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGenerateAuthTokenInterceptors() ?? []
        )
    }

    func makeRevokeAuthTokenCall(
        _ request: Services_Universalwallet_V1_RevokeAuthTokenRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_RevokeAuthTokenRequest, Services_Universalwallet_V1_RevokeAuthTokenResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.RevokeAuthToken.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRevokeAuthTokenInterceptors() ?? []
        )
    }

    func makeAddExternalIdentityInitCall(
        _ request: Services_Universalwallet_V1_AddExternalIdentityInitRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_AddExternalIdentityInitRequest, Services_Universalwallet_V1_AddExternalIdentityInitResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AddExternalIdentityInit.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddExternalIdentityInitInterceptors() ?? []
        )
    }

    func makeAddExternalIdentityConfirmCall(
        _ request: Services_Universalwallet_V1_AddExternalIdentityConfirmRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_AddExternalIdentityConfirmRequest, Services_Universalwallet_V1_AddExternalIdentityConfirmResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AddExternalIdentityConfirm.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddExternalIdentityConfirmInterceptors() ?? []
        )
    }

    func makeRemoveExternalIdentityCall(
        _ request: Services_Universalwallet_V1_RemoveExternalIdentityRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_RemoveExternalIdentityRequest, Services_Universalwallet_V1_RemoveExternalIdentityResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.RemoveExternalIdentity.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRemoveExternalIdentityInterceptors() ?? []
        )
    }

    func makeAuthenticateInitCall(
        _ request: Services_Universalwallet_V1_AuthenticateInitRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_AuthenticateInitRequest, Services_Universalwallet_V1_AuthenticateInitResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AuthenticateInit.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAuthenticateInitInterceptors() ?? []
        )
    }

    func makeAuthenticateConfirmCall(
        _ request: Services_Universalwallet_V1_AuthenticateConfirmRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_AuthenticateConfirmRequest, Services_Universalwallet_V1_AuthenticateConfirmResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AuthenticateConfirm.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAuthenticateConfirmInterceptors() ?? []
        )
    }

    func makeAuthenticateResendCodeCall(
        _ request: Services_Universalwallet_V1_AuthenticateResendCodeRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_AuthenticateResendCodeRequest, Services_Universalwallet_V1_AuthenticateResendCodeResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AuthenticateResendCode.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAuthenticateResendCodeInterceptors() ?? []
        )
    }

    func makeListWalletsCall(
        _ request: Services_Universalwallet_V1_ListWalletsRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_ListWalletsRequest, Services_Universalwallet_V1_ListWalletsResponse> {
        makeAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.ListWallets.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListWalletsInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Universalwallet_V1_UniversalWalletAsyncClientProtocol {
    func GetItem(
        _ request: Services_Universalwallet_V1_GetItemRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_GetItemResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetItemInterceptors() ?? []
        )
    }

    func Search(
        _ request: Services_Universalwallet_V1_SearchRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_SearchResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.Search.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSearchInterceptors() ?? []
        )
    }

    func InsertItem(
        _ request: Services_Universalwallet_V1_InsertItemRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_InsertItemResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.InsertItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeInsertItemInterceptors() ?? []
        )
    }

    func UpdateItem(
        _ request: Services_Universalwallet_V1_UpdateItemRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_UpdateItemResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.UpdateItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpdateItemInterceptors() ?? []
        )
    }

    func DeleteItem(
        _ request: Services_Universalwallet_V1_DeleteItemRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_DeleteItemResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteItemInterceptors() ?? []
        )
    }

    func DeleteWallet(
        _ request: Services_Universalwallet_V1_DeleteWalletRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_DeleteWalletResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteWallet.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteWalletInterceptors() ?? []
        )
    }

    func CreateWallet(
        _ request: Services_Universalwallet_V1_CreateWalletRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_CreateWalletResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.CreateWallet.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeCreateWalletInterceptors() ?? []
        )
    }

    func GetWalletInfo(
        _ request: Services_Universalwallet_V1_GetWalletInfoRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_GetWalletInfoResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetWalletInfo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetWalletInfoInterceptors() ?? []
        )
    }

    func GetMyInfo(
        _ request: Services_Universalwallet_V1_GetMyInfoRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_GetMyInfoResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetMyInfo.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetMyInfoInterceptors() ?? []
        )
    }

    func GenerateAuthToken(
        _ request: Services_Universalwallet_V1_GenerateAuthTokenRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_GenerateAuthTokenResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GenerateAuthToken.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGenerateAuthTokenInterceptors() ?? []
        )
    }

    func RevokeAuthToken(
        _ request: Services_Universalwallet_V1_RevokeAuthTokenRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_RevokeAuthTokenResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.RevokeAuthToken.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRevokeAuthTokenInterceptors() ?? []
        )
    }

    func AddExternalIdentityInit(
        _ request: Services_Universalwallet_V1_AddExternalIdentityInitRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_AddExternalIdentityInitResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AddExternalIdentityInit.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddExternalIdentityInitInterceptors() ?? []
        )
    }

    func AddExternalIdentityConfirm(
        _ request: Services_Universalwallet_V1_AddExternalIdentityConfirmRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_AddExternalIdentityConfirmResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AddExternalIdentityConfirm.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAddExternalIdentityConfirmInterceptors() ?? []
        )
    }

    func RemoveExternalIdentity(
        _ request: Services_Universalwallet_V1_RemoveExternalIdentityRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_RemoveExternalIdentityResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.RemoveExternalIdentity.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRemoveExternalIdentityInterceptors() ?? []
        )
    }

    func AuthenticateInit(
        _ request: Services_Universalwallet_V1_AuthenticateInitRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_AuthenticateInitResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AuthenticateInit.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAuthenticateInitInterceptors() ?? []
        )
    }

    func AuthenticateConfirm(
        _ request: Services_Universalwallet_V1_AuthenticateConfirmRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_AuthenticateConfirmResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AuthenticateConfirm.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAuthenticateConfirmInterceptors() ?? []
        )
    }

    func AuthenticateResendCode(
        _ request: Services_Universalwallet_V1_AuthenticateResendCodeRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_AuthenticateResendCodeResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AuthenticateResendCode.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeAuthenticateResendCodeInterceptors() ?? []
        )
    }

    func ListWallets(
        _ request: Services_Universalwallet_V1_ListWalletsRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Universalwallet_V1_ListWalletsResponse {
        try await performAsyncUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.ListWallets.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListWalletsInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Services_Universalwallet_V1_UniversalWalletAsyncClient: Services_Universalwallet_V1_UniversalWalletAsyncClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol?

    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

public protocol Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when invoking 'GetItem'.
    func makeGetItemInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_GetItemRequest, Services_Universalwallet_V1_GetItemResponse>]

    /// - Returns: Interceptors to use when invoking 'Search'.
    func makeSearchInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_SearchRequest, Services_Universalwallet_V1_SearchResponse>]

    /// - Returns: Interceptors to use when invoking 'InsertItem'.
    func makeInsertItemInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_InsertItemRequest, Services_Universalwallet_V1_InsertItemResponse>]

    /// - Returns: Interceptors to use when invoking 'UpdateItem'.
    func makeUpdateItemInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_UpdateItemRequest, Services_Universalwallet_V1_UpdateItemResponse>]

    /// - Returns: Interceptors to use when invoking 'DeleteItem'.
    func makeDeleteItemInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_DeleteItemRequest, Services_Universalwallet_V1_DeleteItemResponse>]

    /// - Returns: Interceptors to use when invoking 'DeleteWallet'.
    func makeDeleteWalletInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_DeleteWalletRequest, Services_Universalwallet_V1_DeleteWalletResponse>]

    /// - Returns: Interceptors to use when invoking 'CreateWallet'.
    func makeCreateWalletInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_CreateWalletRequest, Services_Universalwallet_V1_CreateWalletResponse>]

    /// - Returns: Interceptors to use when invoking 'GetWalletInfo'.
    func makeGetWalletInfoInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_GetWalletInfoRequest, Services_Universalwallet_V1_GetWalletInfoResponse>]

    /// - Returns: Interceptors to use when invoking 'GetMyInfo'.
    func makeGetMyInfoInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_GetMyInfoRequest, Services_Universalwallet_V1_GetMyInfoResponse>]

    /// - Returns: Interceptors to use when invoking 'GenerateAuthToken'.
    func makeGenerateAuthTokenInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_GenerateAuthTokenRequest, Services_Universalwallet_V1_GenerateAuthTokenResponse>]

    /// - Returns: Interceptors to use when invoking 'RevokeAuthToken'.
    func makeRevokeAuthTokenInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_RevokeAuthTokenRequest, Services_Universalwallet_V1_RevokeAuthTokenResponse>]

    /// - Returns: Interceptors to use when invoking 'AddExternalIdentityInit'.
    func makeAddExternalIdentityInitInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_AddExternalIdentityInitRequest, Services_Universalwallet_V1_AddExternalIdentityInitResponse>]

    /// - Returns: Interceptors to use when invoking 'AddExternalIdentityConfirm'.
    func makeAddExternalIdentityConfirmInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_AddExternalIdentityConfirmRequest, Services_Universalwallet_V1_AddExternalIdentityConfirmResponse>]

    /// - Returns: Interceptors to use when invoking 'RemoveExternalIdentity'.
    func makeRemoveExternalIdentityInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_RemoveExternalIdentityRequest, Services_Universalwallet_V1_RemoveExternalIdentityResponse>]

    /// - Returns: Interceptors to use when invoking 'AuthenticateInit'.
    func makeAuthenticateInitInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_AuthenticateInitRequest, Services_Universalwallet_V1_AuthenticateInitResponse>]

    /// - Returns: Interceptors to use when invoking 'AuthenticateConfirm'.
    func makeAuthenticateConfirmInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_AuthenticateConfirmRequest, Services_Universalwallet_V1_AuthenticateConfirmResponse>]

    /// - Returns: Interceptors to use when invoking 'AuthenticateResendCode'.
    func makeAuthenticateResendCodeInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_AuthenticateResendCodeRequest, Services_Universalwallet_V1_AuthenticateResendCodeResponse>]

    /// - Returns: Interceptors to use when invoking 'ListWallets'.
    func makeListWalletsInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_ListWalletsRequest, Services_Universalwallet_V1_ListWalletsResponse>]
}

public enum Services_Universalwallet_V1_UniversalWalletClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "UniversalWallet",
        fullName: "services.universalwallet.v1.UniversalWallet",
        methods: [
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetItem,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.Search,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.InsertItem,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.UpdateItem,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteItem,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteWallet,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.CreateWallet,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetWalletInfo,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetMyInfo,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GenerateAuthToken,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.RevokeAuthToken,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AddExternalIdentityInit,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AddExternalIdentityConfirm,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.RemoveExternalIdentity,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AuthenticateInit,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AuthenticateConfirm,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.AuthenticateResendCode,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.ListWallets,
        ]
    )

    public enum Methods {
        public static let GetItem = GRPCMethodDescriptor(
            name: "GetItem",
            path: "/services.universalwallet.v1.UniversalWallet/GetItem",
            type: GRPCCallType.unary
        )

        public static let Search = GRPCMethodDescriptor(
            name: "Search",
            path: "/services.universalwallet.v1.UniversalWallet/Search",
            type: GRPCCallType.unary
        )

        public static let InsertItem = GRPCMethodDescriptor(
            name: "InsertItem",
            path: "/services.universalwallet.v1.UniversalWallet/InsertItem",
            type: GRPCCallType.unary
        )

        public static let UpdateItem = GRPCMethodDescriptor(
            name: "UpdateItem",
            path: "/services.universalwallet.v1.UniversalWallet/UpdateItem",
            type: GRPCCallType.unary
        )

        public static let DeleteItem = GRPCMethodDescriptor(
            name: "DeleteItem",
            path: "/services.universalwallet.v1.UniversalWallet/DeleteItem",
            type: GRPCCallType.unary
        )

        public static let DeleteWallet = GRPCMethodDescriptor(
            name: "DeleteWallet",
            path: "/services.universalwallet.v1.UniversalWallet/DeleteWallet",
            type: GRPCCallType.unary
        )

        public static let CreateWallet = GRPCMethodDescriptor(
            name: "CreateWallet",
            path: "/services.universalwallet.v1.UniversalWallet/CreateWallet",
            type: GRPCCallType.unary
        )

        public static let GetWalletInfo = GRPCMethodDescriptor(
            name: "GetWalletInfo",
            path: "/services.universalwallet.v1.UniversalWallet/GetWalletInfo",
            type: GRPCCallType.unary
        )

        public static let GetMyInfo = GRPCMethodDescriptor(
            name: "GetMyInfo",
            path: "/services.universalwallet.v1.UniversalWallet/GetMyInfo",
            type: GRPCCallType.unary
        )

        public static let GenerateAuthToken = GRPCMethodDescriptor(
            name: "GenerateAuthToken",
            path: "/services.universalwallet.v1.UniversalWallet/GenerateAuthToken",
            type: GRPCCallType.unary
        )

        public static let RevokeAuthToken = GRPCMethodDescriptor(
            name: "RevokeAuthToken",
            path: "/services.universalwallet.v1.UniversalWallet/RevokeAuthToken",
            type: GRPCCallType.unary
        )

        public static let AddExternalIdentityInit = GRPCMethodDescriptor(
            name: "AddExternalIdentityInit",
            path: "/services.universalwallet.v1.UniversalWallet/AddExternalIdentityInit",
            type: GRPCCallType.unary
        )

        public static let AddExternalIdentityConfirm = GRPCMethodDescriptor(
            name: "AddExternalIdentityConfirm",
            path: "/services.universalwallet.v1.UniversalWallet/AddExternalIdentityConfirm",
            type: GRPCCallType.unary
        )

        public static let RemoveExternalIdentity = GRPCMethodDescriptor(
            name: "RemoveExternalIdentity",
            path: "/services.universalwallet.v1.UniversalWallet/RemoveExternalIdentity",
            type: GRPCCallType.unary
        )

        public static let AuthenticateInit = GRPCMethodDescriptor(
            name: "AuthenticateInit",
            path: "/services.universalwallet.v1.UniversalWallet/AuthenticateInit",
            type: GRPCCallType.unary
        )

        public static let AuthenticateConfirm = GRPCMethodDescriptor(
            name: "AuthenticateConfirm",
            path: "/services.universalwallet.v1.UniversalWallet/AuthenticateConfirm",
            type: GRPCCallType.unary
        )

        public static let AuthenticateResendCode = GRPCMethodDescriptor(
            name: "AuthenticateResendCode",
            path: "/services.universalwallet.v1.UniversalWallet/AuthenticateResendCode",
            type: GRPCCallType.unary
        )

        public static let ListWallets = GRPCMethodDescriptor(
            name: "ListWallets",
            path: "/services.universalwallet.v1.UniversalWallet/ListWallets",
            type: GRPCCallType.unary
        )
    }
}

/// Service for managing wallets
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Services_Universalwallet_V1_UniversalWalletProvider: CallHandlerProvider {
    var interceptors: Services_Universalwallet_V1_UniversalWalletServerInterceptorFactoryProtocol? { get }

    /// Retrieve an item from the wallet with a given item identifier
    func GetItem(request: Services_Universalwallet_V1_GetItemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_GetItemResponse>

    /// Search the wallet using a SQL syntax
    func Search(request: Services_Universalwallet_V1_SearchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_SearchResponse>

    /// Insert an item into the wallet
    func InsertItem(request: Services_Universalwallet_V1_InsertItemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_InsertItemResponse>

    /// Update an item in the wallet
    func UpdateItem(request: Services_Universalwallet_V1_UpdateItemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_UpdateItemResponse>

    /// Delete an item from the wallet permanently
    func DeleteItem(request: Services_Universalwallet_V1_DeleteItemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_DeleteItemResponse>

    /// Delete a wallet and its credentials
    func DeleteWallet(request: Services_Universalwallet_V1_DeleteWalletRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_DeleteWalletResponse>

    /// Create a new wallet and generate an auth token for access
    func CreateWallet(request: Services_Universalwallet_V1_CreateWalletRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_CreateWalletResponse>

    /// Retrieve wallet details and configuration
    func GetWalletInfo(request: Services_Universalwallet_V1_GetWalletInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_GetWalletInfoResponse>

    /// Retrieve wallet details and configuration about the currently authenticated wallet
    func GetMyInfo(request: Services_Universalwallet_V1_GetMyInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_GetMyInfoResponse>

    /// Generate new token for a given wallet and add it to the collection of known auth tokens.
    /// This endpoint requires authentication and will return a new token ID and auth token.
    /// Use this endpoint if you want to authorize another device, without having to share your
    /// existing auth token.
    func GenerateAuthToken(request: Services_Universalwallet_V1_GenerateAuthTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_GenerateAuthTokenResponse>

    /// Revokes a previously issued auth token and updates the collection of known auth tokens.
    /// This endpoint requires authentication.
    func RevokeAuthToken(request: Services_Universalwallet_V1_RevokeAuthTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_RevokeAuthTokenResponse>

    /// Add new external identity to the current wallet, such as email, sms, ethereum address, etc.
    /// This identity ownership must be confirmed using `AddIdentityConfirm` via OTP, signature, etc.
    func AddExternalIdentityInit(request: Services_Universalwallet_V1_AddExternalIdentityInitRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_AddExternalIdentityInitResponse>

    /// Confirm identity added to the current wallet using `AddExternalIdentityInit`
    func AddExternalIdentityConfirm(request: Services_Universalwallet_V1_AddExternalIdentityConfirmRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_AddExternalIdentityConfirmResponse>

    /// Remove an external identity from the current wallet
    func RemoveExternalIdentity(request: Services_Universalwallet_V1_RemoveExternalIdentityRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_RemoveExternalIdentityResponse>

    /// Sign-in to an already existing wallet, using an identity added that was previously registered
    /// This endpoint does not require authentication, and will return a challenge to be signed or verified
    func AuthenticateInit(request: Services_Universalwallet_V1_AuthenticateInitRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_AuthenticateInitResponse>

    /// Confirm sign-in to an already existing wallet and return authentication token
    func AuthenticateConfirm(request: Services_Universalwallet_V1_AuthenticateConfirmRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_AuthenticateConfirmResponse>

    /// Resend previous authentication code
    func AuthenticateResendCode(request: Services_Universalwallet_V1_AuthenticateResendCodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_AuthenticateResendCodeResponse>

    /// List all wallets in the ecosystem
    func ListWallets(request: Services_Universalwallet_V1_ListWalletsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_ListWalletsResponse>
}

public extension Services_Universalwallet_V1_UniversalWalletProvider {
    var serviceName: Substring {
        Services_Universalwallet_V1_UniversalWalletServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "GetItem":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_GetItemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_GetItemResponse>(),
                interceptors: interceptors?.makeGetItemInterceptors() ?? [],
                userFunction: GetItem(request:context:)
            )

        case "Search":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_SearchRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_SearchResponse>(),
                interceptors: interceptors?.makeSearchInterceptors() ?? [],
                userFunction: Search(request:context:)
            )

        case "InsertItem":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_InsertItemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_InsertItemResponse>(),
                interceptors: interceptors?.makeInsertItemInterceptors() ?? [],
                userFunction: InsertItem(request:context:)
            )

        case "UpdateItem":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_UpdateItemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_UpdateItemResponse>(),
                interceptors: interceptors?.makeUpdateItemInterceptors() ?? [],
                userFunction: UpdateItem(request:context:)
            )

        case "DeleteItem":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_DeleteItemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_DeleteItemResponse>(),
                interceptors: interceptors?.makeDeleteItemInterceptors() ?? [],
                userFunction: DeleteItem(request:context:)
            )

        case "DeleteWallet":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_DeleteWalletRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_DeleteWalletResponse>(),
                interceptors: interceptors?.makeDeleteWalletInterceptors() ?? [],
                userFunction: DeleteWallet(request:context:)
            )

        case "CreateWallet":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_CreateWalletRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_CreateWalletResponse>(),
                interceptors: interceptors?.makeCreateWalletInterceptors() ?? [],
                userFunction: CreateWallet(request:context:)
            )

        case "GetWalletInfo":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_GetWalletInfoRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_GetWalletInfoResponse>(),
                interceptors: interceptors?.makeGetWalletInfoInterceptors() ?? [],
                userFunction: GetWalletInfo(request:context:)
            )

        case "GetMyInfo":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_GetMyInfoRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_GetMyInfoResponse>(),
                interceptors: interceptors?.makeGetMyInfoInterceptors() ?? [],
                userFunction: GetMyInfo(request:context:)
            )

        case "GenerateAuthToken":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_GenerateAuthTokenRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_GenerateAuthTokenResponse>(),
                interceptors: interceptors?.makeGenerateAuthTokenInterceptors() ?? [],
                userFunction: GenerateAuthToken(request:context:)
            )

        case "RevokeAuthToken":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_RevokeAuthTokenRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_RevokeAuthTokenResponse>(),
                interceptors: interceptors?.makeRevokeAuthTokenInterceptors() ?? [],
                userFunction: RevokeAuthToken(request:context:)
            )

        case "AddExternalIdentityInit":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_AddExternalIdentityInitRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_AddExternalIdentityInitResponse>(),
                interceptors: interceptors?.makeAddExternalIdentityInitInterceptors() ?? [],
                userFunction: AddExternalIdentityInit(request:context:)
            )

        case "AddExternalIdentityConfirm":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_AddExternalIdentityConfirmRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_AddExternalIdentityConfirmResponse>(),
                interceptors: interceptors?.makeAddExternalIdentityConfirmInterceptors() ?? [],
                userFunction: AddExternalIdentityConfirm(request:context:)
            )

        case "RemoveExternalIdentity":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_RemoveExternalIdentityRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_RemoveExternalIdentityResponse>(),
                interceptors: interceptors?.makeRemoveExternalIdentityInterceptors() ?? [],
                userFunction: RemoveExternalIdentity(request:context:)
            )

        case "AuthenticateInit":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_AuthenticateInitRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_AuthenticateInitResponse>(),
                interceptors: interceptors?.makeAuthenticateInitInterceptors() ?? [],
                userFunction: AuthenticateInit(request:context:)
            )

        case "AuthenticateConfirm":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_AuthenticateConfirmRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_AuthenticateConfirmResponse>(),
                interceptors: interceptors?.makeAuthenticateConfirmInterceptors() ?? [],
                userFunction: AuthenticateConfirm(request:context:)
            )

        case "AuthenticateResendCode":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_AuthenticateResendCodeRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_AuthenticateResendCodeResponse>(),
                interceptors: interceptors?.makeAuthenticateResendCodeInterceptors() ?? [],
                userFunction: AuthenticateResendCode(request:context:)
            )

        case "ListWallets":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_ListWalletsRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_ListWalletsResponse>(),
                interceptors: interceptors?.makeListWalletsInterceptors() ?? [],
                userFunction: ListWallets(request:context:)
            )

        default:
            return nil
        }
    }
}

/// Service for managing wallets
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Services_Universalwallet_V1_UniversalWalletAsyncProvider: CallHandlerProvider, Sendable {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Services_Universalwallet_V1_UniversalWalletServerInterceptorFactoryProtocol? { get }

    /// Retrieve an item from the wallet with a given item identifier
    func GetItem(
        request: Services_Universalwallet_V1_GetItemRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_GetItemResponse

    /// Search the wallet using a SQL syntax
    func Search(
        request: Services_Universalwallet_V1_SearchRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_SearchResponse

    /// Insert an item into the wallet
    func InsertItem(
        request: Services_Universalwallet_V1_InsertItemRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_InsertItemResponse

    /// Update an item in the wallet
    func UpdateItem(
        request: Services_Universalwallet_V1_UpdateItemRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_UpdateItemResponse

    /// Delete an item from the wallet permanently
    func DeleteItem(
        request: Services_Universalwallet_V1_DeleteItemRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_DeleteItemResponse

    /// Delete a wallet and its credentials
    func DeleteWallet(
        request: Services_Universalwallet_V1_DeleteWalletRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_DeleteWalletResponse

    /// Create a new wallet and generate an auth token for access
    func CreateWallet(
        request: Services_Universalwallet_V1_CreateWalletRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_CreateWalletResponse

    /// Retrieve wallet details and configuration
    func GetWalletInfo(
        request: Services_Universalwallet_V1_GetWalletInfoRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_GetWalletInfoResponse

    /// Retrieve wallet details and configuration about the currently authenticated wallet
    func GetMyInfo(
        request: Services_Universalwallet_V1_GetMyInfoRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_GetMyInfoResponse

    /// Generate new token for a given wallet and add it to the collection of known auth tokens.
    /// This endpoint requires authentication and will return a new token ID and auth token.
    /// Use this endpoint if you want to authorize another device, without having to share your
    /// existing auth token.
    func GenerateAuthToken(
        request: Services_Universalwallet_V1_GenerateAuthTokenRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_GenerateAuthTokenResponse

    /// Revokes a previously issued auth token and updates the collection of known auth tokens.
    /// This endpoint requires authentication.
    func RevokeAuthToken(
        request: Services_Universalwallet_V1_RevokeAuthTokenRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_RevokeAuthTokenResponse

    /// Add new external identity to the current wallet, such as email, sms, ethereum address, etc.
    /// This identity ownership must be confirmed using `AddIdentityConfirm` via OTP, signature, etc.
    func AddExternalIdentityInit(
        request: Services_Universalwallet_V1_AddExternalIdentityInitRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_AddExternalIdentityInitResponse

    /// Confirm identity added to the current wallet using `AddExternalIdentityInit`
    func AddExternalIdentityConfirm(
        request: Services_Universalwallet_V1_AddExternalIdentityConfirmRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_AddExternalIdentityConfirmResponse

    /// Remove an external identity from the current wallet
    func RemoveExternalIdentity(
        request: Services_Universalwallet_V1_RemoveExternalIdentityRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_RemoveExternalIdentityResponse

    /// Sign-in to an already existing wallet, using an identity added that was previously registered
    /// This endpoint does not require authentication, and will return a challenge to be signed or verified
    func AuthenticateInit(
        request: Services_Universalwallet_V1_AuthenticateInitRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_AuthenticateInitResponse

    /// Confirm sign-in to an already existing wallet and return authentication token
    func AuthenticateConfirm(
        request: Services_Universalwallet_V1_AuthenticateConfirmRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_AuthenticateConfirmResponse

    /// Resend previous authentication code
    func AuthenticateResendCode(
        request: Services_Universalwallet_V1_AuthenticateResendCodeRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_AuthenticateResendCodeResponse

    /// List all wallets in the ecosystem
    func ListWallets(
        request: Services_Universalwallet_V1_ListWalletsRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Universalwallet_V1_ListWalletsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Universalwallet_V1_UniversalWalletAsyncProvider {
    static var serviceDescriptor: GRPCServiceDescriptor {
        Services_Universalwallet_V1_UniversalWalletServerMetadata.serviceDescriptor
    }

    var serviceName: Substring {
        Services_Universalwallet_V1_UniversalWalletServerMetadata.serviceDescriptor.fullName[...]
    }

    var interceptors: Services_Universalwallet_V1_UniversalWalletServerInterceptorFactoryProtocol? {
        nil
    }

    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "GetItem":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_GetItemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_GetItemResponse>(),
                interceptors: interceptors?.makeGetItemInterceptors() ?? [],
                wrapping: { try await self.GetItem(request: $0, context: $1) }
            )

        case "Search":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_SearchRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_SearchResponse>(),
                interceptors: interceptors?.makeSearchInterceptors() ?? [],
                wrapping: { try await self.Search(request: $0, context: $1) }
            )

        case "InsertItem":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_InsertItemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_InsertItemResponse>(),
                interceptors: interceptors?.makeInsertItemInterceptors() ?? [],
                wrapping: { try await self.InsertItem(request: $0, context: $1) }
            )

        case "UpdateItem":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_UpdateItemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_UpdateItemResponse>(),
                interceptors: interceptors?.makeUpdateItemInterceptors() ?? [],
                wrapping: { try await self.UpdateItem(request: $0, context: $1) }
            )

        case "DeleteItem":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_DeleteItemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_DeleteItemResponse>(),
                interceptors: interceptors?.makeDeleteItemInterceptors() ?? [],
                wrapping: { try await self.DeleteItem(request: $0, context: $1) }
            )

        case "DeleteWallet":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_DeleteWalletRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_DeleteWalletResponse>(),
                interceptors: interceptors?.makeDeleteWalletInterceptors() ?? [],
                wrapping: { try await self.DeleteWallet(request: $0, context: $1) }
            )

        case "CreateWallet":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_CreateWalletRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_CreateWalletResponse>(),
                interceptors: interceptors?.makeCreateWalletInterceptors() ?? [],
                wrapping: { try await self.CreateWallet(request: $0, context: $1) }
            )

        case "GetWalletInfo":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_GetWalletInfoRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_GetWalletInfoResponse>(),
                interceptors: interceptors?.makeGetWalletInfoInterceptors() ?? [],
                wrapping: { try await self.GetWalletInfo(request: $0, context: $1) }
            )

        case "GetMyInfo":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_GetMyInfoRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_GetMyInfoResponse>(),
                interceptors: interceptors?.makeGetMyInfoInterceptors() ?? [],
                wrapping: { try await self.GetMyInfo(request: $0, context: $1) }
            )

        case "GenerateAuthToken":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_GenerateAuthTokenRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_GenerateAuthTokenResponse>(),
                interceptors: interceptors?.makeGenerateAuthTokenInterceptors() ?? [],
                wrapping: { try await self.GenerateAuthToken(request: $0, context: $1) }
            )

        case "RevokeAuthToken":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_RevokeAuthTokenRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_RevokeAuthTokenResponse>(),
                interceptors: interceptors?.makeRevokeAuthTokenInterceptors() ?? [],
                wrapping: { try await self.RevokeAuthToken(request: $0, context: $1) }
            )

        case "AddExternalIdentityInit":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_AddExternalIdentityInitRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_AddExternalIdentityInitResponse>(),
                interceptors: interceptors?.makeAddExternalIdentityInitInterceptors() ?? [],
                wrapping: { try await self.AddExternalIdentityInit(request: $0, context: $1) }
            )

        case "AddExternalIdentityConfirm":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_AddExternalIdentityConfirmRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_AddExternalIdentityConfirmResponse>(),
                interceptors: interceptors?.makeAddExternalIdentityConfirmInterceptors() ?? [],
                wrapping: { try await self.AddExternalIdentityConfirm(request: $0, context: $1) }
            )

        case "RemoveExternalIdentity":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_RemoveExternalIdentityRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_RemoveExternalIdentityResponse>(),
                interceptors: interceptors?.makeRemoveExternalIdentityInterceptors() ?? [],
                wrapping: { try await self.RemoveExternalIdentity(request: $0, context: $1) }
            )

        case "AuthenticateInit":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_AuthenticateInitRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_AuthenticateInitResponse>(),
                interceptors: interceptors?.makeAuthenticateInitInterceptors() ?? [],
                wrapping: { try await self.AuthenticateInit(request: $0, context: $1) }
            )

        case "AuthenticateConfirm":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_AuthenticateConfirmRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_AuthenticateConfirmResponse>(),
                interceptors: interceptors?.makeAuthenticateConfirmInterceptors() ?? [],
                wrapping: { try await self.AuthenticateConfirm(request: $0, context: $1) }
            )

        case "AuthenticateResendCode":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_AuthenticateResendCodeRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_AuthenticateResendCodeResponse>(),
                interceptors: interceptors?.makeAuthenticateResendCodeInterceptors() ?? [],
                wrapping: { try await self.AuthenticateResendCode(request: $0, context: $1) }
            )

        case "ListWallets":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_ListWalletsRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_ListWalletsResponse>(),
                interceptors: interceptors?.makeListWalletsInterceptors() ?? [],
                wrapping: { try await self.ListWallets(request: $0, context: $1) }
            )

        default:
            return nil
        }
    }
}

public protocol Services_Universalwallet_V1_UniversalWalletServerInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when handling 'GetItem'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetItemInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_GetItemRequest, Services_Universalwallet_V1_GetItemResponse>]

    /// - Returns: Interceptors to use when handling 'Search'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeSearchInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_SearchRequest, Services_Universalwallet_V1_SearchResponse>]

    /// - Returns: Interceptors to use when handling 'InsertItem'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeInsertItemInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_InsertItemRequest, Services_Universalwallet_V1_InsertItemResponse>]

    /// - Returns: Interceptors to use when handling 'UpdateItem'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeUpdateItemInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_UpdateItemRequest, Services_Universalwallet_V1_UpdateItemResponse>]

    /// - Returns: Interceptors to use when handling 'DeleteItem'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeDeleteItemInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_DeleteItemRequest, Services_Universalwallet_V1_DeleteItemResponse>]

    /// - Returns: Interceptors to use when handling 'DeleteWallet'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeDeleteWalletInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_DeleteWalletRequest, Services_Universalwallet_V1_DeleteWalletResponse>]

    /// - Returns: Interceptors to use when handling 'CreateWallet'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeCreateWalletInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_CreateWalletRequest, Services_Universalwallet_V1_CreateWalletResponse>]

    /// - Returns: Interceptors to use when handling 'GetWalletInfo'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetWalletInfoInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_GetWalletInfoRequest, Services_Universalwallet_V1_GetWalletInfoResponse>]

    /// - Returns: Interceptors to use when handling 'GetMyInfo'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetMyInfoInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_GetMyInfoRequest, Services_Universalwallet_V1_GetMyInfoResponse>]

    /// - Returns: Interceptors to use when handling 'GenerateAuthToken'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGenerateAuthTokenInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_GenerateAuthTokenRequest, Services_Universalwallet_V1_GenerateAuthTokenResponse>]

    /// - Returns: Interceptors to use when handling 'RevokeAuthToken'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeRevokeAuthTokenInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_RevokeAuthTokenRequest, Services_Universalwallet_V1_RevokeAuthTokenResponse>]

    /// - Returns: Interceptors to use when handling 'AddExternalIdentityInit'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeAddExternalIdentityInitInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_AddExternalIdentityInitRequest, Services_Universalwallet_V1_AddExternalIdentityInitResponse>]

    /// - Returns: Interceptors to use when handling 'AddExternalIdentityConfirm'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeAddExternalIdentityConfirmInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_AddExternalIdentityConfirmRequest, Services_Universalwallet_V1_AddExternalIdentityConfirmResponse>]

    /// - Returns: Interceptors to use when handling 'RemoveExternalIdentity'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeRemoveExternalIdentityInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_RemoveExternalIdentityRequest, Services_Universalwallet_V1_RemoveExternalIdentityResponse>]

    /// - Returns: Interceptors to use when handling 'AuthenticateInit'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeAuthenticateInitInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_AuthenticateInitRequest, Services_Universalwallet_V1_AuthenticateInitResponse>]

    /// - Returns: Interceptors to use when handling 'AuthenticateConfirm'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeAuthenticateConfirmInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_AuthenticateConfirmRequest, Services_Universalwallet_V1_AuthenticateConfirmResponse>]

    /// - Returns: Interceptors to use when handling 'AuthenticateResendCode'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeAuthenticateResendCodeInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_AuthenticateResendCodeRequest, Services_Universalwallet_V1_AuthenticateResendCodeResponse>]

    /// - Returns: Interceptors to use when handling 'ListWallets'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeListWalletsInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_ListWalletsRequest, Services_Universalwallet_V1_ListWalletsResponse>]
}

public enum Services_Universalwallet_V1_UniversalWalletServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "UniversalWallet",
        fullName: "services.universalwallet.v1.UniversalWallet",
        methods: [
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.GetItem,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.Search,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.InsertItem,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.UpdateItem,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.DeleteItem,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.DeleteWallet,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.CreateWallet,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.GetWalletInfo,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.GetMyInfo,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.GenerateAuthToken,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.RevokeAuthToken,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.AddExternalIdentityInit,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.AddExternalIdentityConfirm,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.RemoveExternalIdentity,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.AuthenticateInit,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.AuthenticateConfirm,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.AuthenticateResendCode,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.ListWallets,
        ]
    )

    public enum Methods {
        public static let GetItem = GRPCMethodDescriptor(
            name: "GetItem",
            path: "/services.universalwallet.v1.UniversalWallet/GetItem",
            type: GRPCCallType.unary
        )

        public static let Search = GRPCMethodDescriptor(
            name: "Search",
            path: "/services.universalwallet.v1.UniversalWallet/Search",
            type: GRPCCallType.unary
        )

        public static let InsertItem = GRPCMethodDescriptor(
            name: "InsertItem",
            path: "/services.universalwallet.v1.UniversalWallet/InsertItem",
            type: GRPCCallType.unary
        )

        public static let UpdateItem = GRPCMethodDescriptor(
            name: "UpdateItem",
            path: "/services.universalwallet.v1.UniversalWallet/UpdateItem",
            type: GRPCCallType.unary
        )

        public static let DeleteItem = GRPCMethodDescriptor(
            name: "DeleteItem",
            path: "/services.universalwallet.v1.UniversalWallet/DeleteItem",
            type: GRPCCallType.unary
        )

        public static let DeleteWallet = GRPCMethodDescriptor(
            name: "DeleteWallet",
            path: "/services.universalwallet.v1.UniversalWallet/DeleteWallet",
            type: GRPCCallType.unary
        )

        public static let CreateWallet = GRPCMethodDescriptor(
            name: "CreateWallet",
            path: "/services.universalwallet.v1.UniversalWallet/CreateWallet",
            type: GRPCCallType.unary
        )

        public static let GetWalletInfo = GRPCMethodDescriptor(
            name: "GetWalletInfo",
            path: "/services.universalwallet.v1.UniversalWallet/GetWalletInfo",
            type: GRPCCallType.unary
        )

        public static let GetMyInfo = GRPCMethodDescriptor(
            name: "GetMyInfo",
            path: "/services.universalwallet.v1.UniversalWallet/GetMyInfo",
            type: GRPCCallType.unary
        )

        public static let GenerateAuthToken = GRPCMethodDescriptor(
            name: "GenerateAuthToken",
            path: "/services.universalwallet.v1.UniversalWallet/GenerateAuthToken",
            type: GRPCCallType.unary
        )

        public static let RevokeAuthToken = GRPCMethodDescriptor(
            name: "RevokeAuthToken",
            path: "/services.universalwallet.v1.UniversalWallet/RevokeAuthToken",
            type: GRPCCallType.unary
        )

        public static let AddExternalIdentityInit = GRPCMethodDescriptor(
            name: "AddExternalIdentityInit",
            path: "/services.universalwallet.v1.UniversalWallet/AddExternalIdentityInit",
            type: GRPCCallType.unary
        )

        public static let AddExternalIdentityConfirm = GRPCMethodDescriptor(
            name: "AddExternalIdentityConfirm",
            path: "/services.universalwallet.v1.UniversalWallet/AddExternalIdentityConfirm",
            type: GRPCCallType.unary
        )

        public static let RemoveExternalIdentity = GRPCMethodDescriptor(
            name: "RemoveExternalIdentity",
            path: "/services.universalwallet.v1.UniversalWallet/RemoveExternalIdentity",
            type: GRPCCallType.unary
        )

        public static let AuthenticateInit = GRPCMethodDescriptor(
            name: "AuthenticateInit",
            path: "/services.universalwallet.v1.UniversalWallet/AuthenticateInit",
            type: GRPCCallType.unary
        )

        public static let AuthenticateConfirm = GRPCMethodDescriptor(
            name: "AuthenticateConfirm",
            path: "/services.universalwallet.v1.UniversalWallet/AuthenticateConfirm",
            type: GRPCCallType.unary
        )

        public static let AuthenticateResendCode = GRPCMethodDescriptor(
            name: "AuthenticateResendCode",
            path: "/services.universalwallet.v1.UniversalWallet/AuthenticateResendCode",
            type: GRPCCallType.unary
        )

        public static let ListWallets = GRPCMethodDescriptor(
            name: "ListWallets",
            path: "/services.universalwallet.v1.UniversalWallet/ListWallets",
            type: GRPCCallType.unary
        )
    }
}
