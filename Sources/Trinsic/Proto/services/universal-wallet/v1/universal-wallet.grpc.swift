//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: services/universal-wallet/v1/universal-wallet.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `Services_Universalwallet_V1_UniversalWalletClient`, then call methods of this protocol to make API calls.
public protocol Services_Universalwallet_V1_UniversalWalletClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? { get }

    func GetItem(
        _ request: Services_Universalwallet_V1_GetItemRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_GetItemRequest, Services_Universalwallet_V1_GetItemResponse>

    func Search(
        _ request: Services_Universalwallet_V1_SearchRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_SearchRequest, Services_Universalwallet_V1_SearchResponse>

    func InsertItem(
        _ request: Services_Universalwallet_V1_InsertItemRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_InsertItemRequest, Services_Universalwallet_V1_InsertItemResponse>

    func UpdateItem(
        _ request: Services_Universalwallet_V1_UpdateItemRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_UpdateItemRequest, Services_Universalwallet_V1_UpdateItemResponse>

    func DeleteItem(
        _ request: Services_Universalwallet_V1_DeleteItemRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_DeleteItemRequest, Services_Universalwallet_V1_DeleteItemResponse>

    func DeleteWallet(
        _ request: Services_Universalwallet_V1_DeleteWalletRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Universalwallet_V1_DeleteWalletRequest, Services_Universalwallet_V1_DeleteWalletResponse>
}

public extension Services_Universalwallet_V1_UniversalWalletClientProtocol {
    var serviceName: String {
        "services.universalwallet.v1.UniversalWallet"
    }

    /// Retrieve an item from the wallet with a given item identifier
    ///
    /// - Parameters:
    ///   - request: Request to send to GetItem.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func GetItem(
        _ request: Services_Universalwallet_V1_GetItemRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_GetItemRequest, Services_Universalwallet_V1_GetItemResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetItemInterceptors() ?? []
        )
    }

    /// Search the wallet using a SQL syntax
    ///
    /// - Parameters:
    ///   - request: Request to send to Search.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func Search(
        _ request: Services_Universalwallet_V1_SearchRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_SearchRequest, Services_Universalwallet_V1_SearchResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.Search.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSearchInterceptors() ?? []
        )
    }

    /// Insert an item into the wallet
    ///
    /// - Parameters:
    ///   - request: Request to send to InsertItem.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func InsertItem(
        _ request: Services_Universalwallet_V1_InsertItemRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_InsertItemRequest, Services_Universalwallet_V1_InsertItemResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.InsertItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeInsertItemInterceptors() ?? []
        )
    }

    /// Update an item in the wallet
    ///
    /// - Parameters:
    ///   - request: Request to send to UpdateItem.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func UpdateItem(
        _ request: Services_Universalwallet_V1_UpdateItemRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_UpdateItemRequest, Services_Universalwallet_V1_UpdateItemResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.UpdateItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUpdateItemInterceptors() ?? []
        )
    }

    /// Delete an item from the wallet permanently
    ///
    /// - Parameters:
    ///   - request: Request to send to DeleteItem.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func DeleteItem(
        _ request: Services_Universalwallet_V1_DeleteItemRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_DeleteItemRequest, Services_Universalwallet_V1_DeleteItemResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteItem.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteItemInterceptors() ?? []
        )
    }

    /// Delete a wallet and its credentials
    ///
    /// - Parameters:
    ///   - request: Request to send to DeleteWallet.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func DeleteWallet(
        _ request: Services_Universalwallet_V1_DeleteWalletRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Universalwallet_V1_DeleteWalletRequest, Services_Universalwallet_V1_DeleteWalletResponse> {
        makeUnaryCall(
            path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteWallet.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteWalletInterceptors() ?? []
        )
    }
}

#if compiler(>=5.6)
    @available(*, deprecated)
    extension Services_Universalwallet_V1_UniversalWalletClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Services_Universalwallet_V1_UniversalWalletNIOClient")
public final class Services_Universalwallet_V1_UniversalWalletClient: Services_Universalwallet_V1_UniversalWalletClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the services.universalwallet.v1.UniversalWallet service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct Services_Universalwallet_V1_UniversalWalletNIOClient: Services_Universalwallet_V1_UniversalWalletClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol?

    /// Creates a client for the services.universalwallet.v1.UniversalWallet service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

#if compiler(>=5.6)
    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public protocol Services_Universalwallet_V1_UniversalWalletAsyncClientProtocol: GRPCClient {
        static var serviceDescriptor: GRPCServiceDescriptor { get }
        var interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? { get }

        func makeGetItemCall(
            _ request: Services_Universalwallet_V1_GetItemRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_GetItemRequest, Services_Universalwallet_V1_GetItemResponse>

        func makeSearchCall(
            _ request: Services_Universalwallet_V1_SearchRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_SearchRequest, Services_Universalwallet_V1_SearchResponse>

        func makeInsertItemCall(
            _ request: Services_Universalwallet_V1_InsertItemRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_InsertItemRequest, Services_Universalwallet_V1_InsertItemResponse>

        func makeUpdateItemCall(
            _ request: Services_Universalwallet_V1_UpdateItemRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_UpdateItemRequest, Services_Universalwallet_V1_UpdateItemResponse>

        func makeDeleteItemCall(
            _ request: Services_Universalwallet_V1_DeleteItemRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_DeleteItemRequest, Services_Universalwallet_V1_DeleteItemResponse>

        func makeDeleteWalletCall(
            _ request: Services_Universalwallet_V1_DeleteWalletRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_DeleteWalletRequest, Services_Universalwallet_V1_DeleteWalletResponse>
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public extension Services_Universalwallet_V1_UniversalWalletAsyncClientProtocol {
        static var serviceDescriptor: GRPCServiceDescriptor {
            Services_Universalwallet_V1_UniversalWalletClientMetadata.serviceDescriptor
        }

        var interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? {
            nil
        }

        func makeGetItemCall(
            _ request: Services_Universalwallet_V1_GetItemRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_GetItemRequest, Services_Universalwallet_V1_GetItemResponse> {
            makeAsyncUnaryCall(
                path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetItem.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeGetItemInterceptors() ?? []
            )
        }

        func makeSearchCall(
            _ request: Services_Universalwallet_V1_SearchRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_SearchRequest, Services_Universalwallet_V1_SearchResponse> {
            makeAsyncUnaryCall(
                path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.Search.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeSearchInterceptors() ?? []
            )
        }

        func makeInsertItemCall(
            _ request: Services_Universalwallet_V1_InsertItemRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_InsertItemRequest, Services_Universalwallet_V1_InsertItemResponse> {
            makeAsyncUnaryCall(
                path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.InsertItem.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeInsertItemInterceptors() ?? []
            )
        }

        func makeUpdateItemCall(
            _ request: Services_Universalwallet_V1_UpdateItemRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_UpdateItemRequest, Services_Universalwallet_V1_UpdateItemResponse> {
            makeAsyncUnaryCall(
                path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.UpdateItem.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeUpdateItemInterceptors() ?? []
            )
        }

        func makeDeleteItemCall(
            _ request: Services_Universalwallet_V1_DeleteItemRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_DeleteItemRequest, Services_Universalwallet_V1_DeleteItemResponse> {
            makeAsyncUnaryCall(
                path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteItem.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeDeleteItemInterceptors() ?? []
            )
        }

        func makeDeleteWalletCall(
            _ request: Services_Universalwallet_V1_DeleteWalletRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Universalwallet_V1_DeleteWalletRequest, Services_Universalwallet_V1_DeleteWalletResponse> {
            makeAsyncUnaryCall(
                path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteWallet.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeDeleteWalletInterceptors() ?? []
            )
        }
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public extension Services_Universalwallet_V1_UniversalWalletAsyncClientProtocol {
        func GetItem(
            _ request: Services_Universalwallet_V1_GetItemRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Universalwallet_V1_GetItemResponse {
            try await performAsyncUnaryCall(
                path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetItem.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeGetItemInterceptors() ?? []
            )
        }

        func Search(
            _ request: Services_Universalwallet_V1_SearchRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Universalwallet_V1_SearchResponse {
            try await performAsyncUnaryCall(
                path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.Search.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeSearchInterceptors() ?? []
            )
        }

        func InsertItem(
            _ request: Services_Universalwallet_V1_InsertItemRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Universalwallet_V1_InsertItemResponse {
            try await performAsyncUnaryCall(
                path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.InsertItem.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeInsertItemInterceptors() ?? []
            )
        }

        func UpdateItem(
            _ request: Services_Universalwallet_V1_UpdateItemRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Universalwallet_V1_UpdateItemResponse {
            try await performAsyncUnaryCall(
                path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.UpdateItem.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeUpdateItemInterceptors() ?? []
            )
        }

        func DeleteItem(
            _ request: Services_Universalwallet_V1_DeleteItemRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Universalwallet_V1_DeleteItemResponse {
            try await performAsyncUnaryCall(
                path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteItem.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeDeleteItemInterceptors() ?? []
            )
        }

        func DeleteWallet(
            _ request: Services_Universalwallet_V1_DeleteWalletRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Universalwallet_V1_DeleteWalletResponse {
            try await performAsyncUnaryCall(
                path: Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteWallet.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeDeleteWalletInterceptors() ?? []
            )
        }
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public struct Services_Universalwallet_V1_UniversalWalletAsyncClient: Services_Universalwallet_V1_UniversalWalletAsyncClientProtocol {
        public var channel: GRPCChannel
        public var defaultCallOptions: CallOptions
        public var interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol?

        public init(
            channel: GRPCChannel,
            defaultCallOptions: CallOptions = CallOptions(),
            interceptors: Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol? = nil
        ) {
            self.channel = channel
            self.defaultCallOptions = defaultCallOptions
            self.interceptors = interceptors
        }
    }

#endif // compiler(>=5.6)

public protocol Services_Universalwallet_V1_UniversalWalletClientInterceptorFactoryProtocol: GRPCSendable {
    /// - Returns: Interceptors to use when invoking 'GetItem'.
    func makeGetItemInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_GetItemRequest, Services_Universalwallet_V1_GetItemResponse>]

    /// - Returns: Interceptors to use when invoking 'Search'.
    func makeSearchInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_SearchRequest, Services_Universalwallet_V1_SearchResponse>]

    /// - Returns: Interceptors to use when invoking 'InsertItem'.
    func makeInsertItemInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_InsertItemRequest, Services_Universalwallet_V1_InsertItemResponse>]

    /// - Returns: Interceptors to use when invoking 'UpdateItem'.
    func makeUpdateItemInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_UpdateItemRequest, Services_Universalwallet_V1_UpdateItemResponse>]

    /// - Returns: Interceptors to use when invoking 'DeleteItem'.
    func makeDeleteItemInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_DeleteItemRequest, Services_Universalwallet_V1_DeleteItemResponse>]

    /// - Returns: Interceptors to use when invoking 'DeleteWallet'.
    func makeDeleteWalletInterceptors() -> [ClientInterceptor<Services_Universalwallet_V1_DeleteWalletRequest, Services_Universalwallet_V1_DeleteWalletResponse>]
}

public enum Services_Universalwallet_V1_UniversalWalletClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "UniversalWallet",
        fullName: "services.universalwallet.v1.UniversalWallet",
        methods: [
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.GetItem,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.Search,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.InsertItem,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.UpdateItem,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteItem,
            Services_Universalwallet_V1_UniversalWalletClientMetadata.Methods.DeleteWallet,
        ]
    )

    public enum Methods {
        public static let GetItem = GRPCMethodDescriptor(
            name: "GetItem",
            path: "/services.universalwallet.v1.UniversalWallet/GetItem",
            type: GRPCCallType.unary
        )

        public static let Search = GRPCMethodDescriptor(
            name: "Search",
            path: "/services.universalwallet.v1.UniversalWallet/Search",
            type: GRPCCallType.unary
        )

        public static let InsertItem = GRPCMethodDescriptor(
            name: "InsertItem",
            path: "/services.universalwallet.v1.UniversalWallet/InsertItem",
            type: GRPCCallType.unary
        )

        public static let UpdateItem = GRPCMethodDescriptor(
            name: "UpdateItem",
            path: "/services.universalwallet.v1.UniversalWallet/UpdateItem",
            type: GRPCCallType.unary
        )

        public static let DeleteItem = GRPCMethodDescriptor(
            name: "DeleteItem",
            path: "/services.universalwallet.v1.UniversalWallet/DeleteItem",
            type: GRPCCallType.unary
        )

        public static let DeleteWallet = GRPCMethodDescriptor(
            name: "DeleteWallet",
            path: "/services.universalwallet.v1.UniversalWallet/DeleteWallet",
            type: GRPCCallType.unary
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Services_Universalwallet_V1_UniversalWalletProvider: CallHandlerProvider {
    var interceptors: Services_Universalwallet_V1_UniversalWalletServerInterceptorFactoryProtocol? { get }

    /// Retrieve an item from the wallet with a given item identifier
    func GetItem(request: Services_Universalwallet_V1_GetItemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_GetItemResponse>

    /// Search the wallet using a SQL syntax
    func Search(request: Services_Universalwallet_V1_SearchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_SearchResponse>

    /// Insert an item into the wallet
    func InsertItem(request: Services_Universalwallet_V1_InsertItemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_InsertItemResponse>

    /// Update an item in the wallet
    func UpdateItem(request: Services_Universalwallet_V1_UpdateItemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_UpdateItemResponse>

    /// Delete an item from the wallet permanently
    func DeleteItem(request: Services_Universalwallet_V1_DeleteItemRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_DeleteItemResponse>

    /// Delete a wallet and its credentials
    func DeleteWallet(request: Services_Universalwallet_V1_DeleteWalletRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Universalwallet_V1_DeleteWalletResponse>
}

public extension Services_Universalwallet_V1_UniversalWalletProvider {
    var serviceName: Substring {
        Services_Universalwallet_V1_UniversalWalletServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "GetItem":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_GetItemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_GetItemResponse>(),
                interceptors: interceptors?.makeGetItemInterceptors() ?? [],
                userFunction: GetItem(request:context:)
            )

        case "Search":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_SearchRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_SearchResponse>(),
                interceptors: interceptors?.makeSearchInterceptors() ?? [],
                userFunction: Search(request:context:)
            )

        case "InsertItem":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_InsertItemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_InsertItemResponse>(),
                interceptors: interceptors?.makeInsertItemInterceptors() ?? [],
                userFunction: InsertItem(request:context:)
            )

        case "UpdateItem":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_UpdateItemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_UpdateItemResponse>(),
                interceptors: interceptors?.makeUpdateItemInterceptors() ?? [],
                userFunction: UpdateItem(request:context:)
            )

        case "DeleteItem":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_DeleteItemRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_DeleteItemResponse>(),
                interceptors: interceptors?.makeDeleteItemInterceptors() ?? [],
                userFunction: DeleteItem(request:context:)
            )

        case "DeleteWallet":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_DeleteWalletRequest>(),
                responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_DeleteWalletResponse>(),
                interceptors: interceptors?.makeDeleteWalletInterceptors() ?? [],
                userFunction: DeleteWallet(request:context:)
            )

        default:
            return nil
        }
    }
}

#if compiler(>=5.6)

    /// To implement a server, implement an object which conforms to this protocol.
    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public protocol Services_Universalwallet_V1_UniversalWalletAsyncProvider: CallHandlerProvider {
        static var serviceDescriptor: GRPCServiceDescriptor { get }
        var interceptors: Services_Universalwallet_V1_UniversalWalletServerInterceptorFactoryProtocol? { get }

        /// Retrieve an item from the wallet with a given item identifier
        @Sendable func GetItem(
            request: Services_Universalwallet_V1_GetItemRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Universalwallet_V1_GetItemResponse

        /// Search the wallet using a SQL syntax
        @Sendable func Search(
            request: Services_Universalwallet_V1_SearchRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Universalwallet_V1_SearchResponse

        /// Insert an item into the wallet
        @Sendable func InsertItem(
            request: Services_Universalwallet_V1_InsertItemRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Universalwallet_V1_InsertItemResponse

        /// Update an item in the wallet
        @Sendable func UpdateItem(
            request: Services_Universalwallet_V1_UpdateItemRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Universalwallet_V1_UpdateItemResponse

        /// Delete an item from the wallet permanently
        @Sendable func DeleteItem(
            request: Services_Universalwallet_V1_DeleteItemRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Universalwallet_V1_DeleteItemResponse

        /// Delete a wallet and its credentials
        @Sendable func DeleteWallet(
            request: Services_Universalwallet_V1_DeleteWalletRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Universalwallet_V1_DeleteWalletResponse
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public extension Services_Universalwallet_V1_UniversalWalletAsyncProvider {
        static var serviceDescriptor: GRPCServiceDescriptor {
            Services_Universalwallet_V1_UniversalWalletServerMetadata.serviceDescriptor
        }

        var serviceName: Substring {
            Services_Universalwallet_V1_UniversalWalletServerMetadata.serviceDescriptor.fullName[...]
        }

        var interceptors: Services_Universalwallet_V1_UniversalWalletServerInterceptorFactoryProtocol? {
            nil
        }

        func handle(
            method name: Substring,
            context: CallHandlerContext
        ) -> GRPCServerHandlerProtocol? {
            switch name {
            case "GetItem":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_GetItemRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_GetItemResponse>(),
                    interceptors: interceptors?.makeGetItemInterceptors() ?? [],
                    wrapping: GetItem(request:context:)
                )

            case "Search":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_SearchRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_SearchResponse>(),
                    interceptors: interceptors?.makeSearchInterceptors() ?? [],
                    wrapping: Search(request:context:)
                )

            case "InsertItem":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_InsertItemRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_InsertItemResponse>(),
                    interceptors: interceptors?.makeInsertItemInterceptors() ?? [],
                    wrapping: InsertItem(request:context:)
                )

            case "UpdateItem":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_UpdateItemRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_UpdateItemResponse>(),
                    interceptors: interceptors?.makeUpdateItemInterceptors() ?? [],
                    wrapping: UpdateItem(request:context:)
                )

            case "DeleteItem":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_DeleteItemRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_DeleteItemResponse>(),
                    interceptors: interceptors?.makeDeleteItemInterceptors() ?? [],
                    wrapping: DeleteItem(request:context:)
                )

            case "DeleteWallet":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Universalwallet_V1_DeleteWalletRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Universalwallet_V1_DeleteWalletResponse>(),
                    interceptors: interceptors?.makeDeleteWalletInterceptors() ?? [],
                    wrapping: DeleteWallet(request:context:)
                )

            default:
                return nil
            }
        }
    }

#endif // compiler(>=5.6)

public protocol Services_Universalwallet_V1_UniversalWalletServerInterceptorFactoryProtocol {
    /// - Returns: Interceptors to use when handling 'GetItem'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetItemInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_GetItemRequest, Services_Universalwallet_V1_GetItemResponse>]

    /// - Returns: Interceptors to use when handling 'Search'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeSearchInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_SearchRequest, Services_Universalwallet_V1_SearchResponse>]

    /// - Returns: Interceptors to use when handling 'InsertItem'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeInsertItemInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_InsertItemRequest, Services_Universalwallet_V1_InsertItemResponse>]

    /// - Returns: Interceptors to use when handling 'UpdateItem'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeUpdateItemInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_UpdateItemRequest, Services_Universalwallet_V1_UpdateItemResponse>]

    /// - Returns: Interceptors to use when handling 'DeleteItem'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeDeleteItemInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_DeleteItemRequest, Services_Universalwallet_V1_DeleteItemResponse>]

    /// - Returns: Interceptors to use when handling 'DeleteWallet'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeDeleteWalletInterceptors() -> [ServerInterceptor<Services_Universalwallet_V1_DeleteWalletRequest, Services_Universalwallet_V1_DeleteWalletResponse>]
}

public enum Services_Universalwallet_V1_UniversalWalletServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "UniversalWallet",
        fullName: "services.universalwallet.v1.UniversalWallet",
        methods: [
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.GetItem,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.Search,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.InsertItem,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.UpdateItem,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.DeleteItem,
            Services_Universalwallet_V1_UniversalWalletServerMetadata.Methods.DeleteWallet,
        ]
    )

    public enum Methods {
        public static let GetItem = GRPCMethodDescriptor(
            name: "GetItem",
            path: "/services.universalwallet.v1.UniversalWallet/GetItem",
            type: GRPCCallType.unary
        )

        public static let Search = GRPCMethodDescriptor(
            name: "Search",
            path: "/services.universalwallet.v1.UniversalWallet/Search",
            type: GRPCCallType.unary
        )

        public static let InsertItem = GRPCMethodDescriptor(
            name: "InsertItem",
            path: "/services.universalwallet.v1.UniversalWallet/InsertItem",
            type: GRPCCallType.unary
        )

        public static let UpdateItem = GRPCMethodDescriptor(
            name: "UpdateItem",
            path: "/services.universalwallet.v1.UniversalWallet/UpdateItem",
            type: GRPCCallType.unary
        )

        public static let DeleteItem = GRPCMethodDescriptor(
            name: "DeleteItem",
            path: "/services.universalwallet.v1.UniversalWallet/DeleteItem",
            type: GRPCCallType.unary
        )

        public static let DeleteWallet = GRPCMethodDescriptor(
            name: "DeleteWallet",
            path: "/services.universalwallet.v1.UniversalWallet/DeleteWallet",
            type: GRPCCallType.unary
        )
    }
}
