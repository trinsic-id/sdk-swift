//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: services/trust-registry/v1/trust-registry.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `Services_Trustregistry_V1_TrustRegistryClient`, then call methods of this protocol to make API calls.
public protocol Services_Trustregistry_V1_TrustRegistryClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Services_Trustregistry_V1_TrustRegistryClientInterceptorFactoryProtocol? { get }

    func RegisterMember(
        _ request: Services_Trustregistry_V1_RegisterMemberRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Trustregistry_V1_RegisterMemberRequest, Services_Trustregistry_V1_RegisterMemberResponse>

    func UnregisterMember(
        _ request: Services_Trustregistry_V1_UnregisterMemberRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Trustregistry_V1_UnregisterMemberRequest, Services_Trustregistry_V1_UnregisterMemberResponse>

    func GetMemberAuthorizationStatus(
        _ request: Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest, Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse>

    func ListAuthorizedMembers(
        _ request: Services_Trustregistry_V1_ListAuthorizedMembersRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Trustregistry_V1_ListAuthorizedMembersRequest, Services_Trustregistry_V1_ListAuthorizedMembersResponse>

    func GetMember(
        _ request: Services_Trustregistry_V1_GetMemberRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Trustregistry_V1_GetMemberRequest, Services_Trustregistry_V1_GetMemberResponse>
}

public extension Services_Trustregistry_V1_TrustRegistryClientProtocol {
    var serviceName: String {
        "services.trustregistry.v1.TrustRegistry"
    }

    /// Register an authoritative issuer for a credential schema
    ///
    /// - Parameters:
    ///   - request: Request to send to RegisterMember.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func RegisterMember(
        _ request: Services_Trustregistry_V1_RegisterMemberRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Trustregistry_V1_RegisterMemberRequest, Services_Trustregistry_V1_RegisterMemberResponse> {
        makeUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.RegisterMember.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRegisterMemberInterceptors() ?? []
        )
    }

    /// Removes an authoritative issuer for a credential schema from the trust registry
    ///
    /// - Parameters:
    ///   - request: Request to send to UnregisterMember.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func UnregisterMember(
        _ request: Services_Trustregistry_V1_UnregisterMemberRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Trustregistry_V1_UnregisterMemberRequest, Services_Trustregistry_V1_UnregisterMemberResponse> {
        makeUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.UnregisterMember.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUnregisterMemberInterceptors() ?? []
        )
    }

    /// Fetch the status of a member for a given credential schema in a trust registry
    ///
    /// - Parameters:
    ///   - request: Request to send to GetMemberAuthorizationStatus.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func GetMemberAuthorizationStatus(
        _ request: Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest, Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse> {
        makeUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.GetMemberAuthorizationStatus.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetMemberAuthorizationStatusInterceptors() ?? []
        )
    }

    /// Fetch the ecosystem's authorized issuers and the respective templates against which it can issue
    ///
    /// - Parameters:
    ///   - request: Request to send to ListAuthorizedMembers.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func ListAuthorizedMembers(
        _ request: Services_Trustregistry_V1_ListAuthorizedMembersRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Trustregistry_V1_ListAuthorizedMembersRequest, Services_Trustregistry_V1_ListAuthorizedMembersResponse> {
        makeUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.ListAuthorizedMembers.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListAuthorizedMembersInterceptors() ?? []
        )
    }

    /// Get member for a given did in a trust registry
    ///
    /// - Parameters:
    ///   - request: Request to send to GetMember.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func GetMember(
        _ request: Services_Trustregistry_V1_GetMemberRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Trustregistry_V1_GetMemberRequest, Services_Trustregistry_V1_GetMemberResponse> {
        makeUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.GetMember.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetMemberInterceptors() ?? []
        )
    }
}

@available(*, deprecated)
extension Services_Trustregistry_V1_TrustRegistryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Services_Trustregistry_V1_TrustRegistryNIOClient")
public final class Services_Trustregistry_V1_TrustRegistryClient: Services_Trustregistry_V1_TrustRegistryClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: Services_Trustregistry_V1_TrustRegistryClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: Services_Trustregistry_V1_TrustRegistryClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the services.trustregistry.v1.TrustRegistry service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Trustregistry_V1_TrustRegistryClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct Services_Trustregistry_V1_TrustRegistryNIOClient: Services_Trustregistry_V1_TrustRegistryClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Trustregistry_V1_TrustRegistryClientInterceptorFactoryProtocol?

    /// Creates a client for the services.trustregistry.v1.TrustRegistry service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Trustregistry_V1_TrustRegistryClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Services_Trustregistry_V1_TrustRegistryAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Services_Trustregistry_V1_TrustRegistryClientInterceptorFactoryProtocol? { get }

    func makeRegisterMemberCall(
        _ request: Services_Trustregistry_V1_RegisterMemberRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Trustregistry_V1_RegisterMemberRequest, Services_Trustregistry_V1_RegisterMemberResponse>

    func makeUnregisterMemberCall(
        _ request: Services_Trustregistry_V1_UnregisterMemberRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Trustregistry_V1_UnregisterMemberRequest, Services_Trustregistry_V1_UnregisterMemberResponse>

    func makeGetMemberAuthorizationStatusCall(
        _ request: Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest, Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse>

    func makeListAuthorizedMembersCall(
        _ request: Services_Trustregistry_V1_ListAuthorizedMembersRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Trustregistry_V1_ListAuthorizedMembersRequest, Services_Trustregistry_V1_ListAuthorizedMembersResponse>

    func makeGetMemberCall(
        _ request: Services_Trustregistry_V1_GetMemberRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncUnaryCall<Services_Trustregistry_V1_GetMemberRequest, Services_Trustregistry_V1_GetMemberResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Trustregistry_V1_TrustRegistryAsyncClientProtocol {
    static var serviceDescriptor: GRPCServiceDescriptor {
        Services_Trustregistry_V1_TrustRegistryClientMetadata.serviceDescriptor
    }

    var interceptors: Services_Trustregistry_V1_TrustRegistryClientInterceptorFactoryProtocol? {
        nil
    }

    func makeRegisterMemberCall(
        _ request: Services_Trustregistry_V1_RegisterMemberRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Trustregistry_V1_RegisterMemberRequest, Services_Trustregistry_V1_RegisterMemberResponse> {
        makeAsyncUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.RegisterMember.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRegisterMemberInterceptors() ?? []
        )
    }

    func makeUnregisterMemberCall(
        _ request: Services_Trustregistry_V1_UnregisterMemberRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Trustregistry_V1_UnregisterMemberRequest, Services_Trustregistry_V1_UnregisterMemberResponse> {
        makeAsyncUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.UnregisterMember.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUnregisterMemberInterceptors() ?? []
        )
    }

    func makeGetMemberAuthorizationStatusCall(
        _ request: Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest, Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse> {
        makeAsyncUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.GetMemberAuthorizationStatus.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetMemberAuthorizationStatusInterceptors() ?? []
        )
    }

    func makeListAuthorizedMembersCall(
        _ request: Services_Trustregistry_V1_ListAuthorizedMembersRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Trustregistry_V1_ListAuthorizedMembersRequest, Services_Trustregistry_V1_ListAuthorizedMembersResponse> {
        makeAsyncUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.ListAuthorizedMembers.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListAuthorizedMembersInterceptors() ?? []
        )
    }

    func makeGetMemberCall(
        _ request: Services_Trustregistry_V1_GetMemberRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncUnaryCall<Services_Trustregistry_V1_GetMemberRequest, Services_Trustregistry_V1_GetMemberResponse> {
        makeAsyncUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.GetMember.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetMemberInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Trustregistry_V1_TrustRegistryAsyncClientProtocol {
    func RegisterMember(
        _ request: Services_Trustregistry_V1_RegisterMemberRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Trustregistry_V1_RegisterMemberResponse {
        try await performAsyncUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.RegisterMember.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeRegisterMemberInterceptors() ?? []
        )
    }

    func UnregisterMember(
        _ request: Services_Trustregistry_V1_UnregisterMemberRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Trustregistry_V1_UnregisterMemberResponse {
        try await performAsyncUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.UnregisterMember.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUnregisterMemberInterceptors() ?? []
        )
    }

    func GetMemberAuthorizationStatus(
        _ request: Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse {
        try await performAsyncUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.GetMemberAuthorizationStatus.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetMemberAuthorizationStatusInterceptors() ?? []
        )
    }

    func ListAuthorizedMembers(
        _ request: Services_Trustregistry_V1_ListAuthorizedMembersRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Trustregistry_V1_ListAuthorizedMembersResponse {
        try await performAsyncUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.ListAuthorizedMembers.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListAuthorizedMembersInterceptors() ?? []
        )
    }

    func GetMember(
        _ request: Services_Trustregistry_V1_GetMemberRequest,
        callOptions: CallOptions? = nil
    ) async throws -> Services_Trustregistry_V1_GetMemberResponse {
        try await performAsyncUnaryCall(
            path: Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.GetMember.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetMemberInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Services_Trustregistry_V1_TrustRegistryAsyncClient: Services_Trustregistry_V1_TrustRegistryAsyncClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Trustregistry_V1_TrustRegistryClientInterceptorFactoryProtocol?

    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Trustregistry_V1_TrustRegistryClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

public protocol Services_Trustregistry_V1_TrustRegistryClientInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when invoking 'RegisterMember'.
    func makeRegisterMemberInterceptors() -> [ClientInterceptor<Services_Trustregistry_V1_RegisterMemberRequest, Services_Trustregistry_V1_RegisterMemberResponse>]

    /// - Returns: Interceptors to use when invoking 'UnregisterMember'.
    func makeUnregisterMemberInterceptors() -> [ClientInterceptor<Services_Trustregistry_V1_UnregisterMemberRequest, Services_Trustregistry_V1_UnregisterMemberResponse>]

    /// - Returns: Interceptors to use when invoking 'GetMemberAuthorizationStatus'.
    func makeGetMemberAuthorizationStatusInterceptors() -> [ClientInterceptor<Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest, Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse>]

    /// - Returns: Interceptors to use when invoking 'ListAuthorizedMembers'.
    func makeListAuthorizedMembersInterceptors() -> [ClientInterceptor<Services_Trustregistry_V1_ListAuthorizedMembersRequest, Services_Trustregistry_V1_ListAuthorizedMembersResponse>]

    /// - Returns: Interceptors to use when invoking 'GetMember'.
    func makeGetMemberInterceptors() -> [ClientInterceptor<Services_Trustregistry_V1_GetMemberRequest, Services_Trustregistry_V1_GetMemberResponse>]
}

public enum Services_Trustregistry_V1_TrustRegistryClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "TrustRegistry",
        fullName: "services.trustregistry.v1.TrustRegistry",
        methods: [
            Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.RegisterMember,
            Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.UnregisterMember,
            Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.GetMemberAuthorizationStatus,
            Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.ListAuthorizedMembers,
            Services_Trustregistry_V1_TrustRegistryClientMetadata.Methods.GetMember,
        ]
    )

    public enum Methods {
        public static let RegisterMember = GRPCMethodDescriptor(
            name: "RegisterMember",
            path: "/services.trustregistry.v1.TrustRegistry/RegisterMember",
            type: GRPCCallType.unary
        )

        public static let UnregisterMember = GRPCMethodDescriptor(
            name: "UnregisterMember",
            path: "/services.trustregistry.v1.TrustRegistry/UnregisterMember",
            type: GRPCCallType.unary
        )

        public static let GetMemberAuthorizationStatus = GRPCMethodDescriptor(
            name: "GetMemberAuthorizationStatus",
            path: "/services.trustregistry.v1.TrustRegistry/GetMemberAuthorizationStatus",
            type: GRPCCallType.unary
        )

        public static let ListAuthorizedMembers = GRPCMethodDescriptor(
            name: "ListAuthorizedMembers",
            path: "/services.trustregistry.v1.TrustRegistry/ListAuthorizedMembers",
            type: GRPCCallType.unary
        )

        public static let GetMember = GRPCMethodDescriptor(
            name: "GetMember",
            path: "/services.trustregistry.v1.TrustRegistry/GetMember",
            type: GRPCCallType.unary
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Services_Trustregistry_V1_TrustRegistryProvider: CallHandlerProvider {
    var interceptors: Services_Trustregistry_V1_TrustRegistryServerInterceptorFactoryProtocol? { get }

    /// Register an authoritative issuer for a credential schema
    func RegisterMember(request: Services_Trustregistry_V1_RegisterMemberRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Trustregistry_V1_RegisterMemberResponse>

    /// Removes an authoritative issuer for a credential schema from the trust registry
    func UnregisterMember(request: Services_Trustregistry_V1_UnregisterMemberRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Trustregistry_V1_UnregisterMemberResponse>

    /// Fetch the status of a member for a given credential schema in a trust registry
    func GetMemberAuthorizationStatus(request: Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse>

    /// Fetch the ecosystem's authorized issuers and the respective templates against which it can issue
    func ListAuthorizedMembers(request: Services_Trustregistry_V1_ListAuthorizedMembersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Trustregistry_V1_ListAuthorizedMembersResponse>

    /// Get member for a given did in a trust registry
    func GetMember(request: Services_Trustregistry_V1_GetMemberRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Trustregistry_V1_GetMemberResponse>
}

public extension Services_Trustregistry_V1_TrustRegistryProvider {
    var serviceName: Substring {
        Services_Trustregistry_V1_TrustRegistryServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "RegisterMember":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Trustregistry_V1_RegisterMemberRequest>(),
                responseSerializer: ProtobufSerializer<Services_Trustregistry_V1_RegisterMemberResponse>(),
                interceptors: interceptors?.makeRegisterMemberInterceptors() ?? [],
                userFunction: RegisterMember(request:context:)
            )

        case "UnregisterMember":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Trustregistry_V1_UnregisterMemberRequest>(),
                responseSerializer: ProtobufSerializer<Services_Trustregistry_V1_UnregisterMemberResponse>(),
                interceptors: interceptors?.makeUnregisterMemberInterceptors() ?? [],
                userFunction: UnregisterMember(request:context:)
            )

        case "GetMemberAuthorizationStatus":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest>(),
                responseSerializer: ProtobufSerializer<Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse>(),
                interceptors: interceptors?.makeGetMemberAuthorizationStatusInterceptors() ?? [],
                userFunction: GetMemberAuthorizationStatus(request:context:)
            )

        case "ListAuthorizedMembers":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Trustregistry_V1_ListAuthorizedMembersRequest>(),
                responseSerializer: ProtobufSerializer<Services_Trustregistry_V1_ListAuthorizedMembersResponse>(),
                interceptors: interceptors?.makeListAuthorizedMembersInterceptors() ?? [],
                userFunction: ListAuthorizedMembers(request:context:)
            )

        case "GetMember":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Trustregistry_V1_GetMemberRequest>(),
                responseSerializer: ProtobufSerializer<Services_Trustregistry_V1_GetMemberResponse>(),
                interceptors: interceptors?.makeGetMemberInterceptors() ?? [],
                userFunction: GetMember(request:context:)
            )

        default:
            return nil
        }
    }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Services_Trustregistry_V1_TrustRegistryAsyncProvider: CallHandlerProvider, Sendable {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Services_Trustregistry_V1_TrustRegistryServerInterceptorFactoryProtocol? { get }

    /// Register an authoritative issuer for a credential schema
    func RegisterMember(
        request: Services_Trustregistry_V1_RegisterMemberRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Trustregistry_V1_RegisterMemberResponse

    /// Removes an authoritative issuer for a credential schema from the trust registry
    func UnregisterMember(
        request: Services_Trustregistry_V1_UnregisterMemberRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Trustregistry_V1_UnregisterMemberResponse

    /// Fetch the status of a member for a given credential schema in a trust registry
    func GetMemberAuthorizationStatus(
        request: Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse

    /// Fetch the ecosystem's authorized issuers and the respective templates against which it can issue
    func ListAuthorizedMembers(
        request: Services_Trustregistry_V1_ListAuthorizedMembersRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Trustregistry_V1_ListAuthorizedMembersResponse

    /// Get member for a given did in a trust registry
    func GetMember(
        request: Services_Trustregistry_V1_GetMemberRequest,
        context: GRPCAsyncServerCallContext
    ) async throws -> Services_Trustregistry_V1_GetMemberResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public extension Services_Trustregistry_V1_TrustRegistryAsyncProvider {
    static var serviceDescriptor: GRPCServiceDescriptor {
        Services_Trustregistry_V1_TrustRegistryServerMetadata.serviceDescriptor
    }

    var serviceName: Substring {
        Services_Trustregistry_V1_TrustRegistryServerMetadata.serviceDescriptor.fullName[...]
    }

    var interceptors: Services_Trustregistry_V1_TrustRegistryServerInterceptorFactoryProtocol? {
        nil
    }

    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "RegisterMember":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Trustregistry_V1_RegisterMemberRequest>(),
                responseSerializer: ProtobufSerializer<Services_Trustregistry_V1_RegisterMemberResponse>(),
                interceptors: interceptors?.makeRegisterMemberInterceptors() ?? [],
                wrapping: { try await self.RegisterMember(request: $0, context: $1) }
            )

        case "UnregisterMember":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Trustregistry_V1_UnregisterMemberRequest>(),
                responseSerializer: ProtobufSerializer<Services_Trustregistry_V1_UnregisterMemberResponse>(),
                interceptors: interceptors?.makeUnregisterMemberInterceptors() ?? [],
                wrapping: { try await self.UnregisterMember(request: $0, context: $1) }
            )

        case "GetMemberAuthorizationStatus":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest>(),
                responseSerializer: ProtobufSerializer<Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse>(),
                interceptors: interceptors?.makeGetMemberAuthorizationStatusInterceptors() ?? [],
                wrapping: { try await self.GetMemberAuthorizationStatus(request: $0, context: $1) }
            )

        case "ListAuthorizedMembers":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Trustregistry_V1_ListAuthorizedMembersRequest>(),
                responseSerializer: ProtobufSerializer<Services_Trustregistry_V1_ListAuthorizedMembersResponse>(),
                interceptors: interceptors?.makeListAuthorizedMembersInterceptors() ?? [],
                wrapping: { try await self.ListAuthorizedMembers(request: $0, context: $1) }
            )

        case "GetMember":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Trustregistry_V1_GetMemberRequest>(),
                responseSerializer: ProtobufSerializer<Services_Trustregistry_V1_GetMemberResponse>(),
                interceptors: interceptors?.makeGetMemberInterceptors() ?? [],
                wrapping: { try await self.GetMember(request: $0, context: $1) }
            )

        default:
            return nil
        }
    }
}

public protocol Services_Trustregistry_V1_TrustRegistryServerInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when handling 'RegisterMember'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeRegisterMemberInterceptors() -> [ServerInterceptor<Services_Trustregistry_V1_RegisterMemberRequest, Services_Trustregistry_V1_RegisterMemberResponse>]

    /// - Returns: Interceptors to use when handling 'UnregisterMember'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeUnregisterMemberInterceptors() -> [ServerInterceptor<Services_Trustregistry_V1_UnregisterMemberRequest, Services_Trustregistry_V1_UnregisterMemberResponse>]

    /// - Returns: Interceptors to use when handling 'GetMemberAuthorizationStatus'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetMemberAuthorizationStatusInterceptors() -> [ServerInterceptor<Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest, Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse>]

    /// - Returns: Interceptors to use when handling 'ListAuthorizedMembers'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeListAuthorizedMembersInterceptors() -> [ServerInterceptor<Services_Trustregistry_V1_ListAuthorizedMembersRequest, Services_Trustregistry_V1_ListAuthorizedMembersResponse>]

    /// - Returns: Interceptors to use when handling 'GetMember'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetMemberInterceptors() -> [ServerInterceptor<Services_Trustregistry_V1_GetMemberRequest, Services_Trustregistry_V1_GetMemberResponse>]
}

public enum Services_Trustregistry_V1_TrustRegistryServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "TrustRegistry",
        fullName: "services.trustregistry.v1.TrustRegistry",
        methods: [
            Services_Trustregistry_V1_TrustRegistryServerMetadata.Methods.RegisterMember,
            Services_Trustregistry_V1_TrustRegistryServerMetadata.Methods.UnregisterMember,
            Services_Trustregistry_V1_TrustRegistryServerMetadata.Methods.GetMemberAuthorizationStatus,
            Services_Trustregistry_V1_TrustRegistryServerMetadata.Methods.ListAuthorizedMembers,
            Services_Trustregistry_V1_TrustRegistryServerMetadata.Methods.GetMember,
        ]
    )

    public enum Methods {
        public static let RegisterMember = GRPCMethodDescriptor(
            name: "RegisterMember",
            path: "/services.trustregistry.v1.TrustRegistry/RegisterMember",
            type: GRPCCallType.unary
        )

        public static let UnregisterMember = GRPCMethodDescriptor(
            name: "UnregisterMember",
            path: "/services.trustregistry.v1.TrustRegistry/UnregisterMember",
            type: GRPCCallType.unary
        )

        public static let GetMemberAuthorizationStatus = GRPCMethodDescriptor(
            name: "GetMemberAuthorizationStatus",
            path: "/services.trustregistry.v1.TrustRegistry/GetMemberAuthorizationStatus",
            type: GRPCCallType.unary
        )

        public static let ListAuthorizedMembers = GRPCMethodDescriptor(
            name: "ListAuthorizedMembers",
            path: "/services.trustregistry.v1.TrustRegistry/ListAuthorizedMembers",
            type: GRPCCallType.unary
        )

        public static let GetMember = GRPCMethodDescriptor(
            name: "GetMember",
            path: "/services.trustregistry.v1.TrustRegistry/GetMember",
            type: GRPCCallType.unary
        )
    }
}
