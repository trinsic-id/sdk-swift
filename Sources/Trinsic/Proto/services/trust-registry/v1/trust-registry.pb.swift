// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/trust-registry/v1/trust-registry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Services_Trustregistry_V1_RegistrationStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// - the entity is currently authorized, as of time of the query.
  case current // = 0

  /// - entity rights have expired.
  case expired // = 1

  /// - entity has voluntarily ceased Issuer role under the specific EGF.
  case terminated // = 2

  /// - entity authority under specific EGF was terminated by the governing authority.
  case revoked // = 3
  case notFound // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .current
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .current
    case 1: self = .expired
    case 2: self = .terminated
    case 3: self = .revoked
    case 10: self = .notFound
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .current: return 0
    case .expired: return 1
    case .terminated: return 2
    case .revoked: return 3
    case .notFound: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Services_Trustregistry_V1_RegistrationStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Services_Trustregistry_V1_RegistrationStatus] = [
    .current,
    .expired,
    .terminated,
    .revoked,
    .notFound,
  ]
}

#endif  // swift(>=4.2)

public struct Services_Trustregistry_V1_AddFrameworkRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var governanceFramework: Services_Trustregistry_V1_GovernanceFramework {
    get {return _governanceFramework ?? Services_Trustregistry_V1_GovernanceFramework()}
    set {_governanceFramework = newValue}
  }
  /// Returns true if `governanceFramework` has been explicitly set.
  public var hasGovernanceFramework: Bool {return self._governanceFramework != nil}
  /// Clears the value of `governanceFramework`. Subsequent reads from it will return its default value.
  public mutating func clearGovernanceFramework() {self._governanceFramework = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _governanceFramework: Services_Trustregistry_V1_GovernanceFramework? = nil
}

public struct Services_Trustregistry_V1_AddFrameworkResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Services_Common_V1_ResponseStatus = .success

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Services_Trustregistry_V1_RemoveFrameworkRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var governanceFramework: Services_Trustregistry_V1_GovernanceFramework {
    get {return _governanceFramework ?? Services_Trustregistry_V1_GovernanceFramework()}
    set {_governanceFramework = newValue}
  }
  /// Returns true if `governanceFramework` has been explicitly set.
  public var hasGovernanceFramework: Bool {return self._governanceFramework != nil}
  /// Clears the value of `governanceFramework`. Subsequent reads from it will return its default value.
  public mutating func clearGovernanceFramework() {self._governanceFramework = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _governanceFramework: Services_Trustregistry_V1_GovernanceFramework? = nil
}

public struct Services_Trustregistry_V1_RemoveFrameworkResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Services_Common_V1_ResponseStatus = .success

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Services_Trustregistry_V1_SearchRegistryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// SELECT c from c where c.type == 'GovernanceFramework'
  public var query: String = String()

  public var continuationToken: String = String()

  public var options: Services_Common_V1_RequestOptions {
    get {return _options ?? Services_Common_V1_RequestOptions()}
    set {_options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  public var hasOptions: Bool {return self._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  public mutating func clearOptions() {self._options = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _options: Services_Common_V1_RequestOptions? = nil
}

public struct Services_Trustregistry_V1_SearchRegistryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var itemsJson: String = String()

  public var hasMore_p: Bool = false

  public var count: Int32 = 0

  public var continuationToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Services_Trustregistry_V1_GovernanceFramework {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var governanceFrameworkUri: String = String()

  public var trustRegistryUri: String = String()

  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Services_Trustregistry_V1_RegisterIssuerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var authority: Services_Trustregistry_V1_RegisterIssuerRequest.OneOf_Authority? = nil

  public var didUri: String {
    get {
      if case .didUri(let v)? = authority {return v}
      return String()
    }
    set {authority = .didUri(newValue)}
  }

  public var x509Cert: String {
    get {
      if case .x509Cert(let v)? = authority {return v}
      return String()
    }
    set {authority = .x509Cert(newValue)}
  }

  public var credentialTypeUri: String = String()

  public var validFromUtc: UInt64 = 0

  public var validUntilUtc: UInt64 = 0

  public var governanceFrameworkUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Authority: Equatable {
    case didUri(String)
    case x509Cert(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Services_Trustregistry_V1_RegisterIssuerRequest.OneOf_Authority, rhs: Services_Trustregistry_V1_RegisterIssuerRequest.OneOf_Authority) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.didUri, .didUri): return {
        guard case .didUri(let l) = lhs, case .didUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.x509Cert, .x509Cert): return {
        guard case .x509Cert(let l) = lhs, case .x509Cert(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Services_Trustregistry_V1_RegisterIssuerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Services_Common_V1_ResponseStatus = .success

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Services_Trustregistry_V1_RegisterVerifierRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var authority: Services_Trustregistry_V1_RegisterVerifierRequest.OneOf_Authority? = nil

  public var didUri: String {
    get {
      if case .didUri(let v)? = authority {return v}
      return String()
    }
    set {authority = .didUri(newValue)}
  }

  public var x509Cert: String {
    get {
      if case .x509Cert(let v)? = authority {return v}
      return String()
    }
    set {authority = .x509Cert(newValue)}
  }

  public var presentationTypeUri: String = String()

  public var validFromUtc: UInt64 = 0

  public var validUntilUtc: UInt64 = 0

  public var governanceFrameworkUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Authority: Equatable {
    case didUri(String)
    case x509Cert(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Services_Trustregistry_V1_RegisterVerifierRequest.OneOf_Authority, rhs: Services_Trustregistry_V1_RegisterVerifierRequest.OneOf_Authority) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.didUri, .didUri): return {
        guard case .didUri(let l) = lhs, case .didUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.x509Cert, .x509Cert): return {
        guard case .x509Cert(let l) = lhs, case .x509Cert(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Services_Trustregistry_V1_RegisterVerifierResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Services_Common_V1_ResponseStatus = .success

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Services_Trustregistry_V1_UnregisterIssuerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var authority: Services_Trustregistry_V1_UnregisterIssuerRequest.OneOf_Authority? = nil

  public var didUri: String {
    get {
      if case .didUri(let v)? = authority {return v}
      return String()
    }
    set {authority = .didUri(newValue)}
  }

  public var x509Cert: String {
    get {
      if case .x509Cert(let v)? = authority {return v}
      return String()
    }
    set {authority = .x509Cert(newValue)}
  }

  public var credentialTypeUri: String = String()

  public var governanceFrameworkUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Authority: Equatable {
    case didUri(String)
    case x509Cert(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Services_Trustregistry_V1_UnregisterIssuerRequest.OneOf_Authority, rhs: Services_Trustregistry_V1_UnregisterIssuerRequest.OneOf_Authority) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.didUri, .didUri): return {
        guard case .didUri(let l) = lhs, case .didUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.x509Cert, .x509Cert): return {
        guard case .x509Cert(let l) = lhs, case .x509Cert(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Services_Trustregistry_V1_UnregisterIssuerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Services_Common_V1_ResponseStatus = .success

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Services_Trustregistry_V1_UnregisterVerifierRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var authority: Services_Trustregistry_V1_UnregisterVerifierRequest.OneOf_Authority? = nil

  public var didUri: String {
    get {
      if case .didUri(let v)? = authority {return v}
      return String()
    }
    set {authority = .didUri(newValue)}
  }

  public var x509Cert: String {
    get {
      if case .x509Cert(let v)? = authority {return v}
      return String()
    }
    set {authority = .x509Cert(newValue)}
  }

  public var presentationTypeUri: String = String()

  public var governanceFrameworkUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Authority: Equatable {
    case didUri(String)
    case x509Cert(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Services_Trustregistry_V1_UnregisterVerifierRequest.OneOf_Authority, rhs: Services_Trustregistry_V1_UnregisterVerifierRequest.OneOf_Authority) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.didUri, .didUri): return {
        guard case .didUri(let l) = lhs, case .didUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.x509Cert, .x509Cert): return {
        guard case .x509Cert(let l) = lhs, case .x509Cert(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Services_Trustregistry_V1_UnregisterVerifierResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Services_Common_V1_ResponseStatus = .success

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Services_Trustregistry_V1_CheckIssuerStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var governanceFrameworkUri: String = String()

  public var member: Services_Trustregistry_V1_CheckIssuerStatusRequest.OneOf_Member? = nil

  public var didUri: String {
    get {
      if case .didUri(let v)? = member {return v}
      return String()
    }
    set {member = .didUri(newValue)}
  }

  public var x509Cert: String {
    get {
      if case .x509Cert(let v)? = member {return v}
      return String()
    }
    set {member = .x509Cert(newValue)}
  }

  public var credentialTypeUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Member: Equatable {
    case didUri(String)
    case x509Cert(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Services_Trustregistry_V1_CheckIssuerStatusRequest.OneOf_Member, rhs: Services_Trustregistry_V1_CheckIssuerStatusRequest.OneOf_Member) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.didUri, .didUri): return {
        guard case .didUri(let l) = lhs, case .didUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.x509Cert, .x509Cert): return {
        guard case .x509Cert(let l) = lhs, case .x509Cert(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Services_Trustregistry_V1_CheckIssuerStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Services_Trustregistry_V1_RegistrationStatus = .current

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Services_Trustregistry_V1_CheckVerifierStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var governanceFrameworkUri: String = String()

  public var member: Services_Trustregistry_V1_CheckVerifierStatusRequest.OneOf_Member? = nil

  public var didUri: String {
    get {
      if case .didUri(let v)? = member {return v}
      return String()
    }
    set {member = .didUri(newValue)}
  }

  public var x509Cert: String {
    get {
      if case .x509Cert(let v)? = member {return v}
      return String()
    }
    set {member = .x509Cert(newValue)}
  }

  public var presentationTypeUri: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Member: Equatable {
    case didUri(String)
    case x509Cert(String)

  #if !swift(>=4.1)
    public static func ==(lhs: Services_Trustregistry_V1_CheckVerifierStatusRequest.OneOf_Member, rhs: Services_Trustregistry_V1_CheckVerifierStatusRequest.OneOf_Member) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.didUri, .didUri): return {
        guard case .didUri(let l) = lhs, case .didUri(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.x509Cert, .x509Cert): return {
        guard case .x509Cert(let l) = lhs, case .x509Cert(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Services_Trustregistry_V1_CheckVerifierStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: Services_Trustregistry_V1_RegistrationStatus = .current

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Services_Trustregistry_V1_FetchDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var governanceFrameworkUri: String = String()

  public var query: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Services_Trustregistry_V1_FetchDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var responseJson: String = String()

  public var hasMoreResults_p: Bool = false

  public var continuationToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "services.trustregistry.v1"

extension Services_Trustregistry_V1_RegistrationStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CURRENT"),
    1: .same(proto: "EXPIRED"),
    2: .same(proto: "TERMINATED"),
    3: .same(proto: "REVOKED"),
    10: .same(proto: "NOT_FOUND"),
  ]
}

extension Services_Trustregistry_V1_AddFrameworkRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddFrameworkRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "governance_framework"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._governanceFramework) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._governanceFramework {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_AddFrameworkRequest, rhs: Services_Trustregistry_V1_AddFrameworkRequest) -> Bool {
    if lhs._governanceFramework != rhs._governanceFramework {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_AddFrameworkResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddFrameworkResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_AddFrameworkResponse, rhs: Services_Trustregistry_V1_AddFrameworkResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_RemoveFrameworkRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoveFrameworkRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "governance_framework"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._governanceFramework) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._governanceFramework {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_RemoveFrameworkRequest, rhs: Services_Trustregistry_V1_RemoveFrameworkRequest) -> Bool {
    if lhs._governanceFramework != rhs._governanceFramework {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_RemoveFrameworkResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoveFrameworkResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_RemoveFrameworkResponse, rhs: Services_Trustregistry_V1_RemoveFrameworkResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_SearchRegistryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchRegistryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "query"),
    2: .standard(proto: "continuation_token"),
    5: .same(proto: "options"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.query) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.continuationToken) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._options) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.query.isEmpty {
      try visitor.visitSingularStringField(value: self.query, fieldNumber: 1)
    }
    if !self.continuationToken.isEmpty {
      try visitor.visitSingularStringField(value: self.continuationToken, fieldNumber: 2)
    }
    try { if let v = self._options {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_SearchRegistryRequest, rhs: Services_Trustregistry_V1_SearchRegistryRequest) -> Bool {
    if lhs.query != rhs.query {return false}
    if lhs.continuationToken != rhs.continuationToken {return false}
    if lhs._options != rhs._options {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_SearchRegistryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchRegistryResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "items_json"),
    2: .standard(proto: "has_more"),
    3: .same(proto: "count"),
    4: .standard(proto: "continuation_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.itemsJson) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.hasMore_p) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.continuationToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.itemsJson.isEmpty {
      try visitor.visitSingularStringField(value: self.itemsJson, fieldNumber: 1)
    }
    if self.hasMore_p != false {
      try visitor.visitSingularBoolField(value: self.hasMore_p, fieldNumber: 2)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 3)
    }
    if !self.continuationToken.isEmpty {
      try visitor.visitSingularStringField(value: self.continuationToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_SearchRegistryResponse, rhs: Services_Trustregistry_V1_SearchRegistryResponse) -> Bool {
    if lhs.itemsJson != rhs.itemsJson {return false}
    if lhs.hasMore_p != rhs.hasMore_p {return false}
    if lhs.count != rhs.count {return false}
    if lhs.continuationToken != rhs.continuationToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_GovernanceFramework: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GovernanceFramework"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "governance_framework_uri"),
    2: .standard(proto: "trust_registry_uri"),
    3: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.governanceFrameworkUri) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.trustRegistryUri) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.governanceFrameworkUri.isEmpty {
      try visitor.visitSingularStringField(value: self.governanceFrameworkUri, fieldNumber: 1)
    }
    if !self.trustRegistryUri.isEmpty {
      try visitor.visitSingularStringField(value: self.trustRegistryUri, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_GovernanceFramework, rhs: Services_Trustregistry_V1_GovernanceFramework) -> Bool {
    if lhs.governanceFrameworkUri != rhs.governanceFrameworkUri {return false}
    if lhs.trustRegistryUri != rhs.trustRegistryUri {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_RegisterIssuerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterIssuerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "did_uri"),
    2: .standard(proto: "x509_cert"),
    10: .standard(proto: "credential_type_uri"),
    11: .standard(proto: "valid_from_utc"),
    12: .standard(proto: "valid_until_utc"),
    20: .standard(proto: "governance_framework_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.authority != nil {try decoder.handleConflictingOneOf()}
          self.authority = .didUri(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.authority != nil {try decoder.handleConflictingOneOf()}
          self.authority = .x509Cert(v)
        }
      }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.credentialTypeUri) }()
      case 11: try { try decoder.decodeSingularUInt64Field(value: &self.validFromUtc) }()
      case 12: try { try decoder.decodeSingularUInt64Field(value: &self.validUntilUtc) }()
      case 20: try { try decoder.decodeSingularStringField(value: &self.governanceFrameworkUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.authority {
    case .didUri?: try {
      guard case .didUri(let v)? = self.authority else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .x509Cert?: try {
      guard case .x509Cert(let v)? = self.authority else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.credentialTypeUri.isEmpty {
      try visitor.visitSingularStringField(value: self.credentialTypeUri, fieldNumber: 10)
    }
    if self.validFromUtc != 0 {
      try visitor.visitSingularUInt64Field(value: self.validFromUtc, fieldNumber: 11)
    }
    if self.validUntilUtc != 0 {
      try visitor.visitSingularUInt64Field(value: self.validUntilUtc, fieldNumber: 12)
    }
    if !self.governanceFrameworkUri.isEmpty {
      try visitor.visitSingularStringField(value: self.governanceFrameworkUri, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_RegisterIssuerRequest, rhs: Services_Trustregistry_V1_RegisterIssuerRequest) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.credentialTypeUri != rhs.credentialTypeUri {return false}
    if lhs.validFromUtc != rhs.validFromUtc {return false}
    if lhs.validUntilUtc != rhs.validUntilUtc {return false}
    if lhs.governanceFrameworkUri != rhs.governanceFrameworkUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_RegisterIssuerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterIssuerResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_RegisterIssuerResponse, rhs: Services_Trustregistry_V1_RegisterIssuerResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_RegisterVerifierRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterVerifierRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "did_uri"),
    2: .standard(proto: "x509_cert"),
    10: .standard(proto: "presentation_type_uri"),
    11: .standard(proto: "valid_from_utc"),
    12: .standard(proto: "valid_until_utc"),
    20: .standard(proto: "governance_framework_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.authority != nil {try decoder.handleConflictingOneOf()}
          self.authority = .didUri(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.authority != nil {try decoder.handleConflictingOneOf()}
          self.authority = .x509Cert(v)
        }
      }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.presentationTypeUri) }()
      case 11: try { try decoder.decodeSingularUInt64Field(value: &self.validFromUtc) }()
      case 12: try { try decoder.decodeSingularUInt64Field(value: &self.validUntilUtc) }()
      case 20: try { try decoder.decodeSingularStringField(value: &self.governanceFrameworkUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.authority {
    case .didUri?: try {
      guard case .didUri(let v)? = self.authority else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .x509Cert?: try {
      guard case .x509Cert(let v)? = self.authority else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.presentationTypeUri.isEmpty {
      try visitor.visitSingularStringField(value: self.presentationTypeUri, fieldNumber: 10)
    }
    if self.validFromUtc != 0 {
      try visitor.visitSingularUInt64Field(value: self.validFromUtc, fieldNumber: 11)
    }
    if self.validUntilUtc != 0 {
      try visitor.visitSingularUInt64Field(value: self.validUntilUtc, fieldNumber: 12)
    }
    if !self.governanceFrameworkUri.isEmpty {
      try visitor.visitSingularStringField(value: self.governanceFrameworkUri, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_RegisterVerifierRequest, rhs: Services_Trustregistry_V1_RegisterVerifierRequest) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.presentationTypeUri != rhs.presentationTypeUri {return false}
    if lhs.validFromUtc != rhs.validFromUtc {return false}
    if lhs.validUntilUtc != rhs.validUntilUtc {return false}
    if lhs.governanceFrameworkUri != rhs.governanceFrameworkUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_RegisterVerifierResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterVerifierResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_RegisterVerifierResponse, rhs: Services_Trustregistry_V1_RegisterVerifierResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_UnregisterIssuerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnregisterIssuerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "did_uri"),
    2: .standard(proto: "x509_cert"),
    10: .standard(proto: "credential_type_uri"),
    20: .standard(proto: "governance_framework_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.authority != nil {try decoder.handleConflictingOneOf()}
          self.authority = .didUri(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.authority != nil {try decoder.handleConflictingOneOf()}
          self.authority = .x509Cert(v)
        }
      }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.credentialTypeUri) }()
      case 20: try { try decoder.decodeSingularStringField(value: &self.governanceFrameworkUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.authority {
    case .didUri?: try {
      guard case .didUri(let v)? = self.authority else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .x509Cert?: try {
      guard case .x509Cert(let v)? = self.authority else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.credentialTypeUri.isEmpty {
      try visitor.visitSingularStringField(value: self.credentialTypeUri, fieldNumber: 10)
    }
    if !self.governanceFrameworkUri.isEmpty {
      try visitor.visitSingularStringField(value: self.governanceFrameworkUri, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_UnregisterIssuerRequest, rhs: Services_Trustregistry_V1_UnregisterIssuerRequest) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.credentialTypeUri != rhs.credentialTypeUri {return false}
    if lhs.governanceFrameworkUri != rhs.governanceFrameworkUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_UnregisterIssuerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnregisterIssuerResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_UnregisterIssuerResponse, rhs: Services_Trustregistry_V1_UnregisterIssuerResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_UnregisterVerifierRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnregisterVerifierRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "did_uri"),
    2: .standard(proto: "x509_cert"),
    10: .standard(proto: "presentation_type_uri"),
    20: .standard(proto: "governance_framework_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.authority != nil {try decoder.handleConflictingOneOf()}
          self.authority = .didUri(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.authority != nil {try decoder.handleConflictingOneOf()}
          self.authority = .x509Cert(v)
        }
      }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.presentationTypeUri) }()
      case 20: try { try decoder.decodeSingularStringField(value: &self.governanceFrameworkUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.authority {
    case .didUri?: try {
      guard case .didUri(let v)? = self.authority else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .x509Cert?: try {
      guard case .x509Cert(let v)? = self.authority else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.presentationTypeUri.isEmpty {
      try visitor.visitSingularStringField(value: self.presentationTypeUri, fieldNumber: 10)
    }
    if !self.governanceFrameworkUri.isEmpty {
      try visitor.visitSingularStringField(value: self.governanceFrameworkUri, fieldNumber: 20)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_UnregisterVerifierRequest, rhs: Services_Trustregistry_V1_UnregisterVerifierRequest) -> Bool {
    if lhs.authority != rhs.authority {return false}
    if lhs.presentationTypeUri != rhs.presentationTypeUri {return false}
    if lhs.governanceFrameworkUri != rhs.governanceFrameworkUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_UnregisterVerifierResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnregisterVerifierResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_UnregisterVerifierResponse, rhs: Services_Trustregistry_V1_UnregisterVerifierResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_CheckIssuerStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckIssuerStatusRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "governance_framework_uri"),
    2: .standard(proto: "did_uri"),
    3: .standard(proto: "x509_cert"),
    4: .standard(proto: "credential_type_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.governanceFrameworkUri) }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.member != nil {try decoder.handleConflictingOneOf()}
          self.member = .didUri(v)
        }
      }()
      case 3: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.member != nil {try decoder.handleConflictingOneOf()}
          self.member = .x509Cert(v)
        }
      }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.credentialTypeUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.governanceFrameworkUri.isEmpty {
      try visitor.visitSingularStringField(value: self.governanceFrameworkUri, fieldNumber: 1)
    }
    switch self.member {
    case .didUri?: try {
      guard case .didUri(let v)? = self.member else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .x509Cert?: try {
      guard case .x509Cert(let v)? = self.member else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if !self.credentialTypeUri.isEmpty {
      try visitor.visitSingularStringField(value: self.credentialTypeUri, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_CheckIssuerStatusRequest, rhs: Services_Trustregistry_V1_CheckIssuerStatusRequest) -> Bool {
    if lhs.governanceFrameworkUri != rhs.governanceFrameworkUri {return false}
    if lhs.member != rhs.member {return false}
    if lhs.credentialTypeUri != rhs.credentialTypeUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_CheckIssuerStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckIssuerStatusResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .current {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_CheckIssuerStatusResponse, rhs: Services_Trustregistry_V1_CheckIssuerStatusResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_CheckVerifierStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckVerifierStatusRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "governance_framework_uri"),
    2: .standard(proto: "did_uri"),
    3: .standard(proto: "x509_cert"),
    4: .standard(proto: "presentation_type_uri"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.governanceFrameworkUri) }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.member != nil {try decoder.handleConflictingOneOf()}
          self.member = .didUri(v)
        }
      }()
      case 3: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.member != nil {try decoder.handleConflictingOneOf()}
          self.member = .x509Cert(v)
        }
      }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.presentationTypeUri) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.governanceFrameworkUri.isEmpty {
      try visitor.visitSingularStringField(value: self.governanceFrameworkUri, fieldNumber: 1)
    }
    switch self.member {
    case .didUri?: try {
      guard case .didUri(let v)? = self.member else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .x509Cert?: try {
      guard case .x509Cert(let v)? = self.member else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if !self.presentationTypeUri.isEmpty {
      try visitor.visitSingularStringField(value: self.presentationTypeUri, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_CheckVerifierStatusRequest, rhs: Services_Trustregistry_V1_CheckVerifierStatusRequest) -> Bool {
    if lhs.governanceFrameworkUri != rhs.governanceFrameworkUri {return false}
    if lhs.member != rhs.member {return false}
    if lhs.presentationTypeUri != rhs.presentationTypeUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_CheckVerifierStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckVerifierStatusResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .current {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_CheckVerifierStatusResponse, rhs: Services_Trustregistry_V1_CheckVerifierStatusResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_FetchDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FetchDataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "governance_framework_uri"),
    2: .same(proto: "query"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.governanceFrameworkUri) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.query) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.governanceFrameworkUri.isEmpty {
      try visitor.visitSingularStringField(value: self.governanceFrameworkUri, fieldNumber: 1)
    }
    if !self.query.isEmpty {
      try visitor.visitSingularStringField(value: self.query, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_FetchDataRequest, rhs: Services_Trustregistry_V1_FetchDataRequest) -> Bool {
    if lhs.governanceFrameworkUri != rhs.governanceFrameworkUri {return false}
    if lhs.query != rhs.query {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Trustregistry_V1_FetchDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FetchDataResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "response_json"),
    2: .standard(proto: "has_more_results"),
    3: .standard(proto: "continuation_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.responseJson) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.hasMoreResults_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.continuationToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.responseJson.isEmpty {
      try visitor.visitSingularStringField(value: self.responseJson, fieldNumber: 1)
    }
    if self.hasMoreResults_p != false {
      try visitor.visitSingularBoolField(value: self.hasMoreResults_p, fieldNumber: 2)
    }
    if !self.continuationToken.isEmpty {
      try visitor.visitSingularStringField(value: self.continuationToken, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Trustregistry_V1_FetchDataResponse, rhs: Services_Trustregistry_V1_FetchDataResponse) -> Bool {
    if lhs.responseJson != rhs.responseJson {return false}
    if lhs.hasMoreResults_p != rhs.hasMoreResults_p {return false}
    if lhs.continuationToken != rhs.continuationToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
