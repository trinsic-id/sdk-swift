// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/trust-registry/v1/trust-registry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public enum Services_Trustregistry_V1_RegistrationStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Member is currently authorized, as of the time of the query
    case current // = 0

    /// Member's authorization has expired
    case expired // = 1

    /// Member has voluntarily ceased Issuer role under the specific EGF
    case terminated // = 2

    /// Member authority under specific EGF was terminated by the governing authority
    case revoked // = 3

    /// Member is not associated with given credential schema in the EGF
    case notFound // = 10
    case UNRECOGNIZED(Int)

    public init() {
        self = .current
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .current
        case 1: self = .expired
        case 2: self = .terminated
        case 3: self = .revoked
        case 10: self = .notFound
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    public var rawValue: Int {
        switch self {
        case .current: return 0
        case .expired: return 1
        case .terminated: return 2
        case .revoked: return 3
        case .notFound: return 10
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension Services_Trustregistry_V1_RegistrationStatus: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        public static let allCases: [Services_Trustregistry_V1_RegistrationStatus] = [
            .current,
            .expired,
            .terminated,
            .revoked,
            .notFound,
        ]
    }

#endif // swift(>=4.2)

/// Request to register a member as a valid issuer of a specific credential schema.
/// Only one of `did_uri`, `wallet_id`, or `email` may be specified.
public struct Services_Trustregistry_V1_RegisterMemberRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var member: Services_Trustregistry_V1_RegisterMemberRequest.OneOf_Member?

    /// DID URI of member to register
    public var didUri: String {
        get {
            if case let .didUri(v)? = member { return v }
            return String()
        }
        set { member = .didUri(newValue) }
    }

    /// Trinsic Wallet ID of member to register
    public var walletID: String {
        get {
            if case let .walletID(v)? = member { return v }
            return String()
        }
        set { member = .walletID(newValue) }
    }

    /// Email address of member to register. Must be associated with an existing Trinsic account.
    public var email: String {
        get {
            if case let .email(v)? = member { return v }
            return String()
        }
        set { member = .email(newValue) }
    }

    /// URI of credential schema to register member as authorized issuer of
    public var schemaUri: String = .init()

    /// Unix Timestamp member is valid from. Member will not be considered valid before this timestamp.
    public var validFromUtc: UInt64 = 0

    /// Unix Timestamp member is valid until. Member will not be considered valid after this timestamp.
    public var validUntilUtc: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Member: Equatable {
        /// DID URI of member to register
        case didUri(String)
        /// Trinsic Wallet ID of member to register
        case walletID(String)
        /// Email address of member to register. Must be associated with an existing Trinsic account.
        case email(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Trustregistry_V1_RegisterMemberRequest.OneOf_Member, rhs: Services_Trustregistry_V1_RegisterMemberRequest.OneOf_Member) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.didUri, .didUri): return {
                        guard case let .didUri(l) = lhs, case let .didUri(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.walletID, .walletID): return {
                        guard case let .walletID(l) = lhs, case let .walletID(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.email, .email): return {
                        guard case let .email(l) = lhs, case let .email(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

/// Response to `RegisterMemberRequest`
public struct Services_Trustregistry_V1_RegisterMemberResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to unregister a member as a valid issuer of a specific credential schema.
/// Only one of `did_uri`, `wallet_id`, or `email` may be specified.
/// The URI of the credential schema must be specified.
public struct Services_Trustregistry_V1_UnregisterMemberRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var member: Services_Trustregistry_V1_UnregisterMemberRequest.OneOf_Member?

    /// DID URI of member to unregister
    public var didUri: String {
        get {
            if case let .didUri(v)? = member { return v }
            return String()
        }
        set { member = .didUri(newValue) }
    }

    /// Trinsic Wallet ID of member to unregister
    public var walletID: String {
        get {
            if case let .walletID(v)? = member { return v }
            return String()
        }
        set { member = .walletID(newValue) }
    }

    /// Email address of member to unregister. Must be associated with an existing Trinsic account.
    public var email: String {
        get {
            if case let .email(v)? = member { return v }
            return String()
        }
        set { member = .email(newValue) }
    }

    /// URI of credential schema to unregister member as authorized issuer of
    public var schemaUri: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Member: Equatable {
        /// DID URI of member to unregister
        case didUri(String)
        /// Trinsic Wallet ID of member to unregister
        case walletID(String)
        /// Email address of member to unregister. Must be associated with an existing Trinsic account.
        case email(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Trustregistry_V1_UnregisterMemberRequest.OneOf_Member, rhs: Services_Trustregistry_V1_UnregisterMemberRequest.OneOf_Member) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.didUri, .didUri): return {
                        guard case let .didUri(l) = lhs, case let .didUri(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.walletID, .walletID): return {
                        guard case let .walletID(l) = lhs, case let .walletID(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.email, .email): return {
                        guard case let .email(l) = lhs, case let .email(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

/// Response to `UnregisterMemberRequest`
public struct Services_Trustregistry_V1_UnregisterMemberResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to fetch member status in Trust Registry for a specific credential schema.
public struct Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// DID URI of member
    public var didUri: String = .init()

    /// URI of credential schema associated with member
    public var schemaUri: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Response to `GetMemberAuthorizationStatusRequest`
public struct Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Status of member for given credential schema
    public var status: Services_Trustregistry_V1_RegistrationStatus = .current

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Trustregistry_V1_ListAuthorizedMembersRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// id of schema that needs to be checked
    public var schemaUri: String {
        get { _schemaUri ?? String() }
        set { _schemaUri = newValue }
    }

    /// Returns true if `schemaUri` has been explicitly set.
    public var hasSchemaUri: Bool { _schemaUri != nil }
    /// Clears the value of `schemaUri`. Subsequent reads from it will return its default value.
    public mutating func clearSchemaUri() { _schemaUri = nil }

    /// Token to fetch next set of results, from previous `ListAuthorizedMembersResponse`
    public var continuationToken: String {
        get { _continuationToken ?? String() }
        set { _continuationToken = newValue }
    }

    /// Returns true if `continuationToken` has been explicitly set.
    public var hasContinuationToken: Bool { _continuationToken != nil }
    /// Clears the value of `continuationToken`. Subsequent reads from it will return its default value.
    public mutating func clearContinuationToken() { _continuationToken = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    private var _schemaUri: String?
    private var _continuationToken: String?
}

/// Response to `ListAuthorizedMembersRequest`
public struct Services_Trustregistry_V1_ListAuthorizedMembersResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// JSON string containing array of resultant objects
    public var authorizedMembers: [Services_Trustregistry_V1_AuthorizedMember] = []

    /// Whether more data is available to fetch for query
    public var hasMoreResults_p: Bool = false

    /// Token to fetch next set of results via `ListAuthorizedMembersRequest`
    public var continuationToken: String = .init()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Trustregistry_V1_AuthorizedMember {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var did: String = .init()

    public var authorizedMemberSchemas: [Services_Trustregistry_V1_AuthorizedMemberSchema] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct Services_Trustregistry_V1_AuthorizedMemberSchema {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var schemaUri: String = .init()

    public var status: String = .init()

    public var statusDetails: String = .init()

    public var validFrom: UInt64 = 0

    public var validUntil: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// Request to get a member of the Trust Registry
public struct Services_Trustregistry_V1_GetMemberRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var member: Services_Trustregistry_V1_GetMemberRequest.OneOf_Member?

    /// DID URI of member to get
    public var didUri: String {
        get {
            if case let .didUri(v)? = member { return v }
            return String()
        }
        set { member = .didUri(newValue) }
    }

    /// Trinsic Wallet ID of member to get
    public var walletID: String {
        get {
            if case let .walletID(v)? = member { return v }
            return String()
        }
        set { member = .walletID(newValue) }
    }

    /// Email address of member to get. Must be associated with an existing Trinsic account.
    public var email: String {
        get {
            if case let .email(v)? = member { return v }
            return String()
        }
        set { member = .email(newValue) }
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Member: Equatable {
        /// DID URI of member to get
        case didUri(String)
        /// Trinsic Wallet ID of member to get
        case walletID(String)
        /// Email address of member to get. Must be associated with an existing Trinsic account.
        case email(String)

        #if !swift(>=4.1)
            public static func == (lhs: Services_Trustregistry_V1_GetMemberRequest.OneOf_Member, rhs: Services_Trustregistry_V1_GetMemberRequest.OneOf_Member) -> Bool {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch (lhs, rhs) {
                case (.didUri, .didUri): return {
                        guard case let .didUri(l) = lhs, case let .didUri(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.walletID, .walletID): return {
                        guard case let .walletID(l) = lhs, case let .walletID(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                case (.email, .email): return {
                        guard case let .email(l) = lhs, case let .email(r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                default: return false
                }
            }
        #endif
    }

    public init() {}
}

/// Response to `GetMemberAuthorizationStatusRequest`
public struct Services_Trustregistry_V1_GetMemberResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Member for given did in given framework
    public var authorizedMember: Services_Trustregistry_V1_AuthorizedMember {
        get { _authorizedMember ?? Services_Trustregistry_V1_AuthorizedMember() }
        set { _authorizedMember = newValue }
    }

    /// Returns true if `authorizedMember` has been explicitly set.
    public var hasAuthorizedMember: Bool { _authorizedMember != nil }
    /// Clears the value of `authorizedMember`. Subsequent reads from it will return its default value.
    public mutating func clearAuthorizedMember() { _authorizedMember = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    private var _authorizedMember: Services_Trustregistry_V1_AuthorizedMember?
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension Services_Trustregistry_V1_RegistrationStatus: @unchecked Sendable {}
    extension Services_Trustregistry_V1_RegisterMemberRequest: @unchecked Sendable {}
    extension Services_Trustregistry_V1_RegisterMemberRequest.OneOf_Member: @unchecked Sendable {}
    extension Services_Trustregistry_V1_RegisterMemberResponse: @unchecked Sendable {}
    extension Services_Trustregistry_V1_UnregisterMemberRequest: @unchecked Sendable {}
    extension Services_Trustregistry_V1_UnregisterMemberRequest.OneOf_Member: @unchecked Sendable {}
    extension Services_Trustregistry_V1_UnregisterMemberResponse: @unchecked Sendable {}
    extension Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest: @unchecked Sendable {}
    extension Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse: @unchecked Sendable {}
    extension Services_Trustregistry_V1_ListAuthorizedMembersRequest: @unchecked Sendable {}
    extension Services_Trustregistry_V1_ListAuthorizedMembersResponse: @unchecked Sendable {}
    extension Services_Trustregistry_V1_AuthorizedMember: @unchecked Sendable {}
    extension Services_Trustregistry_V1_AuthorizedMemberSchema: @unchecked Sendable {}
    extension Services_Trustregistry_V1_GetMemberRequest: @unchecked Sendable {}
    extension Services_Trustregistry_V1_GetMemberRequest.OneOf_Member: @unchecked Sendable {}
    extension Services_Trustregistry_V1_GetMemberResponse: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "services.trustregistry.v1"

extension Services_Trustregistry_V1_RegistrationStatus: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "CURRENT"),
        1: .same(proto: "EXPIRED"),
        2: .same(proto: "TERMINATED"),
        3: .same(proto: "REVOKED"),
        10: .same(proto: "NOT_FOUND"),
    ]
}

extension Services_Trustregistry_V1_RegisterMemberRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".RegisterMemberRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "did_uri"),
        3: .standard(proto: "wallet_id"),
        4: .same(proto: "email"),
        10: .standard(proto: "schema_uri"),
        11: .standard(proto: "valid_from_utc"),
        12: .standard(proto: "valid_until_utc"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.member != nil { try decoder.handleConflictingOneOf() }
                        self.member = .didUri(v)
                    }
                }()
            case 3: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.member != nil { try decoder.handleConflictingOneOf() }
                        self.member = .walletID(v)
                    }
                }()
            case 4: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.member != nil { try decoder.handleConflictingOneOf() }
                        self.member = .email(v)
                    }
                }()
            case 10: try decoder.decodeSingularStringField(value: &schemaUri)
            case 11: try decoder.decodeSingularUInt64Field(value: &validFromUtc)
            case 12: try decoder.decodeSingularUInt64Field(value: &validUntilUtc)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch member {
        case .didUri?: try {
                guard case let .didUri(v)? = self.member else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 1)
            }()
        case .walletID?: try {
                guard case let .walletID(v)? = self.member else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 3)
            }()
        case .email?: try {
                guard case let .email(v)? = self.member else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 4)
            }()
        case nil: break
        }
        if !schemaUri.isEmpty {
            try visitor.visitSingularStringField(value: schemaUri, fieldNumber: 10)
        }
        if validFromUtc != 0 {
            try visitor.visitSingularUInt64Field(value: validFromUtc, fieldNumber: 11)
        }
        if validUntilUtc != 0 {
            try visitor.visitSingularUInt64Field(value: validUntilUtc, fieldNumber: 12)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Trustregistry_V1_RegisterMemberRequest, rhs: Services_Trustregistry_V1_RegisterMemberRequest) -> Bool {
        if lhs.member != rhs.member { return false }
        if lhs.schemaUri != rhs.schemaUri { return false }
        if lhs.validFromUtc != rhs.validFromUtc { return false }
        if lhs.validUntilUtc != rhs.validUntilUtc { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Trustregistry_V1_RegisterMemberResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".RegisterMemberResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Trustregistry_V1_RegisterMemberResponse, rhs: Services_Trustregistry_V1_RegisterMemberResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Trustregistry_V1_UnregisterMemberRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".UnregisterMemberRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "did_uri"),
        3: .standard(proto: "wallet_id"),
        4: .same(proto: "email"),
        10: .standard(proto: "schema_uri"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.member != nil { try decoder.handleConflictingOneOf() }
                        self.member = .didUri(v)
                    }
                }()
            case 3: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.member != nil { try decoder.handleConflictingOneOf() }
                        self.member = .walletID(v)
                    }
                }()
            case 4: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.member != nil { try decoder.handleConflictingOneOf() }
                        self.member = .email(v)
                    }
                }()
            case 10: try decoder.decodeSingularStringField(value: &schemaUri)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch member {
        case .didUri?: try {
                guard case let .didUri(v)? = self.member else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 1)
            }()
        case .walletID?: try {
                guard case let .walletID(v)? = self.member else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 3)
            }()
        case .email?: try {
                guard case let .email(v)? = self.member else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 4)
            }()
        case nil: break
        }
        if !schemaUri.isEmpty {
            try visitor.visitSingularStringField(value: schemaUri, fieldNumber: 10)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Trustregistry_V1_UnregisterMemberRequest, rhs: Services_Trustregistry_V1_UnregisterMemberRequest) -> Bool {
        if lhs.member != rhs.member { return false }
        if lhs.schemaUri != rhs.schemaUri { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Trustregistry_V1_UnregisterMemberResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".UnregisterMemberResponse"
    public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Trustregistry_V1_UnregisterMemberResponse, rhs: Services_Trustregistry_V1_UnregisterMemberResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetMemberAuthorizationStatusRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "did_uri"),
        2: .standard(proto: "schema_uri"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &didUri)
            case 2: try decoder.decodeSingularStringField(value: &schemaUri)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !didUri.isEmpty {
            try visitor.visitSingularStringField(value: didUri, fieldNumber: 1)
        }
        if !schemaUri.isEmpty {
            try visitor.visitSingularStringField(value: schemaUri, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest, rhs: Services_Trustregistry_V1_GetMemberAuthorizationStatusRequest) -> Bool {
        if lhs.didUri != rhs.didUri { return false }
        if lhs.schemaUri != rhs.schemaUri { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetMemberAuthorizationStatusResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "status"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularEnumField(value: &status)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if status != .current {
            try visitor.visitSingularEnumField(value: status, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse, rhs: Services_Trustregistry_V1_GetMemberAuthorizationStatusResponse) -> Bool {
        if lhs.status != rhs.status { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Trustregistry_V1_ListAuthorizedMembersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ListAuthorizedMembersRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "schema_uri"),
        2: .standard(proto: "continuation_token"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &_schemaUri)
            case 2: try decoder.decodeSingularStringField(value: &_continuationToken)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._schemaUri {
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        } }()
        try { if let v = self._continuationToken {
            try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Trustregistry_V1_ListAuthorizedMembersRequest, rhs: Services_Trustregistry_V1_ListAuthorizedMembersRequest) -> Bool {
        if lhs._schemaUri != rhs._schemaUri { return false }
        if lhs._continuationToken != rhs._continuationToken { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Trustregistry_V1_ListAuthorizedMembersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".ListAuthorizedMembersResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "authorized_members"),
        2: .standard(proto: "has_more_results"),
        3: .standard(proto: "continuation_token"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &authorizedMembers)
            case 2: try decoder.decodeSingularBoolField(value: &hasMoreResults_p)
            case 3: try decoder.decodeSingularStringField(value: &continuationToken)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !authorizedMembers.isEmpty {
            try visitor.visitRepeatedMessageField(value: authorizedMembers, fieldNumber: 1)
        }
        if hasMoreResults_p != false {
            try visitor.visitSingularBoolField(value: hasMoreResults_p, fieldNumber: 2)
        }
        if !continuationToken.isEmpty {
            try visitor.visitSingularStringField(value: continuationToken, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Trustregistry_V1_ListAuthorizedMembersResponse, rhs: Services_Trustregistry_V1_ListAuthorizedMembersResponse) -> Bool {
        if lhs.authorizedMembers != rhs.authorizedMembers { return false }
        if lhs.hasMoreResults_p != rhs.hasMoreResults_p { return false }
        if lhs.continuationToken != rhs.continuationToken { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Trustregistry_V1_AuthorizedMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AuthorizedMember"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "did"),
        2: .standard(proto: "authorized_member_schemas"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &did)
            case 2: try decoder.decodeRepeatedMessageField(value: &authorizedMemberSchemas)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !did.isEmpty {
            try visitor.visitSingularStringField(value: did, fieldNumber: 1)
        }
        if !authorizedMemberSchemas.isEmpty {
            try visitor.visitRepeatedMessageField(value: authorizedMemberSchemas, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Trustregistry_V1_AuthorizedMember, rhs: Services_Trustregistry_V1_AuthorizedMember) -> Bool {
        if lhs.did != rhs.did { return false }
        if lhs.authorizedMemberSchemas != rhs.authorizedMemberSchemas { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Trustregistry_V1_AuthorizedMemberSchema: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".AuthorizedMemberSchema"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "schema_uri"),
        2: .same(proto: "status"),
        3: .standard(proto: "status_details"),
        4: .standard(proto: "valid_from"),
        5: .standard(proto: "valid_until"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &schemaUri)
            case 2: try decoder.decodeSingularStringField(value: &status)
            case 3: try decoder.decodeSingularStringField(value: &statusDetails)
            case 4: try decoder.decodeSingularUInt64Field(value: &validFrom)
            case 5: try decoder.decodeSingularUInt64Field(value: &validUntil)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !schemaUri.isEmpty {
            try visitor.visitSingularStringField(value: schemaUri, fieldNumber: 1)
        }
        if !status.isEmpty {
            try visitor.visitSingularStringField(value: status, fieldNumber: 2)
        }
        if !statusDetails.isEmpty {
            try visitor.visitSingularStringField(value: statusDetails, fieldNumber: 3)
        }
        if validFrom != 0 {
            try visitor.visitSingularUInt64Field(value: validFrom, fieldNumber: 4)
        }
        if validUntil != 0 {
            try visitor.visitSingularUInt64Field(value: validUntil, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Trustregistry_V1_AuthorizedMemberSchema, rhs: Services_Trustregistry_V1_AuthorizedMemberSchema) -> Bool {
        if lhs.schemaUri != rhs.schemaUri { return false }
        if lhs.status != rhs.status { return false }
        if lhs.statusDetails != rhs.statusDetails { return false }
        if lhs.validFrom != rhs.validFrom { return false }
        if lhs.validUntil != rhs.validUntil { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Trustregistry_V1_GetMemberRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetMemberRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "did_uri"),
        3: .standard(proto: "wallet_id"),
        4: .same(proto: "email"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.member != nil { try decoder.handleConflictingOneOf() }
                        self.member = .didUri(v)
                    }
                }()
            case 3: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.member != nil { try decoder.handleConflictingOneOf() }
                        self.member = .walletID(v)
                    }
                }()
            case 4: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.member != nil { try decoder.handleConflictingOneOf() }
                        self.member = .email(v)
                    }
                }()
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch member {
        case .didUri?: try {
                guard case let .didUri(v)? = self.member else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 1)
            }()
        case .walletID?: try {
                guard case let .walletID(v)? = self.member else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 3)
            }()
        case .email?: try {
                guard case let .email(v)? = self.member else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 4)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Trustregistry_V1_GetMemberRequest, rhs: Services_Trustregistry_V1_GetMemberRequest) -> Bool {
        if lhs.member != rhs.member { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Services_Trustregistry_V1_GetMemberResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".GetMemberResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "authorized_member"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &_authorizedMember)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._authorizedMember {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Services_Trustregistry_V1_GetMemberResponse, rhs: Services_Trustregistry_V1_GetMemberResponse) -> Bool {
        if lhs._authorizedMember != rhs._authorizedMember { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
