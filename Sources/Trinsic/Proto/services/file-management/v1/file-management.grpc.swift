//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: services/file-management/v1/file-management.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `Services_Filemanagement_V1_FileManagementClient`, then call methods of this protocol to make API calls.
public protocol Services_Filemanagement_V1_FileManagementClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Services_Filemanagement_V1_FileManagementClientInterceptorFactoryProtocol? { get }

    func UploadFile(
        _ request: Services_Filemanagement_V1_UploadFileRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Filemanagement_V1_UploadFileRequest, Services_Filemanagement_V1_UploadFileResponse>

    func GetFile(
        _ request: Services_Filemanagement_V1_GetFileRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Filemanagement_V1_GetFileRequest, Services_Filemanagement_V1_GetFileResponse>

    func DeleteFile(
        _ request: Services_Filemanagement_V1_DeleteFileRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Filemanagement_V1_DeleteFileRequest, Services_Filemanagement_V1_DeleteFileResponse>

    func ListFiles(
        _ request: Services_Filemanagement_V1_ListFilesRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Filemanagement_V1_ListFilesRequest, Services_Filemanagement_V1_ListFilesResponse>

    func GetStorageStats(
        _ request: Services_Filemanagement_V1_GetStorageStatsRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Services_Filemanagement_V1_GetStorageStatsRequest, Services_Filemanagement_V1_GetStorageStatsResponse>
}

public extension Services_Filemanagement_V1_FileManagementClientProtocol {
    var serviceName: String {
        "services.filemanagement.v1.FileManagement"
    }

    /// Upload a file to Trinsic's CDN
    ///
    /// - Parameters:
    ///   - request: Request to send to UploadFile.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func UploadFile(
        _ request: Services_Filemanagement_V1_UploadFileRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Filemanagement_V1_UploadFileRequest, Services_Filemanagement_V1_UploadFileResponse> {
        makeUnaryCall(
            path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.UploadFile.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeUploadFileInterceptors() ?? []
        )
    }

    /// Fetch information about a file by its ID
    ///
    /// - Parameters:
    ///   - request: Request to send to GetFile.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func GetFile(
        _ request: Services_Filemanagement_V1_GetFileRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Filemanagement_V1_GetFileRequest, Services_Filemanagement_V1_GetFileResponse> {
        makeUnaryCall(
            path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.GetFile.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetFileInterceptors() ?? []
        )
    }

    /// Delete a file by its ID
    ///
    /// - Parameters:
    ///   - request: Request to send to DeleteFile.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func DeleteFile(
        _ request: Services_Filemanagement_V1_DeleteFileRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Filemanagement_V1_DeleteFileRequest, Services_Filemanagement_V1_DeleteFileResponse> {
        makeUnaryCall(
            path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.DeleteFile.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeDeleteFileInterceptors() ?? []
        )
    }

    /// List files the calling account has uploaded
    ///
    /// - Parameters:
    ///   - request: Request to send to ListFiles.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func ListFiles(
        _ request: Services_Filemanagement_V1_ListFilesRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Filemanagement_V1_ListFilesRequest, Services_Filemanagement_V1_ListFilesResponse> {
        makeUnaryCall(
            path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.ListFiles.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeListFilesInterceptors() ?? []
        )
    }

    /// Get statistics about files uploaded by the calling account
    ///
    /// - Parameters:
    ///   - request: Request to send to GetStorageStats.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func GetStorageStats(
        _ request: Services_Filemanagement_V1_GetStorageStatsRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Services_Filemanagement_V1_GetStorageStatsRequest, Services_Filemanagement_V1_GetStorageStatsResponse> {
        makeUnaryCall(
            path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.GetStorageStats.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetStorageStatsInterceptors() ?? []
        )
    }
}

#if compiler(>=5.6)
    @available(*, deprecated)
    extension Services_Filemanagement_V1_FileManagementClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Services_Filemanagement_V1_FileManagementNIOClient")
public final class Services_Filemanagement_V1_FileManagementClient: Services_Filemanagement_V1_FileManagementClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: Services_Filemanagement_V1_FileManagementClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    public var interceptors: Services_Filemanagement_V1_FileManagementClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the services.filemanagement.v1.FileManagement service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Filemanagement_V1_FileManagementClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

public struct Services_Filemanagement_V1_FileManagementNIOClient: Services_Filemanagement_V1_FileManagementClientProtocol {
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Services_Filemanagement_V1_FileManagementClientInterceptorFactoryProtocol?

    /// Creates a client for the services.filemanagement.v1.FileManagement service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Services_Filemanagement_V1_FileManagementClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

#if compiler(>=5.6)
    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public protocol Services_Filemanagement_V1_FileManagementAsyncClientProtocol: GRPCClient {
        static var serviceDescriptor: GRPCServiceDescriptor { get }
        var interceptors: Services_Filemanagement_V1_FileManagementClientInterceptorFactoryProtocol? { get }

        func makeUploadFileCall(
            _ request: Services_Filemanagement_V1_UploadFileRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Filemanagement_V1_UploadFileRequest, Services_Filemanagement_V1_UploadFileResponse>

        func makeGetFileCall(
            _ request: Services_Filemanagement_V1_GetFileRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Filemanagement_V1_GetFileRequest, Services_Filemanagement_V1_GetFileResponse>

        func makeDeleteFileCall(
            _ request: Services_Filemanagement_V1_DeleteFileRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Filemanagement_V1_DeleteFileRequest, Services_Filemanagement_V1_DeleteFileResponse>

        func makeListFilesCall(
            _ request: Services_Filemanagement_V1_ListFilesRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Filemanagement_V1_ListFilesRequest, Services_Filemanagement_V1_ListFilesResponse>

        func makeGetStorageStatsCall(
            _ request: Services_Filemanagement_V1_GetStorageStatsRequest,
            callOptions: CallOptions?
        ) -> GRPCAsyncUnaryCall<Services_Filemanagement_V1_GetStorageStatsRequest, Services_Filemanagement_V1_GetStorageStatsResponse>
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public extension Services_Filemanagement_V1_FileManagementAsyncClientProtocol {
        static var serviceDescriptor: GRPCServiceDescriptor {
            Services_Filemanagement_V1_FileManagementClientMetadata.serviceDescriptor
        }

        var interceptors: Services_Filemanagement_V1_FileManagementClientInterceptorFactoryProtocol? {
            nil
        }

        func makeUploadFileCall(
            _ request: Services_Filemanagement_V1_UploadFileRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Filemanagement_V1_UploadFileRequest, Services_Filemanagement_V1_UploadFileResponse> {
            makeAsyncUnaryCall(
                path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.UploadFile.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeUploadFileInterceptors() ?? []
            )
        }

        func makeGetFileCall(
            _ request: Services_Filemanagement_V1_GetFileRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Filemanagement_V1_GetFileRequest, Services_Filemanagement_V1_GetFileResponse> {
            makeAsyncUnaryCall(
                path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.GetFile.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeGetFileInterceptors() ?? []
            )
        }

        func makeDeleteFileCall(
            _ request: Services_Filemanagement_V1_DeleteFileRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Filemanagement_V1_DeleteFileRequest, Services_Filemanagement_V1_DeleteFileResponse> {
            makeAsyncUnaryCall(
                path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.DeleteFile.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeDeleteFileInterceptors() ?? []
            )
        }

        func makeListFilesCall(
            _ request: Services_Filemanagement_V1_ListFilesRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Filemanagement_V1_ListFilesRequest, Services_Filemanagement_V1_ListFilesResponse> {
            makeAsyncUnaryCall(
                path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.ListFiles.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeListFilesInterceptors() ?? []
            )
        }

        func makeGetStorageStatsCall(
            _ request: Services_Filemanagement_V1_GetStorageStatsRequest,
            callOptions: CallOptions? = nil
        ) -> GRPCAsyncUnaryCall<Services_Filemanagement_V1_GetStorageStatsRequest, Services_Filemanagement_V1_GetStorageStatsResponse> {
            makeAsyncUnaryCall(
                path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.GetStorageStats.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeGetStorageStatsInterceptors() ?? []
            )
        }
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public extension Services_Filemanagement_V1_FileManagementAsyncClientProtocol {
        func UploadFile(
            _ request: Services_Filemanagement_V1_UploadFileRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Filemanagement_V1_UploadFileResponse {
            try await performAsyncUnaryCall(
                path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.UploadFile.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeUploadFileInterceptors() ?? []
            )
        }

        func GetFile(
            _ request: Services_Filemanagement_V1_GetFileRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Filemanagement_V1_GetFileResponse {
            try await performAsyncUnaryCall(
                path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.GetFile.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeGetFileInterceptors() ?? []
            )
        }

        func DeleteFile(
            _ request: Services_Filemanagement_V1_DeleteFileRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Filemanagement_V1_DeleteFileResponse {
            try await performAsyncUnaryCall(
                path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.DeleteFile.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeDeleteFileInterceptors() ?? []
            )
        }

        func ListFiles(
            _ request: Services_Filemanagement_V1_ListFilesRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Filemanagement_V1_ListFilesResponse {
            try await performAsyncUnaryCall(
                path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.ListFiles.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeListFilesInterceptors() ?? []
            )
        }

        func GetStorageStats(
            _ request: Services_Filemanagement_V1_GetStorageStatsRequest,
            callOptions: CallOptions? = nil
        ) async throws -> Services_Filemanagement_V1_GetStorageStatsResponse {
            try await performAsyncUnaryCall(
                path: Services_Filemanagement_V1_FileManagementClientMetadata.Methods.GetStorageStats.path,
                request: request,
                callOptions: callOptions ?? defaultCallOptions,
                interceptors: interceptors?.makeGetStorageStatsInterceptors() ?? []
            )
        }
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public struct Services_Filemanagement_V1_FileManagementAsyncClient: Services_Filemanagement_V1_FileManagementAsyncClientProtocol {
        public var channel: GRPCChannel
        public var defaultCallOptions: CallOptions
        public var interceptors: Services_Filemanagement_V1_FileManagementClientInterceptorFactoryProtocol?

        public init(
            channel: GRPCChannel,
            defaultCallOptions: CallOptions = CallOptions(),
            interceptors: Services_Filemanagement_V1_FileManagementClientInterceptorFactoryProtocol? = nil
        ) {
            self.channel = channel
            self.defaultCallOptions = defaultCallOptions
            self.interceptors = interceptors
        }
    }

#endif // compiler(>=5.6)

public protocol Services_Filemanagement_V1_FileManagementClientInterceptorFactoryProtocol: GRPCSendable {
    /// - Returns: Interceptors to use when invoking 'UploadFile'.
    func makeUploadFileInterceptors() -> [ClientInterceptor<Services_Filemanagement_V1_UploadFileRequest, Services_Filemanagement_V1_UploadFileResponse>]

    /// - Returns: Interceptors to use when invoking 'GetFile'.
    func makeGetFileInterceptors() -> [ClientInterceptor<Services_Filemanagement_V1_GetFileRequest, Services_Filemanagement_V1_GetFileResponse>]

    /// - Returns: Interceptors to use when invoking 'DeleteFile'.
    func makeDeleteFileInterceptors() -> [ClientInterceptor<Services_Filemanagement_V1_DeleteFileRequest, Services_Filemanagement_V1_DeleteFileResponse>]

    /// - Returns: Interceptors to use when invoking 'ListFiles'.
    func makeListFilesInterceptors() -> [ClientInterceptor<Services_Filemanagement_V1_ListFilesRequest, Services_Filemanagement_V1_ListFilesResponse>]

    /// - Returns: Interceptors to use when invoking 'GetStorageStats'.
    func makeGetStorageStatsInterceptors() -> [ClientInterceptor<Services_Filemanagement_V1_GetStorageStatsRequest, Services_Filemanagement_V1_GetStorageStatsResponse>]
}

public enum Services_Filemanagement_V1_FileManagementClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "FileManagement",
        fullName: "services.filemanagement.v1.FileManagement",
        methods: [
            Services_Filemanagement_V1_FileManagementClientMetadata.Methods.UploadFile,
            Services_Filemanagement_V1_FileManagementClientMetadata.Methods.GetFile,
            Services_Filemanagement_V1_FileManagementClientMetadata.Methods.DeleteFile,
            Services_Filemanagement_V1_FileManagementClientMetadata.Methods.ListFiles,
            Services_Filemanagement_V1_FileManagementClientMetadata.Methods.GetStorageStats,
        ]
    )

    public enum Methods {
        public static let UploadFile = GRPCMethodDescriptor(
            name: "UploadFile",
            path: "/services.filemanagement.v1.FileManagement/UploadFile",
            type: GRPCCallType.unary
        )

        public static let GetFile = GRPCMethodDescriptor(
            name: "GetFile",
            path: "/services.filemanagement.v1.FileManagement/GetFile",
            type: GRPCCallType.unary
        )

        public static let DeleteFile = GRPCMethodDescriptor(
            name: "DeleteFile",
            path: "/services.filemanagement.v1.FileManagement/DeleteFile",
            type: GRPCCallType.unary
        )

        public static let ListFiles = GRPCMethodDescriptor(
            name: "ListFiles",
            path: "/services.filemanagement.v1.FileManagement/ListFiles",
            type: GRPCCallType.unary
        )

        public static let GetStorageStats = GRPCMethodDescriptor(
            name: "GetStorageStats",
            path: "/services.filemanagement.v1.FileManagement/GetStorageStats",
            type: GRPCCallType.unary
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Services_Filemanagement_V1_FileManagementProvider: CallHandlerProvider {
    var interceptors: Services_Filemanagement_V1_FileManagementServerInterceptorFactoryProtocol? { get }

    /// Upload a file to Trinsic's CDN
    func UploadFile(request: Services_Filemanagement_V1_UploadFileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Filemanagement_V1_UploadFileResponse>

    /// Fetch information about a file by its ID
    func GetFile(request: Services_Filemanagement_V1_GetFileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Filemanagement_V1_GetFileResponse>

    /// Delete a file by its ID
    func DeleteFile(request: Services_Filemanagement_V1_DeleteFileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Filemanagement_V1_DeleteFileResponse>

    /// List files the calling account has uploaded
    func ListFiles(request: Services_Filemanagement_V1_ListFilesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Filemanagement_V1_ListFilesResponse>

    /// Get statistics about files uploaded by the calling account
    func GetStorageStats(request: Services_Filemanagement_V1_GetStorageStatsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Filemanagement_V1_GetStorageStatsResponse>
}

public extension Services_Filemanagement_V1_FileManagementProvider {
    var serviceName: Substring {
        Services_Filemanagement_V1_FileManagementServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "UploadFile":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Filemanagement_V1_UploadFileRequest>(),
                responseSerializer: ProtobufSerializer<Services_Filemanagement_V1_UploadFileResponse>(),
                interceptors: interceptors?.makeUploadFileInterceptors() ?? [],
                userFunction: UploadFile(request:context:)
            )

        case "GetFile":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Filemanagement_V1_GetFileRequest>(),
                responseSerializer: ProtobufSerializer<Services_Filemanagement_V1_GetFileResponse>(),
                interceptors: interceptors?.makeGetFileInterceptors() ?? [],
                userFunction: GetFile(request:context:)
            )

        case "DeleteFile":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Filemanagement_V1_DeleteFileRequest>(),
                responseSerializer: ProtobufSerializer<Services_Filemanagement_V1_DeleteFileResponse>(),
                interceptors: interceptors?.makeDeleteFileInterceptors() ?? [],
                userFunction: DeleteFile(request:context:)
            )

        case "ListFiles":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Filemanagement_V1_ListFilesRequest>(),
                responseSerializer: ProtobufSerializer<Services_Filemanagement_V1_ListFilesResponse>(),
                interceptors: interceptors?.makeListFilesInterceptors() ?? [],
                userFunction: ListFiles(request:context:)
            )

        case "GetStorageStats":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Services_Filemanagement_V1_GetStorageStatsRequest>(),
                responseSerializer: ProtobufSerializer<Services_Filemanagement_V1_GetStorageStatsResponse>(),
                interceptors: interceptors?.makeGetStorageStatsInterceptors() ?? [],
                userFunction: GetStorageStats(request:context:)
            )

        default:
            return nil
        }
    }
}

#if compiler(>=5.6)

    /// To implement a server, implement an object which conforms to this protocol.
    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public protocol Services_Filemanagement_V1_FileManagementAsyncProvider: CallHandlerProvider {
        static var serviceDescriptor: GRPCServiceDescriptor { get }
        var interceptors: Services_Filemanagement_V1_FileManagementServerInterceptorFactoryProtocol? { get }

        /// Upload a file to Trinsic's CDN
        @Sendable func UploadFile(
            request: Services_Filemanagement_V1_UploadFileRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Filemanagement_V1_UploadFileResponse

        /// Fetch information about a file by its ID
        @Sendable func GetFile(
            request: Services_Filemanagement_V1_GetFileRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Filemanagement_V1_GetFileResponse

        /// Delete a file by its ID
        @Sendable func DeleteFile(
            request: Services_Filemanagement_V1_DeleteFileRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Filemanagement_V1_DeleteFileResponse

        /// List files the calling account has uploaded
        @Sendable func ListFiles(
            request: Services_Filemanagement_V1_ListFilesRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Filemanagement_V1_ListFilesResponse

        /// Get statistics about files uploaded by the calling account
        @Sendable func GetStorageStats(
            request: Services_Filemanagement_V1_GetStorageStatsRequest,
            context: GRPCAsyncServerCallContext
        ) async throws -> Services_Filemanagement_V1_GetStorageStatsResponse
    }

    @available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
    public extension Services_Filemanagement_V1_FileManagementAsyncProvider {
        static var serviceDescriptor: GRPCServiceDescriptor {
            Services_Filemanagement_V1_FileManagementServerMetadata.serviceDescriptor
        }

        var serviceName: Substring {
            Services_Filemanagement_V1_FileManagementServerMetadata.serviceDescriptor.fullName[...]
        }

        var interceptors: Services_Filemanagement_V1_FileManagementServerInterceptorFactoryProtocol? {
            nil
        }

        func handle(
            method name: Substring,
            context: CallHandlerContext
        ) -> GRPCServerHandlerProtocol? {
            switch name {
            case "UploadFile":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Filemanagement_V1_UploadFileRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Filemanagement_V1_UploadFileResponse>(),
                    interceptors: interceptors?.makeUploadFileInterceptors() ?? [],
                    wrapping: UploadFile(request:context:)
                )

            case "GetFile":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Filemanagement_V1_GetFileRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Filemanagement_V1_GetFileResponse>(),
                    interceptors: interceptors?.makeGetFileInterceptors() ?? [],
                    wrapping: GetFile(request:context:)
                )

            case "DeleteFile":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Filemanagement_V1_DeleteFileRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Filemanagement_V1_DeleteFileResponse>(),
                    interceptors: interceptors?.makeDeleteFileInterceptors() ?? [],
                    wrapping: DeleteFile(request:context:)
                )

            case "ListFiles":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Filemanagement_V1_ListFilesRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Filemanagement_V1_ListFilesResponse>(),
                    interceptors: interceptors?.makeListFilesInterceptors() ?? [],
                    wrapping: ListFiles(request:context:)
                )

            case "GetStorageStats":
                return GRPCAsyncServerHandler(
                    context: context,
                    requestDeserializer: ProtobufDeserializer<Services_Filemanagement_V1_GetStorageStatsRequest>(),
                    responseSerializer: ProtobufSerializer<Services_Filemanagement_V1_GetStorageStatsResponse>(),
                    interceptors: interceptors?.makeGetStorageStatsInterceptors() ?? [],
                    wrapping: GetStorageStats(request:context:)
                )

            default:
                return nil
            }
        }
    }

#endif // compiler(>=5.6)

public protocol Services_Filemanagement_V1_FileManagementServerInterceptorFactoryProtocol {
    /// - Returns: Interceptors to use when handling 'UploadFile'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeUploadFileInterceptors() -> [ServerInterceptor<Services_Filemanagement_V1_UploadFileRequest, Services_Filemanagement_V1_UploadFileResponse>]

    /// - Returns: Interceptors to use when handling 'GetFile'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetFileInterceptors() -> [ServerInterceptor<Services_Filemanagement_V1_GetFileRequest, Services_Filemanagement_V1_GetFileResponse>]

    /// - Returns: Interceptors to use when handling 'DeleteFile'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeDeleteFileInterceptors() -> [ServerInterceptor<Services_Filemanagement_V1_DeleteFileRequest, Services_Filemanagement_V1_DeleteFileResponse>]

    /// - Returns: Interceptors to use when handling 'ListFiles'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeListFilesInterceptors() -> [ServerInterceptor<Services_Filemanagement_V1_ListFilesRequest, Services_Filemanagement_V1_ListFilesResponse>]

    /// - Returns: Interceptors to use when handling 'GetStorageStats'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetStorageStatsInterceptors() -> [ServerInterceptor<Services_Filemanagement_V1_GetStorageStatsRequest, Services_Filemanagement_V1_GetStorageStatsResponse>]
}

public enum Services_Filemanagement_V1_FileManagementServerMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "FileManagement",
        fullName: "services.filemanagement.v1.FileManagement",
        methods: [
            Services_Filemanagement_V1_FileManagementServerMetadata.Methods.UploadFile,
            Services_Filemanagement_V1_FileManagementServerMetadata.Methods.GetFile,
            Services_Filemanagement_V1_FileManagementServerMetadata.Methods.DeleteFile,
            Services_Filemanagement_V1_FileManagementServerMetadata.Methods.ListFiles,
            Services_Filemanagement_V1_FileManagementServerMetadata.Methods.GetStorageStats,
        ]
    )

    public enum Methods {
        public static let UploadFile = GRPCMethodDescriptor(
            name: "UploadFile",
            path: "/services.filemanagement.v1.FileManagement/UploadFile",
            type: GRPCCallType.unary
        )

        public static let GetFile = GRPCMethodDescriptor(
            name: "GetFile",
            path: "/services.filemanagement.v1.FileManagement/GetFile",
            type: GRPCCallType.unary
        )

        public static let DeleteFile = GRPCMethodDescriptor(
            name: "DeleteFile",
            path: "/services.filemanagement.v1.FileManagement/DeleteFile",
            type: GRPCCallType.unary
        )

        public static let ListFiles = GRPCMethodDescriptor(
            name: "ListFiles",
            path: "/services.filemanagement.v1.FileManagement/ListFiles",
            type: GRPCCallType.unary
        )

        public static let GetStorageStats = GRPCMethodDescriptor(
            name: "GetStorageStats",
            path: "/services.filemanagement.v1.FileManagement/GetStorageStats",
            type: GRPCCallType.unary
        )
    }
}
