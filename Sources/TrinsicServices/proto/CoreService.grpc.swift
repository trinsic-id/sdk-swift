//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: CoreService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Trinsic_Services_CommonClient`, then call methods of this protocol to make API calls.
internal protocol Trinsic_Services_CommonClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Trinsic_Services_CommonClientInterceptorFactoryProtocol? { get }

  func request(
    _ request: Pbmse_EncryptedMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Pbmse_EncryptedMessage, Pbmse_EncryptedMessage>
}

extension Trinsic_Services_CommonClientProtocol {
  internal var serviceName: String {
    return "trinsic.services.Common"
  }

  /// Unary call to Request
  ///
  /// - Parameters:
  ///   - request: Request to send to Request.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func request(
    _ request: Pbmse_EncryptedMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pbmse_EncryptedMessage, Pbmse_EncryptedMessage> {
    return self.makeUnaryCall(
      path: "/trinsic.services.Common/Request",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestInterceptors() ?? []
    )
  }
}

internal protocol Trinsic_Services_CommonClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'request'.
  func makeRequestInterceptors() -> [ClientInterceptor<Pbmse_EncryptedMessage, Pbmse_EncryptedMessage>]
}

internal final class Trinsic_Services_CommonClient: Trinsic_Services_CommonClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Trinsic_Services_CommonClientInterceptorFactoryProtocol?

  /// Creates a client for the trinsic.services.Common service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Trinsic_Services_CommonClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Trinsic_Services_CommonProvider: CallHandlerProvider {
  var interceptors: Trinsic_Services_CommonServerInterceptorFactoryProtocol? { get }

  func request(request: Pbmse_EncryptedMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Pbmse_EncryptedMessage>
}

extension Trinsic_Services_CommonProvider {
  internal var serviceName: Substring { return "trinsic.services.Common" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Request":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Pbmse_EncryptedMessage>(),
        responseSerializer: ProtobufSerializer<Pbmse_EncryptedMessage>(),
        interceptors: self.interceptors?.makeRequestInterceptors() ?? [],
        userFunction: self.request(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Trinsic_Services_CommonServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'request'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestInterceptors() -> [ServerInterceptor<Pbmse_EncryptedMessage, Pbmse_EncryptedMessage>]
}
