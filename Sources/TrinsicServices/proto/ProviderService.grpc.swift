//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ProviderService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Trinsic_Services_ProviderClient`, then call methods of this protocol to make API calls.
internal protocol Trinsic_Services_ProviderClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Trinsic_Services_ProviderClientInterceptorFactoryProtocol? { get }

  func invite(
    _ request: Trinsic_Services_InviteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Trinsic_Services_InviteRequest, Trinsic_Services_InviteResponse>

  func inviteWithWorkflow(
    _ request: Trinsic_Services_InviteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Trinsic_Services_InviteRequest, Trinsic_Services_InviteResponse>

  func invitationStatus(
    _ request: Trinsic_Services_InvitationStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Trinsic_Services_InvitationStatusRequest, Trinsic_Services_InvitationStatusResponse>
}

extension Trinsic_Services_ProviderClientProtocol {
  internal var serviceName: String {
    return "trinsic.services.Provider"
  }

  ///   rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse);
  ///
  /// - Parameters:
  ///   - request: Request to send to Invite.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func invite(
    _ request: Trinsic_Services_InviteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Trinsic_Services_InviteRequest, Trinsic_Services_InviteResponse> {
    return self.makeUnaryCall(
      path: "/trinsic.services.Provider/Invite",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInviteInterceptors() ?? []
    )
  }

  /// Unary call to InviteWithWorkflow
  ///
  /// - Parameters:
  ///   - request: Request to send to InviteWithWorkflow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func inviteWithWorkflow(
    _ request: Trinsic_Services_InviteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Trinsic_Services_InviteRequest, Trinsic_Services_InviteResponse> {
    return self.makeUnaryCall(
      path: "/trinsic.services.Provider/InviteWithWorkflow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInviteWithWorkflowInterceptors() ?? []
    )
  }

  ///   rpc CreateCredentialTemplate(CreateCredentialTemplateRequest) returns (CreateCredentialTemplateResponse);
  ///   rpc ListCredentialTemplates(ListCredentialTemplatesRequest) returns (ListCredentialTemplatesResponse);
  ///
  /// - Parameters:
  ///   - request: Request to send to InvitationStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func invitationStatus(
    _ request: Trinsic_Services_InvitationStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Trinsic_Services_InvitationStatusRequest, Trinsic_Services_InvitationStatusResponse> {
    return self.makeUnaryCall(
      path: "/trinsic.services.Provider/InvitationStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInvitationStatusInterceptors() ?? []
    )
  }
}

internal protocol Trinsic_Services_ProviderClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'invite'.
  func makeInviteInterceptors() -> [ClientInterceptor<Trinsic_Services_InviteRequest, Trinsic_Services_InviteResponse>]

  /// - Returns: Interceptors to use when invoking 'inviteWithWorkflow'.
  func makeInviteWithWorkflowInterceptors() -> [ClientInterceptor<Trinsic_Services_InviteRequest, Trinsic_Services_InviteResponse>]

  /// - Returns: Interceptors to use when invoking 'invitationStatus'.
  func makeInvitationStatusInterceptors() -> [ClientInterceptor<Trinsic_Services_InvitationStatusRequest, Trinsic_Services_InvitationStatusResponse>]
}

internal final class Trinsic_Services_ProviderClient: Trinsic_Services_ProviderClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Trinsic_Services_ProviderClientInterceptorFactoryProtocol?

  /// Creates a client for the trinsic.services.Provider service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Trinsic_Services_ProviderClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Trinsic_Services_ProviderProvider: CallHandlerProvider {
  var interceptors: Trinsic_Services_ProviderServerInterceptorFactoryProtocol? { get }

  ///   rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse);
  func invite(request: Trinsic_Services_InviteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Trinsic_Services_InviteResponse>

  func inviteWithWorkflow(request: Trinsic_Services_InviteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Trinsic_Services_InviteResponse>

  ///   rpc CreateCredentialTemplate(CreateCredentialTemplateRequest) returns (CreateCredentialTemplateResponse);
  ///   rpc ListCredentialTemplates(ListCredentialTemplatesRequest) returns (ListCredentialTemplatesResponse);
  func invitationStatus(request: Trinsic_Services_InvitationStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Trinsic_Services_InvitationStatusResponse>
}

extension Trinsic_Services_ProviderProvider {
  internal var serviceName: Substring { return "trinsic.services.Provider" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Invite":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trinsic_Services_InviteRequest>(),
        responseSerializer: ProtobufSerializer<Trinsic_Services_InviteResponse>(),
        interceptors: self.interceptors?.makeInviteInterceptors() ?? [],
        userFunction: self.invite(request:context:)
      )

    case "InviteWithWorkflow":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trinsic_Services_InviteRequest>(),
        responseSerializer: ProtobufSerializer<Trinsic_Services_InviteResponse>(),
        interceptors: self.interceptors?.makeInviteWithWorkflowInterceptors() ?? [],
        userFunction: self.inviteWithWorkflow(request:context:)
      )

    case "InvitationStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trinsic_Services_InvitationStatusRequest>(),
        responseSerializer: ProtobufSerializer<Trinsic_Services_InvitationStatusResponse>(),
        interceptors: self.interceptors?.makeInvitationStatusInterceptors() ?? [],
        userFunction: self.invitationStatus(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Trinsic_Services_ProviderServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'invite'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInviteInterceptors() -> [ServerInterceptor<Trinsic_Services_InviteRequest, Trinsic_Services_InviteResponse>]

  /// - Returns: Interceptors to use when handling 'inviteWithWorkflow'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInviteWithWorkflowInterceptors() -> [ServerInterceptor<Trinsic_Services_InviteRequest, Trinsic_Services_InviteResponse>]

  /// - Returns: Interceptors to use when handling 'invitationStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInvitationStatusInterceptors() -> [ServerInterceptor<Trinsic_Services_InvitationStatusRequest, Trinsic_Services_InvitationStatusResponse>]
}
