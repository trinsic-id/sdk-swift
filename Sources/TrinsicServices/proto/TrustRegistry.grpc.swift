//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: TrustRegistry.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Trinsic_Services_TrustRegistryClient`, then call methods of this protocol to make API calls.
internal protocol Trinsic_Services_TrustRegistryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Trinsic_Services_TrustRegistryClientInterceptorFactoryProtocol? { get }

  func addFramework(
    _ request: Trinsic_Services_AddFrameworkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Trinsic_Services_AddFrameworkRequest, Trinsic_Services_AddFrameworkResponse>

  func removeFramework(
    _ request: Trinsic_Services_RemoveFrameworkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Trinsic_Services_RemoveFrameworkRequest, Trinsic_Services_RemoveFrameworkResponse>

  func searchRegistry(
    _ request: Trinsic_Services_SearchRegistryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Trinsic_Services_SearchRegistryRequest, Trinsic_Services_SearchRegistryResponse>

  func registerIssuer(
    _ request: Trinsic_Services_RegisterIssuerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Trinsic_Services_RegisterIssuerRequest, Trinsic_Services_RegisterIssuerResponse>

  func registerVerifier(
    _ request: Trinsic_Services_RegisterVerifierRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Trinsic_Services_RegisterVerifierRequest, Trinsic_Services_RegisterVerifierResponse>

  func unregisterMember(
    _ request: Trinsic_Services_UnregisterMemberRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Trinsic_Services_UnregisterMemberRequest, Trinsic_Services_UnregisterMemberResponse>

  func checkIssuerStatus(
    _ request: Trinsic_Services_CheckIssuerStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Trinsic_Services_CheckIssuerStatusRequest, Trinsic_Services_CheckIssuerStatusResponse>

  func checkVerifierStatus(
    _ request: Trinsic_Services_CheckVerifierStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Trinsic_Services_CheckVerifierStatusRequest, Trinsic_Services_CheckVerifierStatusResponse>

  func fetchData(
    _ request: Trinsic_Services_FetchDataRequest,
    callOptions: CallOptions?,
    handler: @escaping (Trinsic_Services_FetchDataResponse) -> Void
  ) -> ServerStreamingCall<Trinsic_Services_FetchDataRequest, Trinsic_Services_FetchDataResponse>
}

extension Trinsic_Services_TrustRegistryClientProtocol {
  internal var serviceName: String {
    return "trinsic.services.TrustRegistry"
  }

  /// Adds a trust registry defintion to the ecosystem
  ///
  /// - Parameters:
  ///   - request: Request to send to AddFramework.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addFramework(
    _ request: Trinsic_Services_AddFrameworkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Trinsic_Services_AddFrameworkRequest, Trinsic_Services_AddFrameworkResponse> {
    return self.makeUnaryCall(
      path: "/trinsic.services.TrustRegistry/AddFramework",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddFrameworkInterceptors() ?? []
    )
  }

  /// Unary call to RemoveFramework
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveFramework.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeFramework(
    _ request: Trinsic_Services_RemoveFrameworkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Trinsic_Services_RemoveFrameworkRequest, Trinsic_Services_RemoveFrameworkResponse> {
    return self.makeUnaryCall(
      path: "/trinsic.services.TrustRegistry/RemoveFramework",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveFrameworkInterceptors() ?? []
    )
  }

  /// Unary call to SearchRegistry
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchRegistry.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func searchRegistry(
    _ request: Trinsic_Services_SearchRegistryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Trinsic_Services_SearchRegistryRequest, Trinsic_Services_SearchRegistryResponse> {
    return self.makeUnaryCall(
      path: "/trinsic.services.TrustRegistry/SearchRegistry",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSearchRegistryInterceptors() ?? []
    )
  }

  /// Registers an authoritative issuer with a credential template
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterIssuer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerIssuer(
    _ request: Trinsic_Services_RegisterIssuerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Trinsic_Services_RegisterIssuerRequest, Trinsic_Services_RegisterIssuerResponse> {
    return self.makeUnaryCall(
      path: "/trinsic.services.TrustRegistry/RegisterIssuer",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterIssuerInterceptors() ?? []
    )
  }

  /// Unary call to RegisterVerifier
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterVerifier.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerVerifier(
    _ request: Trinsic_Services_RegisterVerifierRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Trinsic_Services_RegisterVerifierRequest, Trinsic_Services_RegisterVerifierResponse> {
    return self.makeUnaryCall(
      path: "/trinsic.services.TrustRegistry/RegisterVerifier",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterVerifierInterceptors() ?? []
    )
  }

  /// Removes an authoritative issuer with a credential template from the trust registry
  ///
  /// - Parameters:
  ///   - request: Request to send to UnregisterMember.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unregisterMember(
    _ request: Trinsic_Services_UnregisterMemberRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Trinsic_Services_UnregisterMemberRequest, Trinsic_Services_UnregisterMemberResponse> {
    return self.makeUnaryCall(
      path: "/trinsic.services.TrustRegistry/UnregisterMember",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnregisterMemberInterceptors() ?? []
    )
  }

  /// Unary call to CheckIssuerStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to CheckIssuerStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func checkIssuerStatus(
    _ request: Trinsic_Services_CheckIssuerStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Trinsic_Services_CheckIssuerStatusRequest, Trinsic_Services_CheckIssuerStatusResponse> {
    return self.makeUnaryCall(
      path: "/trinsic.services.TrustRegistry/CheckIssuerStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckIssuerStatusInterceptors() ?? []
    )
  }

  /// Unary call to CheckVerifierStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to CheckVerifierStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func checkVerifierStatus(
    _ request: Trinsic_Services_CheckVerifierStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Trinsic_Services_CheckVerifierStatusRequest, Trinsic_Services_CheckVerifierStatusResponse> {
    return self.makeUnaryCall(
      path: "/trinsic.services.TrustRegistry/CheckVerifierStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckVerifierStatusInterceptors() ?? []
    )
  }

  /// Server streaming call to FetchData
  ///
  /// - Parameters:
  ///   - request: Request to send to FetchData.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func fetchData(
    _ request: Trinsic_Services_FetchDataRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Trinsic_Services_FetchDataResponse) -> Void
  ) -> ServerStreamingCall<Trinsic_Services_FetchDataRequest, Trinsic_Services_FetchDataResponse> {
    return self.makeServerStreamingCall(
      path: "/trinsic.services.TrustRegistry/FetchData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchDataInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Trinsic_Services_TrustRegistryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'addFramework'.
  func makeAddFrameworkInterceptors() -> [ClientInterceptor<Trinsic_Services_AddFrameworkRequest, Trinsic_Services_AddFrameworkResponse>]

  /// - Returns: Interceptors to use when invoking 'removeFramework'.
  func makeRemoveFrameworkInterceptors() -> [ClientInterceptor<Trinsic_Services_RemoveFrameworkRequest, Trinsic_Services_RemoveFrameworkResponse>]

  /// - Returns: Interceptors to use when invoking 'searchRegistry'.
  func makeSearchRegistryInterceptors() -> [ClientInterceptor<Trinsic_Services_SearchRegistryRequest, Trinsic_Services_SearchRegistryResponse>]

  /// - Returns: Interceptors to use when invoking 'registerIssuer'.
  func makeRegisterIssuerInterceptors() -> [ClientInterceptor<Trinsic_Services_RegisterIssuerRequest, Trinsic_Services_RegisterIssuerResponse>]

  /// - Returns: Interceptors to use when invoking 'registerVerifier'.
  func makeRegisterVerifierInterceptors() -> [ClientInterceptor<Trinsic_Services_RegisterVerifierRequest, Trinsic_Services_RegisterVerifierResponse>]

  /// - Returns: Interceptors to use when invoking 'unregisterMember'.
  func makeUnregisterMemberInterceptors() -> [ClientInterceptor<Trinsic_Services_UnregisterMemberRequest, Trinsic_Services_UnregisterMemberResponse>]

  /// - Returns: Interceptors to use when invoking 'checkIssuerStatus'.
  func makeCheckIssuerStatusInterceptors() -> [ClientInterceptor<Trinsic_Services_CheckIssuerStatusRequest, Trinsic_Services_CheckIssuerStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'checkVerifierStatus'.
  func makeCheckVerifierStatusInterceptors() -> [ClientInterceptor<Trinsic_Services_CheckVerifierStatusRequest, Trinsic_Services_CheckVerifierStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'fetchData'.
  func makeFetchDataInterceptors() -> [ClientInterceptor<Trinsic_Services_FetchDataRequest, Trinsic_Services_FetchDataResponse>]
}

internal final class Trinsic_Services_TrustRegistryClient: Trinsic_Services_TrustRegistryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Trinsic_Services_TrustRegistryClientInterceptorFactoryProtocol?

  /// Creates a client for the trinsic.services.TrustRegistry service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Trinsic_Services_TrustRegistryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Trinsic_Services_TrustRegistryProvider: CallHandlerProvider {
  var interceptors: Trinsic_Services_TrustRegistryServerInterceptorFactoryProtocol? { get }

  /// Adds a trust registry defintion to the ecosystem
  func addFramework(request: Trinsic_Services_AddFrameworkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Trinsic_Services_AddFrameworkResponse>

  func removeFramework(request: Trinsic_Services_RemoveFrameworkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Trinsic_Services_RemoveFrameworkResponse>

  func searchRegistry(request: Trinsic_Services_SearchRegistryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Trinsic_Services_SearchRegistryResponse>

  /// Registers an authoritative issuer with a credential template
  func registerIssuer(request: Trinsic_Services_RegisterIssuerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Trinsic_Services_RegisterIssuerResponse>

  func registerVerifier(request: Trinsic_Services_RegisterVerifierRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Trinsic_Services_RegisterVerifierResponse>

  /// Removes an authoritative issuer with a credential template from the trust registry
  func unregisterMember(request: Trinsic_Services_UnregisterMemberRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Trinsic_Services_UnregisterMemberResponse>

  func checkIssuerStatus(request: Trinsic_Services_CheckIssuerStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Trinsic_Services_CheckIssuerStatusResponse>

  func checkVerifierStatus(request: Trinsic_Services_CheckVerifierStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Trinsic_Services_CheckVerifierStatusResponse>

  func fetchData(request: Trinsic_Services_FetchDataRequest, context: StreamingResponseCallContext<Trinsic_Services_FetchDataResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Trinsic_Services_TrustRegistryProvider {
  internal var serviceName: Substring { return "trinsic.services.TrustRegistry" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddFramework":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trinsic_Services_AddFrameworkRequest>(),
        responseSerializer: ProtobufSerializer<Trinsic_Services_AddFrameworkResponse>(),
        interceptors: self.interceptors?.makeAddFrameworkInterceptors() ?? [],
        userFunction: self.addFramework(request:context:)
      )

    case "RemoveFramework":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trinsic_Services_RemoveFrameworkRequest>(),
        responseSerializer: ProtobufSerializer<Trinsic_Services_RemoveFrameworkResponse>(),
        interceptors: self.interceptors?.makeRemoveFrameworkInterceptors() ?? [],
        userFunction: self.removeFramework(request:context:)
      )

    case "SearchRegistry":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trinsic_Services_SearchRegistryRequest>(),
        responseSerializer: ProtobufSerializer<Trinsic_Services_SearchRegistryResponse>(),
        interceptors: self.interceptors?.makeSearchRegistryInterceptors() ?? [],
        userFunction: self.searchRegistry(request:context:)
      )

    case "RegisterIssuer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trinsic_Services_RegisterIssuerRequest>(),
        responseSerializer: ProtobufSerializer<Trinsic_Services_RegisterIssuerResponse>(),
        interceptors: self.interceptors?.makeRegisterIssuerInterceptors() ?? [],
        userFunction: self.registerIssuer(request:context:)
      )

    case "RegisterVerifier":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trinsic_Services_RegisterVerifierRequest>(),
        responseSerializer: ProtobufSerializer<Trinsic_Services_RegisterVerifierResponse>(),
        interceptors: self.interceptors?.makeRegisterVerifierInterceptors() ?? [],
        userFunction: self.registerVerifier(request:context:)
      )

    case "UnregisterMember":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trinsic_Services_UnregisterMemberRequest>(),
        responseSerializer: ProtobufSerializer<Trinsic_Services_UnregisterMemberResponse>(),
        interceptors: self.interceptors?.makeUnregisterMemberInterceptors() ?? [],
        userFunction: self.unregisterMember(request:context:)
      )

    case "CheckIssuerStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trinsic_Services_CheckIssuerStatusRequest>(),
        responseSerializer: ProtobufSerializer<Trinsic_Services_CheckIssuerStatusResponse>(),
        interceptors: self.interceptors?.makeCheckIssuerStatusInterceptors() ?? [],
        userFunction: self.checkIssuerStatus(request:context:)
      )

    case "CheckVerifierStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trinsic_Services_CheckVerifierStatusRequest>(),
        responseSerializer: ProtobufSerializer<Trinsic_Services_CheckVerifierStatusResponse>(),
        interceptors: self.interceptors?.makeCheckVerifierStatusInterceptors() ?? [],
        userFunction: self.checkVerifierStatus(request:context:)
      )

    case "FetchData":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trinsic_Services_FetchDataRequest>(),
        responseSerializer: ProtobufSerializer<Trinsic_Services_FetchDataResponse>(),
        interceptors: self.interceptors?.makeFetchDataInterceptors() ?? [],
        userFunction: self.fetchData(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Trinsic_Services_TrustRegistryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'addFramework'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddFrameworkInterceptors() -> [ServerInterceptor<Trinsic_Services_AddFrameworkRequest, Trinsic_Services_AddFrameworkResponse>]

  /// - Returns: Interceptors to use when handling 'removeFramework'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveFrameworkInterceptors() -> [ServerInterceptor<Trinsic_Services_RemoveFrameworkRequest, Trinsic_Services_RemoveFrameworkResponse>]

  /// - Returns: Interceptors to use when handling 'searchRegistry'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSearchRegistryInterceptors() -> [ServerInterceptor<Trinsic_Services_SearchRegistryRequest, Trinsic_Services_SearchRegistryResponse>]

  /// - Returns: Interceptors to use when handling 'registerIssuer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterIssuerInterceptors() -> [ServerInterceptor<Trinsic_Services_RegisterIssuerRequest, Trinsic_Services_RegisterIssuerResponse>]

  /// - Returns: Interceptors to use when handling 'registerVerifier'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterVerifierInterceptors() -> [ServerInterceptor<Trinsic_Services_RegisterVerifierRequest, Trinsic_Services_RegisterVerifierResponse>]

  /// - Returns: Interceptors to use when handling 'unregisterMember'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnregisterMemberInterceptors() -> [ServerInterceptor<Trinsic_Services_UnregisterMemberRequest, Trinsic_Services_UnregisterMemberResponse>]

  /// - Returns: Interceptors to use when handling 'checkIssuerStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCheckIssuerStatusInterceptors() -> [ServerInterceptor<Trinsic_Services_CheckIssuerStatusRequest, Trinsic_Services_CheckIssuerStatusResponse>]

  /// - Returns: Interceptors to use when handling 'checkVerifierStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCheckVerifierStatusInterceptors() -> [ServerInterceptor<Trinsic_Services_CheckVerifierStatusRequest, Trinsic_Services_CheckVerifierStatusResponse>]

  /// - Returns: Interceptors to use when handling 'fetchData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFetchDataInterceptors() -> [ServerInterceptor<Trinsic_Services_FetchDataRequest, Trinsic_Services_FetchDataResponse>]
}
