//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: services/account/v1/account.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Services_Account_V1_AccountClient`, then call methods of this protocol to make API calls.
public protocol Services_Account_V1_AccountClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol? { get }

  func SignIn(
    _ request: Services_Account_V1_SignInRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Services_Account_V1_SignInRequest, Services_Account_V1_SignInResponse>

  func Info(
    _ request: Services_Account_V1_InfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Services_Account_V1_InfoRequest, Services_Account_V1_InfoResponse>

  func ListDevices(
    _ request: Services_Account_V1_ListDevicesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Services_Account_V1_ListDevicesRequest, Services_Account_V1_ListDevicesResponse>

  func RevokeDevice(
    _ request: Services_Account_V1_RevokeDeviceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Services_Account_V1_RevokeDeviceRequest, Services_Account_V1_RevokeDeviceResponse>
}

extension Services_Account_V1_AccountClientProtocol {
  public var serviceName: String {
    return "services.account.v1.Account"
  }

  /// Sign in to an already existing account
  ///
  /// - Parameters:
  ///   - request: Request to send to SignIn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func SignIn(
    _ request: Services_Account_V1_SignInRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Services_Account_V1_SignInRequest, Services_Account_V1_SignInResponse> {
    return self.makeUnaryCall(
      path: "/services.account.v1.Account/SignIn",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignInInterceptors() ?? []
    )
  }

  /// Get account information
  ///
  /// - Parameters:
  ///   - request: Request to send to Info.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func Info(
    _ request: Services_Account_V1_InfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Services_Account_V1_InfoRequest, Services_Account_V1_InfoResponse> {
    return self.makeUnaryCall(
      path: "/services.account.v1.Account/Info",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInfoInterceptors() ?? []
    )
  }

  /// List all connected devices
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDevices.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ListDevices(
    _ request: Services_Account_V1_ListDevicesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Services_Account_V1_ListDevicesRequest, Services_Account_V1_ListDevicesResponse> {
    return self.makeUnaryCall(
      path: "/services.account.v1.Account/ListDevices",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListDevicesInterceptors() ?? []
    )
  }

  /// Revoke device access to the account's cloud wallet
  ///
  /// - Parameters:
  ///   - request: Request to send to RevokeDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func RevokeDevice(
    _ request: Services_Account_V1_RevokeDeviceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Services_Account_V1_RevokeDeviceRequest, Services_Account_V1_RevokeDeviceResponse> {
    return self.makeUnaryCall(
      path: "/services.account.v1.Account/RevokeDevice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeDeviceInterceptors() ?? []
    )
  }
}

public protocol Services_Account_V1_AccountClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'SignIn'.
  func makeSignInInterceptors() -> [ClientInterceptor<Services_Account_V1_SignInRequest, Services_Account_V1_SignInResponse>]

  /// - Returns: Interceptors to use when invoking 'Info'.
  func makeInfoInterceptors() -> [ClientInterceptor<Services_Account_V1_InfoRequest, Services_Account_V1_InfoResponse>]

  /// - Returns: Interceptors to use when invoking 'ListDevices'.
  func makeListDevicesInterceptors() -> [ClientInterceptor<Services_Account_V1_ListDevicesRequest, Services_Account_V1_ListDevicesResponse>]

  /// - Returns: Interceptors to use when invoking 'RevokeDevice'.
  func makeRevokeDeviceInterceptors() -> [ClientInterceptor<Services_Account_V1_RevokeDeviceRequest, Services_Account_V1_RevokeDeviceResponse>]
}

public final class Services_Account_V1_AccountClient: Services_Account_V1_AccountClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol?

  /// Creates a client for the services.account.v1.Account service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Services_Account_V1_AccountClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Services_Account_V1_AccountProvider: CallHandlerProvider {
  var interceptors: Services_Account_V1_AccountServerInterceptorFactoryProtocol? { get }

  /// Sign in to an already existing account
  func SignIn(request: Services_Account_V1_SignInRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Account_V1_SignInResponse>

  /// Get account information
  func Info(request: Services_Account_V1_InfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Account_V1_InfoResponse>

  /// List all connected devices
  func ListDevices(request: Services_Account_V1_ListDevicesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Account_V1_ListDevicesResponse>

  /// Revoke device access to the account's cloud wallet
  func RevokeDevice(request: Services_Account_V1_RevokeDeviceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Services_Account_V1_RevokeDeviceResponse>
}

extension Services_Account_V1_AccountProvider {
  public var serviceName: Substring { return "services.account.v1.Account" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SignIn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Services_Account_V1_SignInRequest>(),
        responseSerializer: ProtobufSerializer<Services_Account_V1_SignInResponse>(),
        interceptors: self.interceptors?.makeSignInInterceptors() ?? [],
        userFunction: self.SignIn(request:context:)
      )

    case "Info":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Services_Account_V1_InfoRequest>(),
        responseSerializer: ProtobufSerializer<Services_Account_V1_InfoResponse>(),
        interceptors: self.interceptors?.makeInfoInterceptors() ?? [],
        userFunction: self.Info(request:context:)
      )

    case "ListDevices":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Services_Account_V1_ListDevicesRequest>(),
        responseSerializer: ProtobufSerializer<Services_Account_V1_ListDevicesResponse>(),
        interceptors: self.interceptors?.makeListDevicesInterceptors() ?? [],
        userFunction: self.ListDevices(request:context:)
      )

    case "RevokeDevice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Services_Account_V1_RevokeDeviceRequest>(),
        responseSerializer: ProtobufSerializer<Services_Account_V1_RevokeDeviceResponse>(),
        interceptors: self.interceptors?.makeRevokeDeviceInterceptors() ?? [],
        userFunction: self.RevokeDevice(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Services_Account_V1_AccountServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'SignIn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignInInterceptors() -> [ServerInterceptor<Services_Account_V1_SignInRequest, Services_Account_V1_SignInResponse>]

  /// - Returns: Interceptors to use when handling 'Info'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInfoInterceptors() -> [ServerInterceptor<Services_Account_V1_InfoRequest, Services_Account_V1_InfoResponse>]

  /// - Returns: Interceptors to use when handling 'ListDevices'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListDevicesInterceptors() -> [ServerInterceptor<Services_Account_V1_ListDevicesRequest, Services_Account_V1_ListDevicesResponse>]

  /// - Returns: Interceptors to use when handling 'RevokeDevice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevokeDeviceInterceptors() -> [ServerInterceptor<Services_Account_V1_RevokeDeviceRequest, Services_Account_V1_RevokeDeviceResponse>]
}
