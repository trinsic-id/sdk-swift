// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/common/v1/common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Services_Common_V1_ResponseStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case success // = 0
  case walletAccessDenied // = 10
  case walletExists // = 11
  case itemNotFound // = 20
  case serializationError // = 200
  case unknownError // = 100
  case UNRECOGNIZED(Int)

  public init() {
    self = .success
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .success
    case 10: self = .walletAccessDenied
    case 11: self = .walletExists
    case 20: self = .itemNotFound
    case 100: self = .unknownError
    case 200: self = .serializationError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .success: return 0
    case .walletAccessDenied: return 10
    case .walletExists: return 11
    case .itemNotFound: return 20
    case .unknownError: return 100
    case .serializationError: return 200
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Services_Common_V1_ResponseStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Services_Common_V1_ResponseStatus] = [
    .success,
    .walletAccessDenied,
    .walletExists,
    .itemNotFound,
    .serializationError,
    .unknownError,
  ]
}

#endif  // swift(>=4.2)

public enum Services_Common_V1_JsonFormat: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case protobuf // = 0
  case binary // = 1
  case string // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .protobuf
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .protobuf
    case 1: self = .binary
    case 2: self = .string
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .protobuf: return 0
    case .binary: return 1
    case .string: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Services_Common_V1_JsonFormat: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Services_Common_V1_JsonFormat] = [
    .protobuf,
    .binary,
    .string,
  ]
}

#endif  // swift(>=4.2)

public struct Services_Common_V1_RequestOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var responseJsonFormat: Services_Common_V1_JsonFormat = .protobuf

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Services_Common_V1_JsonPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var json: Services_Common_V1_JsonPayload.OneOf_Json? = nil

  public var jsonStruct: SwiftProtobuf.Google_Protobuf_Struct {
    get {
      if case .jsonStruct(let v)? = json {return v}
      return SwiftProtobuf.Google_Protobuf_Struct()
    }
    set {json = .jsonStruct(newValue)}
  }

  public var jsonString: String {
    get {
      if case .jsonString(let v)? = json {return v}
      return String()
    }
    set {json = .jsonString(newValue)}
  }

  public var jsonBytes: Data {
    get {
      if case .jsonBytes(let v)? = json {return v}
      return Data()
    }
    set {json = .jsonBytes(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Json: Equatable {
    case jsonStruct(SwiftProtobuf.Google_Protobuf_Struct)
    case jsonString(String)
    case jsonBytes(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Services_Common_V1_JsonPayload.OneOf_Json, rhs: Services_Common_V1_JsonPayload.OneOf_Json) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.jsonStruct, .jsonStruct): return {
        guard case .jsonStruct(let l) = lhs, case .jsonStruct(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.jsonString, .jsonString): return {
        guard case .jsonString(let l) = lhs, case .jsonString(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.jsonBytes, .jsonBytes): return {
        guard case .jsonBytes(let l) = lhs, case .jsonBytes(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Services_Common_V1_ServerConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// service endpoint
  public var endpoint: String = String()

  /// service port
  public var port: Int32 = 0

  /// indicates if tls is used
  public var useTls: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Nonce used to generate an oberon proof
public struct Services_Common_V1_Nonce {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// UTC unix millisecond timestamp the request was made
  public var timestamp: Int64 = 0

  /// blake3256 hash of the request body
  public var requestHash: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "services.common.v1"

extension Services_Common_V1_ResponseStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCESS"),
    10: .same(proto: "WALLET_ACCESS_DENIED"),
    11: .same(proto: "WALLET_EXISTS"),
    20: .same(proto: "ITEM_NOT_FOUND"),
    100: .same(proto: "UNKNOWN_ERROR"),
    200: .same(proto: "SERIALIZATION_ERROR"),
  ]
}

extension Services_Common_V1_JsonFormat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Protobuf"),
    1: .same(proto: "Binary"),
    2: .same(proto: "String"),
  ]
}

extension Services_Common_V1_RequestOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RequestOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "response_json_format"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.responseJsonFormat) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.responseJsonFormat != .protobuf {
      try visitor.visitSingularEnumField(value: self.responseJsonFormat, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Common_V1_RequestOptions, rhs: Services_Common_V1_RequestOptions) -> Bool {
    if lhs.responseJsonFormat != rhs.responseJsonFormat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Common_V1_JsonPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JsonPayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "json_struct"),
    2: .standard(proto: "json_string"),
    3: .standard(proto: "json_bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: SwiftProtobuf.Google_Protobuf_Struct?
        var hadOneofValue = false
        if let current = self.json {
          hadOneofValue = true
          if case .jsonStruct(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.json = .jsonStruct(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.json != nil {try decoder.handleConflictingOneOf()}
          self.json = .jsonString(v)
        }
      }()
      case 3: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.json != nil {try decoder.handleConflictingOneOf()}
          self.json = .jsonBytes(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.json {
    case .jsonStruct?: try {
      guard case .jsonStruct(let v)? = self.json else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .jsonString?: try {
      guard case .jsonString(let v)? = self.json else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .jsonBytes?: try {
      guard case .jsonBytes(let v)? = self.json else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Common_V1_JsonPayload, rhs: Services_Common_V1_JsonPayload) -> Bool {
    if lhs.json != rhs.json {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Common_V1_ServerConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServerConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endpoint"),
    2: .same(proto: "port"),
    3: .standard(proto: "use_tls"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.port) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.useTls) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 1)
    }
    if self.port != 0 {
      try visitor.visitSingularInt32Field(value: self.port, fieldNumber: 2)
    }
    if self.useTls != false {
      try visitor.visitSingularBoolField(value: self.useTls, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Common_V1_ServerConfig, rhs: Services_Common_V1_ServerConfig) -> Bool {
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.port != rhs.port {return false}
    if lhs.useTls != rhs.useTls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Services_Common_V1_Nonce: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Nonce"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "request_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.requestHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    if !self.requestHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.requestHash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Services_Common_V1_Nonce, rhs: Services_Common_V1_Nonce) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.requestHash != rhs.requestHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
